{"meta":{"title":"若梦浮生","subtitle":null,"description":"人生天地间 忽如远行客","author":"刘丰恺","url":"https://lfkdsk.github.io"},"pages":[{"title":"简历 ：刘丰恺","date":"2017-03-01T06:06:18.000Z","updated":"2017-03-01T11:59:25.000Z","comments":true,"path":"mine/index.html","permalink":"https://lfkdsk.github.io/mine/index.html","excerpt":"","text":"&#x5218;&#x4E30;&#x607A; &#xFF0F; &#x7537; &#xFF0F; 1996 &#x6280;&#x672F;&#x535A;&#x5BA2;&#xFF1A;https://lfkdsk.github.io GitHub&#xFF1A;lfkdsk &#x90AE;&#x7BB1;: lfk_dsk@hotmail.com &#x624B;&#x673A;&#xFF1A;18340879772 &#x4E2A;&#x4EBA;&#x7B80;&#x4ECB;&#x5218;&#x4E30;&#x607A;(lfkdsk)&#xFF0C;&#x5927;&#x8FDE;&#x7406;&#x5DE5;&#x5927;&#x5B66;&#x8F6F;&#x4EF6;&#x5B66;&#x9662;&#x672C;&#x79D1;&#x5728;&#x8BFB;&#x3002;&#x719F;&#x6089; Android &#x524D;&#x7AEF;&#x5F00;&#x53D1;&#xFF0C;&#x4E86;&#x89E3;&#x90E8;&#x5206; Go &#x8BED;&#x8A00;&#x540E;&#x7AEF;&#x5F00;&#x53D1;&#xFF0C;&#x80FD;&#x72EC;&#x7ACB;&#x5B8C;&#x6210;&#x524D;&#x540E;&#x7AEF;&#x4E00;&#x4F53;&#x5316;&#x7684;&#x5DE5;&#x4F5C;&#xFF0C;&#x6709;&#x8F83;&#x4E3A;&#x4E30;&#x5BCC;&#x7684;&#x9879;&#x76EE;&#x7ECF;&#x9A8C;&#x3002;&#x5F00;&#x6E90;&#x793E;&#x533A;&#x6D3B;&#x8DC3;&#xFF0C;&#x5728; Github &#x793E;&#x533A;&#x6709;&#x591A;&#x4E2A;&#x62E5;&#x6709;&#x4E00;&#x5B9A;&#x91CF;&#x4F7F;&#x7528;&#x8005;&#x7684;&#x5F00;&#x6E90;&#x5E93;&#xFF0C;&#x66F4;&#x65B0;&#x9891;&#x7387;&#x8F83;&#x9AD8;&#x3002;&#x64C5;&#x957F;&#x6280;&#x672F;&#x6587;&#x7AE0;&#x5199;&#x4F5C;&#xFF0C;&#x90E8;&#x5206;&#x6587;&#x7AE0;&#x5728;&#x591A;&#x4E2A;&#x6280;&#x672F;&#x793E;&#x533A;&#x88AB;&#x8F6C;&#x5F55;&#xFF0C;&#x5728;&#x4E2A;&#x4EBA;&#x535A;&#x5BA2;&#x3001;&#x6398;&#x91D1;&#x3001;&#x535A;&#x5BA2;&#x56ED;&#x7B49;&#x5E73;&#x53F0;&#x90FD;&#x6709;&#x521B;&#x4F5C;&#x3002;&#x76EE;&#x524D;&#x5728; OurEDA &#x521B;&#x65B0;&#x56E2;&#x961F;&#x8D1F;&#x8D23; Android &#x5F00;&#x53D1;&#x7684;&#x5DE5;&#x4F5C;&#xFF0C;&#x4E13;&#x6CE8;&#x4E8E; Android &#x5F00;&#x53D1;&#xFF0C;&#x4F46;&#x5174;&#x8DA3;&#x53C8;&#x4E0D;&#x9650;&#x4E8E;&#x6B64;&#xFF0C;&#x5BF9;&#x591A;&#x4E2A; CS &#x65B9;&#x5411;&#x90FD;&#x6709;&#x6240;&#x5174;&#x8DA3;&#x3002;&#x70ED;&#x7231;&#x6280;&#x672F;&#xFF0C;&#x5E73;&#x65F6;&#x4F1A;&#x7528;&#x6280;&#x672F;&#x6765;&#x89E3;&#x51B3;&#x751F;&#x6D3B;&#x4E2D;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4E5F;&#x70ED;&#x8877;&#x4E8E;&#x548C;&#x56E2;&#x961F;&#x4E00;&#x8D77;&#x5F00;&#x53D1;&#x7A0B;&#x5E8F;&#x548C;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x3002; &#x6559;&#x80B2;&#x80CC;&#x666F; 09/2014 - &#x81F3;&#x4ECA; &#x5927;&#x8FDE;&#x7406;&#x5DE5;&#x5927;&#x5B66;&#x8F6F;&#x4EF6;&#x5B66;&#x9662;&#x672C;&#x79D1;&#x5728;&#x8BFB;&#x3002; &#x901A;&#x8FC7;CET-4&#x3001;CET-6&#xFF0C;&#x80FD;&#x719F;&#x7EC3;&#x7684;&#x9605;&#x8BFB;&#x82F1;&#x6587;&#x6587;&#x6863;&#x3002; &#x6280;&#x672F;&#x6808; &#x6709;&#x4E24;&#x5E74;&#x5DE6;&#x53F3;&#x7684; Android &#x5F00;&#x53D1;&#x7ECF;&#x9A8C;&#xFF0C;&#x719F;&#x6089; APP &#x9879;&#x76EE;&#x67B6;&#x6784;(MVP&#xFF0C;MVVM&#x6A21;&#x5F0F;)&#x3001;Restful API &#x8BBE;&#x8BA1;&#x4EA4;&#x4E92;&#x3001;&#x672C;&#x5730;&#x6570;&#x636E;&#x7BA1;&#x7406;&#x3001;&#x81EA;&#x5B9A;&#x4E49;View&#x8BBE;&#x8BA1;&#x4E0E;&#x4EA4;&#x4E92;&#xFF0C;&#x5177;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x6027;&#x80FD;&#x8C03;&#x4F18;&#x7ECF;&#x9A8C;&#x3002; &#x6709;&#x90E8;&#x5206;&#x7684;SDK&#x6E90;&#x7801;&#x9605;&#x8BFB;&#x7ECF;&#x9A8C;&#xFF0C;&#x719F;&#x6089;&#x76EE;&#x524D;&#x6D41;&#x884C;&#x7684;Rxjava,EventBus,ButterKnife&#x7B49;&#x6D41;&#x884C;&#x6846;&#x67B6;&#xFF08;&#x90E8;&#x5206;&#x9605;&#x8BFB;&#x8FC7;&#x6E90;&#x7801;&#xFF09;&#x3002; &#x5177;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x670D;&#x52A1;&#x7AEF;&#x540E;&#x7AEF;&#x5F00;&#x53D1;&#x7ECF;&#x9A8C;&#xFF0C;&#x4F7F;&#x7528; Go &#x8BED;&#x8A00;&#x548C; Beego &#x6846;&#x67B6;&#x5F00;&#x53D1;&#x5927;&#x8FDE;&#x7406;&#x5DE5;&#x5927;&#x5B66;&#x8F6F;&#x4EF6;&#x5B66;&#x9662;&#x5FAE;&#x4FE1;&#x7F51;&#x7AD9;&#x3002; &#x5BF9;&#x7F16;&#x8BD1;&#x539F;&#x7406;&#x3001;&#x81EA;&#x52A8;&#x673A;&#x3001;&#x89E3;&#x91CA;&#x5668;&#x7684;&#x76F8;&#x5173;&#x77E5;&#x8BC6;&#x611F;&#x5174;&#x8DA3;&#xFF0C;&#x6709;&#x76F8;&#x5173;&#x7684; DSL &#x8BED;&#x8A00;&#x5F00;&#x53D1;&#x7ECF;&#x9A8C;&#x3002; &#x719F;&#x6089; Git&#xFF0C;&#x80FD;&#x591F;&#x5B8C;&#x6210;&#x826F;&#x597D;&#x7684;&#x56E2;&#x961F;&#x5F00;&#x53D1;&#x3002;&#x719F;&#x6089;&#x6570;&#x636E;&#x5E93;&#x76F8;&#x5173;&#x7684;&#x77E5;&#x8BC6;&#x548C;&#x6280;&#x80FD;&#xFF0C;&#x719F;&#x6089;&#x76F8;&#x5173;&#x7684; SQL &#x8BED;&#x53E5;&#x548C;&#x6846;&#x67B6;&#x3002; &#x4F1A; C++/C&#x3001;Python, &#x719F;&#x7EC3; Java, Swift &#x5DE5;&#x4F5C;&#x7ECF;&#x5386;&#x5B66;&#x4F34;&#xFF0C;OurEDA&#x521B;&#x65B0;&#x56E2;&#x961F;&#xFF0C;Android&#x5F00;&#x53D1;&#x5DE5;&#x7A0B;&#x5E08;&#xFF08;06/2016 - &#x81F3;&#x4ECA;&#xFF09; &#x5B66;&#x4F34;&#x662F;&#x4E00;&#x6B3E;&#x6821;&#x56ED;&#x5E94;&#x7528;&#xFF0C;&#x5728;&#x4E4B;&#x524D;&#x5DF2;&#x7ECF;&#x6709;&#x4E24;&#x4E2A;&#x7248;&#x672C;&#x7684;&#x8FED;&#x4EE3;&#x5E76;&#x6210;&#x7EE9;&#x559C;&#x4EBA;&#x7684;&#x83B7;&#x5F97;&#x591A;&#x4E2A;&#x56FD;&#x5185;&#x5956;&#x9879;&#xFF08;Google&#x4E2D;&#x56FD;&#x5F00;&#x53D1;&#x8005;&#x6311;&#x6218;&#x8D5B;&#xFF0F;&#x8FBD;&#x5B81;&#x7701;&#x79FB;&#x52A8;&#x5E94;&#x7528;&#x5F00;&#x53D1;&#x5927;&#x8D5B;&#xFF09;&#x3002; &#x7B2C;&#x4E00;&#x6B21;&#x63A5;&#x624B;&#x62E5;&#x6709;&#x5927;&#x578B;&#x7528;&#x6237;&#x91CF;&#x7684;&#x5E94;&#x7528;&#xFF0C;&#x4E3B;&#x8981;&#x8D1F;&#x8D23;Android&#x7AEF;&#x7684;&#x5F00;&#x53D1;&#xFF0C;&#x5F00;&#x59CB;&#x5BF9;&#x5F00;&#x53D1;&#x59CB;&#x4E8E;Android &#x5F00;&#x53D1;&#x840C;&#x82BD;&#x65F6;&#x671F;&#x7684;&#x65E7;&#x7248;&#x672C;&#x8FDB;&#x884C;&#x90E8;&#x5206;&#x91CD;&#x6784;&#x4E0E;&#x7EF4;&#x62A4;&#x3002;&#x4E4B;&#x540E;&#x5728;&#x5F00;&#x53D1;3.0&#x7248;&#x672C;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x5F15;&#x5165;&#x5E76;&#x5728;&#x5176;&#x4E2D;&#x5B66;&#x5230;&#x4E86;&#x4F9D;&#x8D56;&#x6CE8;&#x5165;&#xFF0C;&#x54CD;&#x5E94;&#x5F0F;&#x7F16;&#x7A0B;&#xFF0C;RESTful API&#x7B49;&#x4E1A;&#x754C;&#x5148;&#x8FDB;&#x7684;&#x601D;&#x60F3;&#x548C;&#x5DE5;&#x5177;&#xFF0C;&#x4E3A;&#x65E5;&#x540E;&#x7684;&#x6301;&#x7EED;&#x8FED;&#x4EE3;&#x548C;&#x7EF4;&#x62A4;&#x63D0;&#x4F9B;&#x4E86;&#x4FDD;&#x969C;&#xFF0C;&#x5B8C;&#x6210;&#x540E;&#x5BA2;&#x6237;&#x7AEF;&#x4EE3;&#x7801;&#x8FBE;&#x5230;&#x4E86;7w+&#x3002; 3.0&#x7248;&#x672C;&#x4E0A;&#x7EBF;&#x540E;&#xFF0C;&#x7528;&#x6237;&#x91CF;&#x63D0;&#x5347;&#x5230;1.1w&#x4EBA;&#x5DE6;&#x53F3;&#xFF0C;&#x65E5;&#x6D3B;&#x91CF;&#x6709;4k&#x5DE6;&#x53F3;&#x3002; &#x5173;&#x952E;&#x8BCD;&#xFF1A;&#x54CD;&#x5E94;&#x5F0F;&#x7F16;&#x7A0B;&#x3001;&#x4F9D;&#x8D56;&#x6CE8;&#x5165;&#x3001;RESTful API &#x5927;&#x8FDE;&#x7406;&#x5DE5;&#x5927;&#x5B66;&#x8F6F;&#x4EF6;&#x5B66;&#x9662;&#x5FAE;&#x4FE1;&#x7F51;&#x7AD9;&#xFF0C;&#x5927;&#x8FDE;&#x7406;&#x5DE5;&#x5927;&#x5B66;&#xFF0C;&#x540E;&#x7AEF;&#x5F00;&#x53D1;&#x5DE5;&#x7A0B;&#x5E08;&#xFF08;03/2016 - 04/2016&#xFF09; &#x5927;&#x8FDE;&#x7406;&#x5DE5;&#x5927;&#x5B66;&#x8F6F;&#x4EF6;&#x5B66;&#x9662;&#x5FAE;&#x4FE1;&#x7684;&#x5185;&#x5D4C;&#x7F51;&#x7AD9;&#xFF0C;&#x62E5;&#x6709;&#x4E00;&#x4E2A;&#x7BA1;&#x7406;&#x5E73;&#x53F0;&#x53EF;&#x4EE5;&#x7BA1;&#x7406;&#x90E8;&#x7F72;&#x4E0A;&#x53BB;&#x7684;&#x6587;&#x7AE0;&#xFF0C;&#x9996;&#x6B21;&#x5728;&#x5B9E;&#x9645;&#x9879;&#x76EE;&#x62C5;&#x4EFB;&#x540E;&#x7AEF;&#x5DE5;&#x7A0B;&#x5E08;&#x7684;&#x89D2;&#x8272;&#x3002; &#x9009;&#x7528; Golang &#x4F5C;&#x4E3A;&#x5F00;&#x53D1;&#x8BED;&#x8A00;&#xFF0C;&#x4F7F;&#x7528; Beego &#x6846;&#x67B6;&#x5F00;&#x53D1;&#x540E;&#x7AEF;&#x9879;&#x76EE;&#xFF0C;&#x4F7F;&#x7528;MySQL &#x6570;&#x636E;&#x5E93;&#x5B58;&#x50A8;&#x6570;&#x636E;&#xFF0C;&#x4F7F;&#x7528;&#x963F;&#x91CC;&#x4E91;&#x8FDB;&#x884C;&#x90E8;&#x7F72;&#x3002; &#x548C;&#x524D;&#x7AEF;&#x540C;&#x5B66;&#x5408;&#x4F5C;&#x5B8C;&#x6210;&#x4E86;&#x6574;&#x4E2A;&#x7BA1;&#x7406;&#x7CFB;&#x7EDF;&#x7684;&#x8BBE;&#x8BA1;&#x548C;&#x65BD;&#x5DE5;&#xFF0C;&#x73B0;&#x5DF2;&#x5728;&#x5B66;&#x9662;&#x516C;&#x4F17;&#x53F7;&#x5185;&#x6295;&#x5165;&#x4F7F;&#x7528;&#x3002; &#x5173;&#x952E;&#x8BCD;&#xFF1A;&#x540E;&#x7AEF;&#x5F00;&#x53D1;&#x3001;&#x5B66;&#x6821;&#x4EFB;&#x52A1;&#x9879;&#x76EE; &#x4E91;&#x624B;&#x5E10;&#xFF0C;OurEDA&#x521B;&#x65B0;&#x56E2;&#x961F;&#xFF0C;Android&#x5F00;&#x53D1;&#x5DE5;&#x7A0B;&#x5E08;&#xFF08;09/2015 - 11/2015&#xFF09; &#x4E91;&#x624B;&#x5E10;&#x662F;&#x4E00;&#x6B3E;&#x8BB0;&#x5F55;&#x6027;&#x7684; APP &#x652F;&#x6301;&#x7B14;&#x8FF9;&#x3001;&#x6587;&#x672C;&#xFF08;&#x652F;&#x6301;Markdown&#xFF09;&#x3001;&#x4EE3;&#x7801;&#xFF08;coder&#x9690;&#x85CF;&#x529F;&#x80FD;&#xFF09;&#x7684;&#x540C;&#x6B65;&#x4E0A;&#x4F20;&#x548C;&#x8BB0;&#x5F55;&#x3002;&#x5FAE;&#x8F6F;&#x521B;&#x65B0;&#x676F;&#x533A;&#x57DF;&#x8D5B;&#x4E09;&#x7B49;&#x5956;&#xFF0C;&#x8D1F;&#x8D23;&#x6574;&#x4E2A;&#x9879;&#x76EE;&#x7684;&#x8BBE;&#x8BA1;&#x548C; Android &#x7AEF;&#x7684;&#x5B9E;&#x73B0;&#x3002;&#x4F7F;&#x7528;&#x4E86;&#x81EA;&#x5DF1;&#x4E4B;&#x524D;&#x5728; Github &#x5F00;&#x53D1;&#x7684;&#x5F00;&#x6E90;&#x9879;&#x76EE; JustWeTools &#x9879;&#x76EE;&#x3002; &#x5173;&#x952E;&#x8BCD;&#xFF1A;&#x7B14;&#x8BB0;&#x7C7B;&#x5E94;&#x7528;&#x3001;&#x7B14;&#x8FF9;&#x8BB0;&#x5F55;&#x3001;&#x5F00;&#x6E90;&#x793E;&#x533A;&#x6D3B;&#x8DC3; &#x667A;&#x80FD;&#x7A7A;&#x8C03;&#x6247;&#xFF0C;OurEDA&#x521B;&#x65B0;&#x56E2;&#x961F;&#xFF0C;Android&#x5F00;&#x53D1;&#x5DE5;&#x7A0B;&#x5E08; (03/2015 - 05/2015) &#x667A;&#x80FD;&#x7A7A;&#x8C03;&#x6247;&#x662F;&#x901A;&#x8FC7; &#x667A;&#x80FD;&#x624B;&#x673A;&#x63A7;&#x5236;&#x7684;&#x7A7A;&#x8C03;&#x6247;&#xFF0C;&#x624B;&#x673A;&#x5E94;&#x7528;&#x548C;&#x7A7A;&#x8C03;&#x6247;&#x5747;&#x7531;&#x5B66;&#x751F;&#x81EA;&#x4E3B;&#x8BBE;&#x8BA1;&#xFF0C;&#x80FD;&#x5B9E;&#x73B0;&#x7528;&#x667A;&#x80FD;&#x624B;&#x673A;&#x63A7;&#x5236;&#x98CE;&#x6247;&#x7684;&#x6E29;&#x5EA6;&#xFF0C;&#x98CE;&#x5411;&#xFF0C;&#x98CE;&#x901F;&#x548C;&#x4F7F;&#x7528;&#x81EA;&#x7136;&#x98CE;&#x7B97;&#x6CD5;&#x8FDB;&#x884C;&#x667A;&#x80FD;&#x8C03;&#x8282;&#xFF0C;&#x83B7;&#x5F97;&#x591A;&#x4E2A;&#x56FD;&#x5185;&#x5956;&#x9879;&#xFF0C;&#x5B66;&#x4E60;&#x4E86;&#x5F88;&#x591A;&#x5D4C;&#x5165;&#x5F0F;&#x548C;&#x5355;&#x7247;&#x673A;&#x7684;&#x77E5;&#x8BC6;&#x3002; &#x548C;&#x4E13;&#x95E8;&#x8D1F;&#x8D23;&#x786C;&#x4EF6;&#x7684;&#x540C;&#x5B66;&#x8FDB;&#x884C;&#x4EA4;&#x4E92;&#x5B66;&#x5230;&#x4E86;&#x5173;&#x4E8E;&#x84DD;&#x7259;&#x3001;WiFi&#x8FDE;&#x63A5;&#x7684;&#x77E5;&#x8BC6;&#xFF0C;&#x9605;&#x8BFB;&#x6587;&#x732E;&#x5B9E;&#x73B0;&#x8C03;&#x8282;&#x7B97;&#x6CD5;&#x3002; &#x5173;&#x952E;&#x8BCD;&#xFF1A;&#x7269;&#x8054;&#x7F51;&#x3001;&#x84DD;&#x7259;&#x3001;WiFi&#x3001;&#x667A;&#x80FD;&#x786C;&#x4EF6; &#x5F00;&#x6E90;&#x9879;&#x76EE;JustWeEngine &#x9879;&#x76EE;&#x5730;&#x5740;&#xFF1A;JustWeEngine &#x7B80;&#x4ECB;&#xFF1A;&#x57FA;&#x4E8E; Android &#x5E73;&#x53F0;&#x7684;&#x3001;&#x9762;&#x5411;&#x539F;&#x751F;&#x7684;&#x3001;2D&#x6E38;&#x620F;&#x5F00;&#x53D1;&#x6846;&#x67B6;&#xFF0C;&#x76EE;&#x524D;&#x7A33;&#x5B9A;&#x7248;&#x672C;&#x5DF2;&#x63A8;&#x8FDB;&#x5230;v1.13&#xFF0C;&#x65B0;&#x7248;&#x672C;&#x6B63;&#x5728;&#x5F00;&#x53D1;&#x4E2D;&#xFF0C;&#x4E0B;&#x4E00;&#x7248;&#x672C;&#x5C06;&#x652F;&#x6301;&#x5185;&#x5D4C;&#x7684; DSL &#x6E38;&#x620F;&#x811A;&#x672C;&#xFF08;&#x76EE;&#x524D;&#x89E3;&#x91CA;&#x5668;&#x5DF2;&#x5F00;&#x53D1;&#x5B8C;&#x6BD5;&#xFF09;&#x3001;Canvas&#x63A7;&#x4EF6;&#x5E03;&#x5C40;&#xFF08;&#x5BF9;Canvas&#x753B;&#x51FA;&#x7684;&#x63A7;&#x4EF6;&#x4F7F;&#x7528;&#x5E03;&#x5C40;&#xFF09;&#x3002;JustWeEngine &#x53EF;&#x4EE5;&#x5927;&#x5927;&#x7684;&#x7B80;&#x5316;&#x6E38;&#x620F;&#x5F00;&#x53D1;&#x4E2D;&#x7684;&#x5B66;&#x4E60;&#x6210;&#x672C;&#xFF0C;&#x5229;&#x4E8E;&#x4E00;&#x4E9B;&#x5C0F;&#x578B;&#x6E38;&#x620F;&#x7A0B;&#x5E8F;&#x7684;&#x7F16;&#x5199;&#x3002;&#x5E76;&#x4E14;&#x5404;&#x79CD;&#x7684;&#x76F8;&#x5173;&#x7684;&#x5DE5;&#x5177;&#x5305;&#x4E5F;&#x5728;&#x6301;&#x7EED;&#x66F4;&#x65B0;&#x4E2D;&#xFF0C;&#x4E3A;&#x5176;&#x63D0;&#x4F9B;&#x66F4;&#x591A;&#x5F3A;&#x5927;&#x7684;&#x529F;&#x80FD;&#x3002; &#x4F7F;&#x7528;&#x60C5;&#x51B5;&#xFF1A;&#x4E0A;&#x4E00;&#x4E2A;&#x5C0F;&#x7248;&#x672C;&#x7684;&#x4E0B;&#x8F7D;&#x91CF;&#x8D85;&#x8FC7;&#x4E00;&#x5343;&#xFF0C;&#x7528;&#x6237;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x6D3B;&#x8DC3;&#x5EA6;&#xFF0C;&#x76EE;&#x524D;&#x4E5F;&#x5728;&#x4E0D;&#x65AD;&#x79EF;&#x7D2F;&#x4E2D;&#xFF0C;&#x5DF2;&#x6709;&#x6570;&#x4E2A;&#x6210;&#x578B;&#x7684;&#x9879;&#x76EE;&#x63A5;&#x5165;&#x4E86; JustWeEngine &#x7528;&#x6237;&#x9879;&#x76EE;&#x9875;&#x9762;&#x3002; JustWeTools &#x9879;&#x76EE;&#x5730;&#x5740;: JustWeTools &#x7B80;&#x4ECB;&#xFF1A;&#x81EA;&#x5B9A;&#x4E49;&#x63A7;&#x4EF6;&#x7684;&#x5236;&#x54C1;&#x96C6;&#x5408;&#xFF0C;&#x4EC5;&#x5305;&#x542B;&#x4E0D;&#x5E38;&#x89C1;&#x7684;&#x5F00;&#x6E90;&#x63A7;&#x4EF6;&#xFF0C;&#x5305;&#x62EC;PaintView&#x753B;&#x56FE;&#x5DE5;&#x5177;&#xFF0C;CodeView&#x4EE3;&#x7801;&#x7F16;&#x8F91; ,MarkDownView&#x652F;&#x6301;MarkDown&#x8BED;&#x6CD5;&#x7684;&#x6587;&#x5B57;&#x6E32;&#x67D3;&#x5668;&#xFF0C;VerTextView&#x652F;&#x6301;&#x7AD6;&#x884C;&#x6392;&#x7248;/&#x4E0B;&#x5212;&#x7EBF;&#x7684;TextView&#x7B49;&#x63A7;&#x4EF6;&#xFF0C;&#x4E3A;&#x6709;&#x9700;&#x6C42;&#x7684;&#x7528;&#x6237;&#x63D0;&#x4F9B;&#x4E86;&#x5F88;&#x5927;&#x7684;&#x4FBF;&#x5229;&#x548C;&#x53C2;&#x8003;&#x3002; HobbyScript &#x9879;&#x76EE;&#x5730;&#x5740;&#xFF1A; HobbyScript &#x7B80;&#x4ECB;&#xFF1A;&#x80FD;&#x8FD0;&#x884C;&#x5728; JVM &#x4E0A;&#x7684;&#x4E00;&#x95E8;&#x81EA;&#x5236;&#x8BED;&#x8A00;&#xFF0C;&#x517C;&#x5177;&#x52A8;&#x6001;&#x8BED;&#x8A00;&#x548C;&#x9759;&#x6001;&#x8BED;&#x8A00;&#x7684;&#x90E8;&#x5206;&#x7279;&#x6027;&#xFF0C;&#x76EE;&#x524D;&#x5176;&#x89E3;&#x91CA;&#x5668;&#x5DF2;&#x7ECF;&#x901A;&#x8FC7; binding &#x548C; JustWeEngine &#x8FDB;&#x884C;&#x8FDE;&#x63A5;&#x4F5C;&#x4E3A;&#x4E00;&#x79CD;&#x7684;&#x4E00;&#x95E8; DSL &#x7528;&#x6765;&#x7F16;&#x5199;&#x6E38;&#x620F;&#x811A;&#x672C;&#x3002; &#x6280;&#x672F;&#x6587;&#x7AE0; &#x6E90;&#x7801;&#x9605;&#x8BFB;&#x7CFB;&#x5217;&#xFF1A;EventBus &#x7CFB;&#x5217;&#x6587;&#x7AE0;&#xFF1A;SICP&#x7684;&#x9B54;&#x6CD5; &#x8BD1;&#x6587;:Sketch&#x7684;&#x8FC7;&#x53BB;&#x73B0;&#x5728;&#x548C;&#x672A;&#x6765; &#x8BD1;&#x6587;:&#x9009;&#x62E9;&#x4F7F;&#x7528;&#x6B63;&#x786E;&#x7684; Markdown Parser &#x81F4;&#x8C22; &#x611F;&#x8C22;&#x60A8;&#x82B1;&#x65F6;&#x95F4;&#x9605;&#x8BFB;&#x6211;&#x7684;&#x7B80;&#x5386;&#xFF0C;&#x671F;&#x5F85;&#x80FD;&#x6709;&#x673A;&#x4F1A;&#x548C;&#x60A8;&#x5171;&#x4E8B;&#x3002; PDF&#x4E0B;&#x8F7D;"},{"title":"归档","date":"2016-05-26T12:24:38.000Z","updated":"2016-05-26T12:26:01.000Z","comments":true,"path":"archive/index.html","permalink":"https://lfkdsk.github.io/archive/index.html","excerpt":"","text":""},{"title":"SICP 的魔法","date":"2017-02-28T16:34:01.000Z","updated":"2017-03-19T15:44:58.000Z","comments":true,"path":"sicp/index.html","permalink":"https://lfkdsk.github.io/sicp/index.html","excerpt":"","text":"(&#x6574;&#x7406;&#x81EA;&#x6211;&#x81EA;&#x5DF1;&#x7684;&#x535A;&#x5BA2;&#xFF0C;&#x62C5;&#x5FC3;&#x6709;&#x4E9B;&#x540C;&#x5B66;&#x770B;github page&#x4E0D;&#x65B9;&#x4FBF;&#xFF0C;&#x5355;&#x72EC;&#x5F00;&#x4E00;&#x4E2A;proj) &#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x7684;&#x5185;&#x5BB9;&#x5305;&#x7F57;&#x4E07;&#x8C61;&#xFF0C;&#x5176;&#x4E2D;&#x7684;&#x7ECF;&#x5178;&#x7684;&#x8BFE;&#x7A0B;&#x4E5F;&#x662F;&#x4E0D;&#x80DC;&#x679A;&#x4E3E;&#x3002;&#x4F46;&#x662F;&#x5728;&#x8FD9;&#x5176;&#x4E2D;SICP(Structure and Interpretation of Computer Programs)&#x7EDD;&#x5BF9;&#x662F;&#x5176;&#x4E2D;&#x7684;&#x7ECF;&#x5178;&#x548C;&#x7FD8;&#x695A;&#xFF0C;&#x5728;2008&#x5E74;&#x4EE5;&#x524D;SICP&#x7684;MIT6.001&#x8BFE;&#x7A0B;&#x5386;&#x6765;&#x662F;CS&#x76F8;&#x5173;&#x4E13;&#x4E1A;&#x5FC5;&#x4FEE;&#x5165;&#x95E8;&#x8BFE;&#x7A0B;&#x3002; SICP&#x7684;&#x6838;&#x5FC3;&#x5185;&#x5BB9;&#x662F;&#x4EC0;&#x4E48;&#x5462;&#xFF1F;&#x4F17;&#x8BF4;&#x7EB7;&#x4E91;&#xFF0C;&#x6709;&#x4EBA;&#x8BF4;&#x662F;&#x4E00;&#x672C;&#x6709;&#x5173;Lisp&#xFF0F;Scheme&#x7684;&#x4E66;&#x4E3B;&#x8981;&#x8BB2;&#x51FD;&#x6570;&#x5F0F;&#x7F16;&#x7A0B;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x6709;&#x7684;&#x8BF4;&#x662F;&#x4E00;&#x672C;&#x6709;&#x5173;&#x89E3;&#x91CA;&#x5668;&#x6784;&#x9020;&#x7684;&#x5165;&#x95E8;&#x4E66;&#x7C4D;&#xFF0C;&#x548C;&#x6211;&#x4EEC;&#x5B66;&#x8FC7;&#x7684;&#x9F99;&#x4E66;&#x6302;&#x94A9;&#xFF0C;&#x4F46;&#x5C31;&#x6211;&#x4E2A;&#x4EBA;&#x800C;&#x8A00;&#xFF0C;SICP&#x4F5C;&#x4E3A;&#x4E00;&#x672C;&#x5165;&#x95E8;&#x4E66;&#x66F4;&#x591A;&#x7684;&#x4E0D;&#x662F;&#x62C5;&#x8D1F;&#x8D77;&#x4ECB;&#x7ECD;&#x67D0;&#x4E00;&#x65B9;&#x9762;&#x5177;&#x4F53;&#x7684;&#x77E5;&#x8BC6;&#x7684;&#x91CD;&#x4EFB;&#xFF0C;&#x800C;&#x662F;&#x4ECE;&#x591A;&#x4E2A;&#x89D2;&#x5EA6;&#x53BB;&#x6559;&#x4E00;&#x4E2A;&#x521D;&#x5B66;&#x8005;&#x4ECE;&#x7A0B;&#x5E8F;&#x62BD;&#x8C61;&#x3001;&#x7406;&#x89E3;&#x5DE5;&#x7A0B;&#x67B6;&#x6784;&#x3001;&#x5B66;&#x4E60;DSL&#x7684;&#x6784;&#x5EFA;&#x65B9;&#x6CD5;&#x2026;&#x2026;&#xFF0C;&#x4E0D;&#x5355;&#x7EAF;&#x4ECB;&#x7ECD;&#x4E00;&#x65B9;&#x9762;&#x7684;&#x77E5;&#x8BC6;&#x800C;&#x662F;&#x5B8C;&#x5907;&#x7684;&#x5F62;&#x6210;&#x4E00;&#x4E2A;&#x95ED;&#x73AF;&#x7684;&#x53BB;&#x50CF;&#x4F60;&#x4ECB;&#x7ECD;&#x4EC0;&#x4E48;&#x662F;Computer Science&#x3002;&#x76F8;&#x6BD4;&#x4E8E;&#x8FD9;&#x4E9B;&#x5F53;&#x521D;&#x9009;&#x7528;MIT Scheme&#x73B0;&#x5728;&#x4F7F;&#x7528;Python&#xFF0C;&#x4E0D;&#x8FC7;&#x662F;&#x6700;&#x5927;&#x7A0B;&#x5EA6;&#x4E0A;&#x51CF;&#x5C0F;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x672C;&#x8EAB;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x5BF9;&#x5B66;&#x751F;&#x7406;&#x89E3;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x4E2A;&#x4EBA;&#x89C9;&#x5F97;&#x65E0;&#x8DB3;&#x6302;&#x6000;&#x3002; SICP&#x7684;&#x5404;&#x4E2A;&#x7248;&#x672C;&#x7684;&#x5C01;&#x9762;&#xFF0C;&#x90FD;&#x9009;&#x62E9;&#x4E86;&#x9B54;&#x6CD5;&#x5E08;&#x4F5C;&#x4E3A;&#x5176;&#x4E2D;&#x7684;&#x4E3B;&#x8981;&#x7D20;&#x6750;&#xFF0C;&#x8FD9;&#x91CC;&#x4E5F;&#x4F5C;&#x4E3A;&#x6211;&#x8FD9;&#x4E2A;&#x7CFB;&#x5217;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x8BA9;&#x6211;&#x4EEC;&#x4E00;&#x8D77;&#x9886;&#x7565;SICP&#x7684;&#x9B54;&#x6CD5;&#x3002; &#x7AE0;&#x8282;&#x76EE;&#x5F55;0x00&#xFF1A;SICP &#x7684;&#x9B54;&#x6CD5; - Scheme &#x57FA;&#x7840;&#x548C;&#x9ED1;&#x76D2;&#x62BD;&#x8C61; 0x01&#xFF1A;SICP &#x7684;&#x9B54;&#x6CD5; - &#x8FC7;&#x7A0B;&#x7684;&#x6C42;&#x503C;&#x8BA1;&#x7B97;&#x548C;&#x9AD8;&#x9636;&#x8FC7;&#x7A0B; 0x02&#xFF1A;SICP &#x7684;&#x9B54;&#x6CD5; - &#x6570;&#x636E;&#x62BD;&#x8C61;&#x548C;&#x5C42;&#x6B21;&#x62BD;&#x8C61; FeedbackPlease send your feedback as long as there occurs any inconvenience or problem. You can contact me with: Email: lfk_dsk@hotmail.com Weibo: @&#x4EA6;&#x72C2;&#x4EA6;&#x4FA0;_&#x4EA6;&#x6E29;&#x6587; Blog: &#x5218;&#x4E30;&#x607A; LicenseCopyright 2017 [&#x5218;&#x4E30;&#x607A;](http://www.cnblogs.com/lfk-dsk/) Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"title":"关于","date":"2016-05-26T12:55:13.000Z","updated":"2017-02-27T07:11:55.000Z","comments":true,"path":"about/index.html","permalink":"https://lfkdsk.github.io/about/index.html","excerpt":"","text":"&#x5F53;&#x524D;&#x7684;&#x535A;&#x5BA2;&#x5730;&#x5740;:&#x82E5;&#x68A6;&#x6D6E;&#x751F; &#x535A;&#x5BA2;&#x56ED;&#x5730;&#x5740;: &#x535A;&#x5BA2;&#x56ED; &#x5B66;&#x4F34;&#x4E0B;&#x8F7D;&#x5730;&#x5740;:&#x5B66;&#x4F34;"},{"title":"标签","date":"2016-12-18T08:54:47.000Z","updated":"2016-12-18T09:00:39.000Z","comments":false,"path":"tags/index.html","permalink":"https://lfkdsk.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Algorithms:MergeSort","slug":"re-learn-al-4","date":"2017-04-01T06:30:53.000Z","updated":"2017-04-01T06:32:24.000Z","comments":true,"path":"2017/04/01/re-learn-al-4/","link":"","permalink":"https://lfkdsk.github.io/2017/04/01/re-learn-al-4/","excerpt":"","text":"&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#x5206;&#x6CBB;&#x6CD5;&#x7684;&#x6392;&#x5E8F;&#x3002;","categories":[],"tags":[{"name":"re-learn","slug":"re-learn","permalink":"https://lfkdsk.github.io/tags/re-learn/"}]},{"title":"Algorithms:Elementary Sort","slug":"re-learn-al-3","date":"2017-04-01T02:24:21.000Z","updated":"2017-04-01T05:07:09.000Z","comments":true,"path":"2017/04/01/re-learn-al-3/","link":"","permalink":"https://lfkdsk.github.io/2017/04/01/re-learn-al-3/","excerpt":"","text":"&#x9009;&#x62E9;&#x6392;&#x5E8F; &#x7B80;&#x5355;&#x7279;&#x6027; &#xFF1A; &#x53CC;&#x5C42;&#x5FAA;&#x73AF; &#x6BCF;&#x6B21;&#x786E;&#x5B9A;&#x4E00;&#x4F4D;&#x7684;&#x6570;&#x636E; $ O(n^2) $ 1234567891011public static void SelectSort(Comparable[] list) { for (int i = 0;i &lt; list.length; i++) { Comparable min = list[i]; for (int j = i + 1;j &lt; list.length; j++) { if(list[j].compareTo(min) &lt; 0) { min = list[j]; } } swap(list[i], min); }} &#x9009;&#x62E9;&#x6392;&#x5E8F;&#x662F;&#x901A;&#x8FC7;&#x6BCF;&#x6B21;&#x786E;&#x5B9A;&#x4E00;&#x4E2A;&#xFF08;&#x6700;&#x5C0F;&#x6216;&#x6700;&#x5927;&#x7684;&#x4F4D;&#xFF09;&#x6765;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x4ECE;&#x5B9A;&#x4E49;&#x4E0A;&#x660E;&#x663E;&#x80FD;&#x770B;&#x51FA;&#x6392;&#x5E8F;&#x7684;&#x8FC7;&#x7A0B;&#x548C;&#x8F93;&#x5165;&#x7684;&#x89C4;&#x6A21;&#x6709;&#x5173;&#xFF0C;&#x4F46;&#x662F;&#x548C;&#x6570;&#x7EC4;&#x672C;&#x8EAB;&#x7684;&#x987A;&#x5E8F;&#x65E0;&#x5173;&#xFF0C;&#x56E0;&#x4E3A;&#x6CA1;&#x6709;&#x8FD0;&#x7528;&#x6570;&#x7EC4;&#x672C;&#x8EAB;&#x7684;&#x987A;&#x5E8F;&#xFF0C;&#x6240;&#x4EE5;&#x65E0;&#x8BBA;&#x662F;&#x63A5;&#x8FD1;&#x6709;&#x5E8F;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x8FD8;&#x662F;&#x5B8C;&#x5168;&#x4E71;&#x5E8F;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x53EA;&#x8981;&#x89C4;&#x6A21;&#x4E00;&#x6837;&#xFF0C;&#x590D;&#x6742;&#x5EA6;&#x90FD;&#x4E00;&#x6837;&#x3002; &#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#x4F4D;&#x90FD;&#x4F1A;&#x8FDB;&#x884C; $ (n-i-1) $ &#x6B21;&#x6BD4;&#x8F83;&#xFF0C;&#x6240;&#x4EE5;&#x6574;&#x4F53;&#x4F1A;&#x8FDB;&#x884C;&#xFF1A; (n-1) + (n-2) + ······· + (0) = N^2/2&#x6B21;&#x7684;&#x6BD4;&#x8F83;&#xFF0C;&#x53E6;&#x5916;&#x4EA4;&#x6362;&#x53EA;&#x8FDB;&#x884C;&#x4E86; $ O(n) $ &#x6B21;&#xFF0C;&#x548C;&#x6570;&#x7EC4;&#x6210;&#x7EBF;&#x5F62;&#x5173;&#x7CFB;&#x3002; &#x63D2;&#x5165;&#x6392;&#x5E8F; &#x7B80;&#x5355;&#x7279;&#x6027;&#xFF1A; &#x6392;&#x5E8F;&#x7684;&#x6E38;&#x6807; $ i $ &#x6C38;&#x8FDC;&#x4FDD;&#x8BC1; $ i $ &#x5DE6;&#x4FA7;&#x7684;&#x6570;&#x7EC4;&#x662F;&#x6709;&#x5E8F;&#x7684; &#x6BCF;&#x6B21;&#x6E38;&#x6807; $ i $ &#x53D1;&#x73B0;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x4F1A;&#x5411;&#x5DE6;&#x4FA7;&#x7684;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x63D2;&#x5165; $ O(n^2) $ 1234567891011public static void InsertSort(Comparable[] list) { for (int i = 0; i &lt; list.length; i++) { for (int j = i; j &gt; 0; j--) { if(a[j].compareTo(a[j - 1]) &lt; 0) { swap(a[j], a[j-1]); } else { break; } } }} &#x63D2;&#x5165;&#x6392;&#x5E8F;&#x662F;&#x53E6;&#x4E00;&#x4E2A; $ O(n^2) $ &#x7684;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#xFF0C;&#x6392;&#x5E8F;&#x7684;&#x6E38;&#x6807; $ i $ &#x6C38;&#x8FDC;&#x4FDD;&#x8BC1; $ i $ &#x5DE6;&#x4FA7;&#x7684;&#x6570;&#x7EC4;&#x662F;&#x6709;&#x5E8F;&#x7684;&#xFF0C;&#x6BCF;&#x6B21;&#x6E38;&#x6807; $ i $ &#x53D1;&#x73B0;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x4F1A;&#x5411;&#x5DE6;&#x4FA7;&#x7684;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x63D2;&#x5165;&#xFF0C;&#x5982;&#x679C;&#x6BD4;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5927;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5; break &#x4E0D;&#x7BA1;&#x4E86;&#x3002; Tips &#x5012;&#x7F6E;&#x5BF9; &#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x9006;&#x5E8F;&#x6570;&#x5BF9;&#x88AB;&#x79F0;&#x4E3A;&#x5012;&#x7F6E;&#x5BF9;&#xFF0C;&#x9009;&#x62E9;&#x6392;&#x5E8F;&#x7684;&#x6CA1;&#x6B21;&#x4EA4;&#x6362;&#x90FD;&#x4F1A;&#x8FDB;&#x884C;&#x4E00;&#x4E2A;&#x5012;&#x7F6E;&#x5BF9;&#x7684;&#x98A0;&#x5012;&#x3002; &#x8FD9;&#x6837;&#x5B50;&#xFF0C;&#x672C;&#x8EAB;&#x90E8;&#x5206;&#x6709;&#x5E8F;&#x6216;&#x8005;&#x662F;&#x672C;&#x8EAB;&#x5305;&#x542B;&#x7684;&#x9006;&#x5E8F;&#x5BF9;&#x5C11;&#x7684;&#x6570;&#x7EC4;&#x4F7F;&#x7528;&#x9009;&#x62E9;&#x6392;&#x5E8F;&#x901F;&#x5EA6;&#x53EF;&#x4EE5;&#x52A0;&#x5FEB;&#x3002; 12345678910public static InsertSort(Comparable[] list) { for (int i = 0; i &lt; list.length; i++) { Comparable temp = list[i]; int j = i - 1; for (; j &gt;= 0 &amp;&amp; temp.compareTo(list[j]) &lt; 0 ; j--) { list[j + 1] = list[j]; } list[j + 1] = temp; }} &#x8FD8;&#x6709;&#x5982;&#x679C;&#x628A;&#x4EA4;&#x6362;&#x6539;&#x6210;&#x5411;&#x53F3;&#x79FB;&#x52A8;&#xFF0C;&#x6570;&#x7EC4;&#x7684;&#x8BBF;&#x95EE;&#x6B21;&#x6570;&#x5C31;&#x80FD;&#x51CF;&#x534A;&#x3002; &#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#x7B2C;&#x4E00;&#x4E2A;&#x4E0D;&#x5E73;&#x51E1;&#x7684;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x3002; &#x7B80;&#x5355;&#x7279;&#x6027;&#xFF1A; &#x6539;&#x826F;&#x7248;&#x7684;&#x63D2;&#x5165;&#x6392;&#x5E8F; &#x5206;&#x6210;&#x591A;&#x7EC4;&#xFF0C;&#x7EC4;&#x5E8F;&#x5217;&#x4E4B;&#x95F4;&#x8FDB;&#x884C;&#x6392;&#x5E8F; &#x9996;&#x4E2A;&#x590D;&#x6742;&#x5EA6;&#x8FDB;&#x5165; $ O(Nlog(N)) $ &#x7684;&#x7B97;&#x6CD5; 12345678910111213141516171819public static void ShellSort(Comparable[] list) { int h = 1; while(h &lt; list.lenght / 3) h = h * 3 + 1; while(h &gt;= 1) { for(int i = 0;i &lt; list.length; i++) { for(int j = i; j &gt;= h; j -= h) { if(list[j].compareTo(list[j - h])) { swap(list[j],list[j - h]); } else { break; } } } h /= 3; }} &#x4E4B;&#x524D;&#x4E00;&#x90E8;&#x5206;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x901F;&#x5EA6;&#x7F13;&#x6162;&#x7684;&#x539F;&#x56E0;&#x662F;&#x4E00;&#x6B21;&#x7684;&#x79FB;&#x52A8;&#x53EA;&#x80FD;&#x662F;&#x76F8;&#x90BB;&#x7684;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x4E4B;&#x95F4;&#x8FDB;&#x884C;&#x7684;&#x3002;&#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#x4F7F;&#x7528;&#x591A;&#x4E2A;&#x4E2A;&#x5E8F;&#x5217;&#x4E4B;&#x95F4;&#x8FDB;&#x6BD4;&#x8F83;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x80FD;&#x5C06;&#x4E00;&#x4E2A;&#x6570;&#x79FB;&#x5230;&#x5F88;&#x8FDC;&#x7684;&#x5730;&#x65B9;&#x3002; Tips: &#x5BF9; g &#x6392;&#x5E8F;&#x540E;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x5BF9; h &#x6392;&#x5E8F;&#x4F9D;&#x7136;&#x4FDD;&#x8BC1;&#x987A;&#x5E8F;&#x3002;&#x8FD9;&#x662F; Shell Sort &#x80FD;&#x4F7F;&#x7528;&#x591A;&#x6BB5;&#x6392;&#x5E8F;&#x7684;&#x7406;&#x8BBA;&#x57FA;&#x7840;&#x3002; ShellSort &#x7684;&#x8FC7;&#x7A0B;&#x53EF;&#x4EE5;&#x7C7B;&#x6BD4; InsertSort &#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x6700;&#x540E;&#x4E00;&#x6BB5; h = 1 &#x7684;&#x6392;&#x5E8F;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF0C;&#x4F46;&#x662F;&#x524D;&#x9762;&#x51E0;&#x6BB5;&#x7684;&#x6392;&#x5E8F;&#x5DF2;&#x5C06;&#x51CF;&#x5C11;&#x4E86;&#x5F88;&#x591A;&#x7684;&#x9006;&#x5E8F;&#x6570;&#x5BF9;&#x3002; &#x5728;&#x6570;&#x7EC4;&#x89C4;&#x6A21;&#x4E00;&#x5B9A;&#x7684;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x4F18;&#x5148;&#x9009;&#x62E9;&#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#xFF0C;&#x4EE3;&#x7801;&#x91CF;&#x5C11;&#xFF0C;&#x800C;&#x4E14;&#x8FD8;&#x6709;&#x4E0D;&#x9519;&#x7684;&#x6548;&#x7387;&#x3002; Kruth Shuffle&#x91CC;&#x9762;&#x63D0;&#x5230;&#x7684;&#x4E00;&#x4E2A;&#x6D17;&#x724C;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x65F6;&#x95F4;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x662F; $ O(n) $ , &#x4E0D;&#x9700;&#x8981;&#x5BF9;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x5168;&#x6392;&#x5E8F;&#x5C31;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x6D17;&#x724C;&#x3002; &#x7B97;&#x6CD5;&#x53EF;&#x4EE5;&#x88AB;&#x63CF;&#x8FF0;&#x4E3A;&#xFF1A; Let X1, X2&#x2026;. XN be the set of N numbers to be shuffled. Set j to N Generate a random number R. (uniformly distributed between 0 and 1) Set k to (jR+1). k is now a random integer, between 1 and j. Exchange Xk and Xj Decrease j by 1. If j &gt; 1, return to step 2. 1234567void KnuthShuffle(int *array, int len) { int rand; for (int i = len; i &gt;=0; i--) { rand = GenRand(0, i); swap(array[i], array[rand]); } } &#x7528;&#x4E00;&#x4E2A;&#x6E38;&#x6807;&#x4ECE;&#x5934;&#x5230;&#x5C3E;&#x904D;&#x5386;&#x4E00;&#x904D;&#xFF0C;&#x7136;&#x540E;&#x9488;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x968F;&#x673A;&#x51FA;&#x8FD9;&#x4E2A;&#x533A;&#x95F4;&#x7684;&#x4E00;&#x4E2A;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x5F53;&#x524D;&#x5143;&#x7D20;&#x548C;&#x968F;&#x673A;&#x51FA;&#x6765;&#x7684;&#x5143;&#x7D20;&#x8FDB;&#x884C;&#x66FF;&#x6362;&#xFF0C;&#x8FD9;&#x6837;&#x80FD;&#x8FBE;&#x5230;&#x5728; $ O(N) $ &#x4E4B;&#x5185;&#x5B8C;&#x6210;&#x6D17;&#x724C;&#x7684;&#x4EFB;&#x52A1;&#x3002;","categories":[],"tags":[{"name":"re-learn","slug":"re-learn","permalink":"https://lfkdsk.github.io/tags/re-learn/"}]},{"title":"Algorithms:Stack and Queue","slug":"re-learn-al-2","date":"2017-03-29T03:02:43.000Z","updated":"2017-04-01T02:24:01.000Z","comments":true,"path":"2017/03/29/re-learn-al-2/","link":"","permalink":"https://lfkdsk.github.io/2017/03/29/re-learn-al-2/","excerpt":"","text":"&#x8FD9;&#x4E00;&#x8282;&#x771F;&#x7684;&#x6CA1;&#x4EC0;&#x4E48;&#x8BF4;&#x7684;&#xFF0C;&#x666E;&#x901A;&#x7684;&#x5BF9;&#x6808;&#x548C;&#x961F;&#x5217;&#x7684;&#x4ECB;&#x7ECD;&#xFF0C;&#x63D0;&#x5230;&#x4E86;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x548C;&#x94FE;&#x8868;&#x5B9E;&#x73B0;&#x7B49;&#x7B49;&#x3002;&#x8FD8;&#x6709;&#x5C31;&#x662F;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x7684; resize() &#x65B9;&#x6CD5;&#xFF0C;&#x5728;&#x9002;&#x5F53;&#x7684;&#x65F6;&#x5019;&#x5BF9;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x6269;&#x5145;&#x3002;&#x5176;&#x4F59;&#x8FD8;&#x63D0;&#x5230;&#x4E86; Iterator &#x8FED;&#x4EE3;&#x5668;&#x7684;&#x4E00;&#x4E9B;&#x5E94;&#x7528;&#xFF0C;&#x603B;&#x7684;&#x6765;&#x8BF4;&#x8FD9;&#x4E00;&#x8282;&#x5F88;&#x7B80;&#x5355;&#x3002; &#x8FD9;&#x91CC;&#x53EF;&#x4EE5;&#x63D0;&#x4E00;&#x4E9B;&#x548C;&#x8FD9;&#x8282;&#x5185;&#x7684;&#x6E38;&#x6807;&#x5B9E;&#x73B0; &#x94FE;&#x8868;&#x7684;&#x6E38;&#x6807;&#x8868;&#x793A; slot element next 0 - 6 1 2 3 4 5 6 7 8 9 10 &#x57FA;&#x6570;&#x6392;&#x5E8F;","categories":[],"tags":[{"name":"re-learn","slug":"re-learn","permalink":"https://lfkdsk.github.io/tags/re-learn/"}]},{"title":"重新学习高等代数","slug":"re-learn-math-0","date":"2017-03-20T12:31:56.000Z","updated":"2017-03-29T15:36:18.000Z","comments":true,"path":"2017/03/20/re-learn-math-0/","link":"","permalink":"https://lfkdsk.github.io/2017/03/20/re-learn-math-0/","excerpt":"","text":"&#x9AD8;&#x7B49;&#x4EE3;&#x6570;&#x89E3;&#x51B3;&#x4EC0;&#x4E48;&#x95EE;&#x9898;1.&#x4E00;&#x5143;&#x4E00;&#x6B21;&#x65B9;&#x7A0B;&#x7EC4; =&gt; n &#x5143;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#x7EC4; 2.&#x53D8;&#x91CF;&#x524D;&#x9762;&#x7684;&#x53C2;&#x6570;&#x5F62;&#x6210;&#x77E9;&#x9635;&#xFF1A; \\begin{pmatrix} a11 & a12 & a13 & .... & a1n \\\\\\\\ a21 & a22 & a23 & .... & a2n\\\\\\\\ ...\\\\\\\\ an1 & an2 & an3 & .... & ann \\\\\\\\ \\end{pmatrix}&#x5305;&#x542B;&#x65B9;&#x7A0B;&#x7EC4;&#x53F3;&#x4FA7;&#x7684;&#x5E38;&#x6570;&#x9879;&#x7684;&#x77E9;&#x9635;&#x53EB;&#x589E;&#x5E7F;&#x77E9;&#x9635;: \\begin{pmatrix} a11 & a12 & a13 & .... & a1n & b1 \\\\\\\\ a21 & a22 & a23 & .... & a2n & b2\\\\\\\\ ...\\\\\\\\ an1 & an2 & an3 & .... & ann & bn\\\\\\\\ \\end{pmatrix} &#x65B9;&#x7A0B;&#x7EC4;&#x89E3;&#x7684;&#x60C5;&#x51B5;&#x7684;&#x5224;&#x522B;&#xFF1A; n &#x7EF4;&#x5411;&#x91CF;&#x7A7A;&#x95F4; =&gt; &#x89E3;&#x7684;&#x60C5;&#x51B5;&#x5224;&#x522B; &#x4E00;&#x822C;&#x7EBF;&#x6027;&#x7A7A;&#x95F4;&#x95EE;&#x9898; &#xFF08;&#x4F7F;&#x7528;&#x62BD;&#x8C61;&#x89E3;&#x51B3;&#x4E00;&#x822C;&#x95EE;&#x9898;&#xFF09;","categories":[],"tags":[{"name":"线代","slug":"线代","permalink":"https://lfkdsk.github.io/tags/线代/"}]},{"title":"0x03：SICP 的魔法 - 符号演算和数据表示方法","slug":"learn-sicp-3","date":"2017-03-20T08:24:51.000Z","updated":"2017-03-20T16:00:03.000Z","comments":true,"path":"2017/03/20/learn-sicp-3/","link":"","permalink":"https://lfkdsk.github.io/2017/03/20/learn-sicp-3/","excerpt":"","text":"&#x7B26;&#x53F7;&#x6570;&#x636E;&#x6709;&#x8FC7;CPP&#xFF0C;Java&#x7B49; OO &#x8BED;&#x8A00;&#x7F16;&#x7A0B;&#x7ECF;&#x9A8C;&#x7684;&#x4EBA;&#xFF0C;&#x80AF;&#x5B9A;&#x5BF9;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x548C;&#x5404;&#x79CD;&#x5C01;&#x7BB1;&#x7684;&#x5F15;&#x7528;&#x7C7B;&#x578B;&#x7684;&#x533A;&#x522B;&#x6709;&#x5F88;&#x5927;&#x7684;&#x611F;&#x89E6;&#x3002;&#x7B26;&#x53F7;&#x6570;&#x636E;&#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x7684;&#x5F00;&#x59CB;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5148;&#x7C97;&#x6D45;&#x5F97;&#x628A;&#x4ED6;&#x7406;&#x89E3;&#x6210;&#x5BF9;&#x8C61;&#x7684;&#x5F15;&#x7528;&#xFF0C;&#x5F53;&#x7136; Scheme &#x4E2D;&#x7684;&#x7B26;&#x53F7;&#x6570;&#x636E;&#x548C;&#x8FD9;&#x4E2A;&#x8FD8;&#x662F;&#x6709;&#x5F88;&#x5927;&#x7684;&#x533A;&#x522B;&#x7684;&#xFF0C;&#x7406;&#x89E3;&#x8FD9;&#x4E2A;&#x7B26;&#x53F7;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5148;&#x4E3E;&#x4E00;&#x4E2A;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; &#x4E24;&#x53E5;&#x8BDD;&#x5C31;&#x80FD;&#x770B;&#x660E;&#x767D; Symbol &#x548C; Value &#x7684;&#x533A;&#x522B;&#xFF0C;&#x7B2C;&#x4E00;&#x53E5;&#x8BDD;&#x8BA9;&#x6211;&#x4EEC;&#x8BF4;&#x6211;&#x4EEC;&#x6700;&#x559C;&#x6B22;&#x7684;&#x989C;&#x8272;&#xFF0C;&#x7B2C;&#x4E8C;&#x53E5;&#x662F;&#x8BF4;&#x201C;&#x4F60;&#x6700;&#x559C;&#x6B22;&#x7684;&#x989C;&#x8272;&#x201D;&#x3002;&#x81EA;&#x7136;&#x8BED;&#x8A00;&#x4E2D;&#x80FD;&#x533A;&#x5206;&#x8BCD;&#x8BED;&#x672C;&#x8EAB;&#x548C;&#x8BCD;&#x8BED;&#x7684;&#x542B;&#x4E49;&#x7684;&#x4E0D;&#x540C;&#xFF0C;Scheme &#x4E2D;&#x4E5F;&#x6709;&#x7C7B;&#x4F3C;&#x7684;&#x673A;&#x5236;&#x3002; &#x8868;&#x793A;&#x7B26;&#x53F7;&#x6570;&#x636E;&#x5728; Scheme &#x7684;&#x89E3;&#x91CA;&#x5668;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x4E4B;&#x524D;&#x5DF2;&#x7ECF;&#x4E86;&#x89E3;&#x5230;&#x4E86;&#xFF0C;&#x89E3;&#x91CA;&#x5668;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x65AD;&#x63A5;&#x6536;&#x6570;&#x636E;&#x7684; eval() &#x5FAA;&#x73AF;&#xFF1A; &#x6BCF;&#x5F53;&#x6211;&#x4EEC;&#x8F93;&#x5165;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x5C31;&#x4F1A;&#x63A5;&#x5230;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x3002;&#x540C;&#x65F6;&#x6211;&#x4EEC;&#x8FD8;&#x77E5;&#x9053;&#x4E86;&#xFF0C;&#x5757;&#x7EA7;&#x4F5C;&#x7528;&#x57DF;&#x7684;&#x7684;&#x5B9E;&#x73B0;&#x672C;&#x8EAB;&#x662F;&#x901A;&#x8FC7;&#x5C42;&#x5C42;&#x7684; Map &#x6765;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;&#x90A3;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x8FC7;&#x7A0B;&#x4ECE;&#x5BF9;&#x5E94;&#x7684;&#x4F5C;&#x7528;&#x57DF;&#x8868;&#x91CC;&#x9762;&#x53D6;&#x51FA;&#x5BF9;&#x5E94;&#x540D;&#x5B57;&#x7684;&#x5F15;&#x7528;&#x5C31;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x7B26;&#x53F7;&#x6570;&#x636E;&#x4E86;&#x3002;&#x5728; Sheme &#x4E2D;&#x6211;&#x4EEC;&#x901A;&#x5E38;&#x4F1A;&#x4F7F;&#x7528; &apos; &#x7B26;&#x53F7;&#x4EE3;&#x8868;&#x8FD9;&#x4E2A;&#x503C;&#x662F;&#x4E00;&#x4E2A;&#x7B26;&#x53F7;&#x7C7B;&#x578B;&#x800C;&#x975E;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#xFF1A; 12345&gt; (define A 10)&gt; A&gt; ; Value: 10 &#x4F7F;&#x7528;&#x7684;&#x662F;&#x57FA;&#x7840;&#x7C7B;&#x578B;&gt; &apos;A&gt; ; Value: a &#x4F7F;&#x7528;&#x7684;&#x7B26;&#x53F7;&#x7C7B;&#x578B; &#x4F46;&#x662F;&#x76F4;&#x89C2;&#x4E0A;&#x6765;&#x770B;&#x8FD9;&#x4E2A;&#x5F15;&#x53F7;&#x4F3C;&#x4E4E;&#x7834;&#x574F;&#x4E86; Scheme &#x4E2D;&#x7684;&#x8BED;&#x6CD5;&#xFF0C;&#x5982;&#x679C;&#x4E3A;&#x4E86; &apos; &#x5728;&#x89E3;&#x91CA;&#x5668;&#x91CC;&#x5355;&#x72EC;&#x5B9E;&#x73B0;&#x4E00;&#x5957;&#x673A;&#x5236;&#x96BE;&#x514D;&#x5F97;&#x4E0D;&#x507F;&#x5931;&#xFF0C;&#x800C;&#x4E14;&#x662F;&#x4E00;&#x79CD;&#x7ED9;&#x89E3;&#x91CA;&#x5668;&#x5F00;&#x6D1E;&#x7684;&#x884C;&#x4E3A;&#x3002;&#x4F46;&#x5B9E;&#x9645;&#x4E0A;&#x5728; Scheme &#x4E2D;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x88AB;&#x5F88;&#x8F7B;&#x677E;&#x7684;&#x89E3;&#x51B3;&#x4E86;&#xFF0C;&apos; &#x672C;&#x8EAB;&#x5B9E;&#x9645;&#x4E0A;&#x662F; (quote x) &#x7684;&#x4E00;&#x79CD;&#x8BED;&#x6CD5;&#x7CD6;&#x3002; Tips : eq? &#x548C; equal? &#x548C; symbol? eq? &#x5224;&#x65AD;&#x662F;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x5F15;&#x7528; equal? &#x5224;&#x65AD;&#x5B57;&#x9762;&#x662F;&#x5426;&#x76F8;&#x7B49; symbol? &#x5224;&#x65AD;&#x5143;&#x7D20;&#x662F;&#x4E0D;&#x662F;&#x7B26;&#x53F7;","categories":[],"tags":[{"name":"SICP","slug":"SICP","permalink":"https://lfkdsk.github.io/tags/SICP/"}]},{"title":"Algorithms:Algorithms Analazy","slug":"re-learn-al-1","date":"2017-03-18T08:25:46.000Z","updated":"2017-03-29T02:39:18.000Z","comments":true,"path":"2017/03/18/re-learn-al-1/","link":"","permalink":"https://lfkdsk.github.io/2017/03/18/re-learn-al-1/","excerpt":"","text":"&#x6570;&#x5B66;&#x57FA;&#x7840;&#x57FA;&#x672C;&#x5B9A;&#x7406;&#x5148;&#x6765;&#x770B;&#x56DB;&#x6761;&#x57FA;&#x7840;&#x7684;&#x5B9A;&#x7406;&#xFF1A; &#x5982;&#x679C;&#x5B58;&#x5728;&#x6B63;&#x5E38;&#x6570; c &#x548C; $ n_0 $ &#x4F7F;&#x5F97;&#x5F53; $ N \\geq n_0 $ &#x65F6; $ T(N) \\leq cf(N) $ &#x5219;&#x8BB0;&#x4E3A; $ T(N) = O(f(N)) $ &#x5982;&#x679C;&#x5B58;&#x5728;&#x6B63;&#x5E38;&#x6570; c &#x548C; $ n_0 $ &#x4F7F;&#x5F97;&#x5F53; $ N \\geq n_0 $ &#x65F6; $ T(N) \\geq cg(N) $ &#x5219;&#x8BB0;&#x4E3A; $ T(N) = \\Omega (g(N)) $ &#x5982;&#x679C; $ T(N) = O(h(N)) $ $ T(N) = \\Omega (h(N)) $ &#x540C;&#x65F6;&#x6210;&#x7ACB;&#x5219; $ T(N) = \\Theta (h(n))$ &#x5982;&#x679C; $ T(N) = O(p(N)) $ &#x4F46; $ T(N) \\neq \\Theta(p(N)) $ &#x5219; $ T(N) = o(p(N) $ &#x4EE5;&#x4E0A;&#x7684;&#x56DB;&#x6761;&#x5B9A;&#x7406;&#x4E3A;&#x6211;&#x4EEC;&#x5EFA;&#x7ACB;&#x4E86;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x4E9B;&#x76F8;&#x5BF9;&#x7684;&#x6570;&#x5B66;&#x5173;&#x7CFB;&#xFF0C;&#x53BB;&#x63CF;&#x8FF0;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x7684;&#x6570;&#x91CF;&#x7EA7;&#x3002; $ O $ &#x7684;&#x63CF;&#x8FF0;&#x51FD;&#x6570;&#x8868;&#x793A;&#x5728; N &#x4E4B;&#x540E;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x539F;&#x7B97;&#x6CD5;&#x51FD;&#x6570;&#xFF0C;$ \\Theta $ &#x7684;&#x63CF;&#x8FF0;&#x51FD;&#x6570;&#x8868;&#x793A;&#x548C;&#x539F;&#x51FD;&#x6570;&#x76F8;&#x540C;&#xFF0C;$ \\Omega $ &#x7684;&#x63CF;&#x8FF0;&#x7684;&#x51FD;&#x6570;&#x8868;&#x793A;&#x5C0F;&#x4E8E;&#x539F;&#x51FD;&#x6570;&#xFF0C;&#x53E6;&#x5916;&#x8FD8;&#x6709;&#x4E00;&#x4E2A; $ o $ &#x7684;&#x63CF;&#x8FF0;&#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x548C; $ O $ &#x7684;&#x533A;&#x522B;&#x5728;&#x4E8E;&#x4E0D;&#x5305;&#x542B;&#x7B49;&#x4E8E;&#x7684;&#x60C5;&#x51B5;&#x3002; &#x6211;&#x4EEC;&#x65E0;&#x6CD5;&#x76F4;&#x63A5;&#x50CF; $ f(x) &gt; g(x) $ &#x8FD9;&#x6837;&#x5B50;&#x53BB;&#x6BD4;&#x8F83;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6BD4;&#x8F83; &#x51FD;&#x6570;&#x7684;&#x76F8;&#x5BF9;&#x589E;&#x957F;&#x901F;&#x7387; &#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;&#x5206;&#x6790;&#x7684;&#x6570;&#x5B66;&#x57FA;&#x7840;&#x3002;$ O $ &#x88AB;&#x79F0;&#x4E3A;&#x51FD;&#x6570;&#x4E0A;&#x754C;&#xFF0C;$ \\Omega $ &#x88AB;&#x79F0;&#x4F5C;&#x51FD;&#x6570;&#x7684;&#x4E0B;&#x754C;&#x3002; &#x6211;&#x4EEC;&#x5BFB;&#x627E;&#x76F8;&#x5BF9;&#x589E;&#x957F;&#x901F;&#x7387;&#x7684;&#x65B9;&#x5F0F;&#x662F;&#x4F7F;&#x7528; log-log-graph &#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x6211;&#x4EEC;&#x628A;&#x672C;&#x6765;&#x662F; N-T(N) &#x7684;&#x51FD;&#x6570;&#x56FE;&#x50CF;&#xFF0C;&#x6539;&#x6210;&#x4E86; log(N)-log(T(N)) &#x7684;&#x56FE;&#x50CF;&#xFF0C;&#x8FD9;&#x6837;&#x66F2;&#x7EBF;&#x5C31;&#x53D8;&#x6210;&#x4E86;&#x76F4;&#x7EBF;&#xFF1A; &#x8FD9;&#x6837;&#x8FD9;&#x6761;&#x76F4;&#x7EBF;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x5982;&#x4E0B;: lg(T(N)) = blg(N) + a \\\\\\\\ T (N) = a N^b, where \\text{ } a = 2 c&#x66F2;&#x7EBF;&#x53D8;&#x6210;&#x4E86;&#x76F4;&#x7EBF;&#xFF0C;&#x5C31;&#x80FD;&#x7528;&#x76F4;&#x7EBF;&#x65B9;&#x7A0B;&#x6765;&#x6A21;&#x62DF;&#x4E86;&#xFF0C;&#x7ECF;&#x8FC7;&#x5316;&#x7B80;&#xFF0C;$ T(N) $ &#x90FD;&#x80FD;&#x88AB;&#x63CF;&#x8FF0;&#x4E3A;&#x4E00;&#x4E2A;&#x4E0E; N &#x6709;&#x5173;&#x7CFB;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x80FD;&#x7528; N &#x53BB;&#x8868;&#x8FF0; $ T(N) $ &#x7684;&#x590D;&#x6742;&#x5EA6;&#x4E86;&#x3002; &#x5408;&#x6210;&#x6CD5;&#x5219;&#x5F53; $ T_1(N) = O(f(N)) $ &#x4E14; $ T_2 = O(g(N)) $ &#x65F6;&#xFF1A; $ T_1(N) + T_2(N) = max(T_1 , T_2)) $ $ T_1(N) \\text{x} T_2(N) = O(T_1) \\text{x} O(T_2) $ $ T(N) $ &#x662F; k &#x6B21;&#x591A;&#x9879;&#x5F0F;&#xFF0C;$ T(N) = \\Theta(N^k) $ $ log^kN = O(N)$ &#x5BF9;&#x6570;&#x7684;&#x589E;&#x957F;&#x975E;&#x5E38;&#x7F13;&#x6162; &#x6C42;&#x76F8;&#x5BF9;&#x589E;&#x957F;&#x7387;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6C42;&#x6781;&#x9650;&#xFF1A; \\lim_{x \\to +\\infty} f(x) / g(x)&#x7684;&#x65B9;&#x5F0F;&#x53BB;&#x83B7;&#x53D6;&#x4E24;&#x51FD;&#x6570;&#x7684;&#x76F8;&#x5BF9;&#x589E;&#x957F;&#x7387;&#x3002; &#x6781;&#x9650;&#x4E3A;&#x96F6; &#xFF1A; $ f(N) = o(g(N)) $ &#x6781;&#x9650;&#x662F;&#x5E38;&#x6570;&#xFF1A;$ f(N) = \\Theta(g(N)) $ &#x6781;&#x9650;&#x662F;&#x65E0;&#x7A77;&#xFF1A;$ g(N) = o(f(N)) $ &#x6781;&#x9650;&#x6446;&#x52A8;&#xFF1A;&#x4E24;&#x8005;&#x65E0;&#x5173;&#x3002; Tips: &#x8BA1;&#x7B97;&#x6A21;&#x578B; &#x6211;&#x4EEC;&#x7684;&#x7A0B;&#x5E8F;&#x4E3A;&#x4EC0;&#x4E48;&#x80FD;&#x88AB;&#x7528;&#x8FD9;&#x6837;&#x7684;&#x65B9;&#x5F0F;&#x53BB;&#x8BA1;&#x7B97;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x9009;&#x53D6;&#x7684;&#x6A21;&#x578B;&#x662F;&#x4E00;&#x4E2A;&#x80FD;&#x62E5;&#x6709;&#x6307;&#x4EE4;&#x7CFB;&#x7EDF;&#x548C;&#x65E0;&#x9650;&#x5185;&#x5B58;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#xFF0C;&#x8FD9;&#x6837;&#x5B50;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x539F;&#x5B50;&#x64CD;&#x4F5C;&#x90FD;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x8FD0;&#x884C;&#x4E00;&#x6761;&#x6307;&#x4EE4;&#x7684;&#x65F6;&#x95F4;&#xFF0C;&#x8FD9;&#x6837;&#x5B50;&#x6211;&#x4EEC;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5C31;&#x80FD;&#x88AB;&#x63CF;&#x8FF0;&#x6210;&#x8FD0;&#x884C;&#x67D0;&#x4E2A;&#x6570;&#x91CF;&#x7EA7;&#x6307;&#x4EE4;&#x7684;&#x8FC7;&#x7A0B;&#x3002; &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5178;&#x578B;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5E38;&#x6570;&#x65F6;&#x95F4; $ O(1) $&#x82E5;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;&#xFF0C;$ T(N) $&#x7684;&#x4E0A;&#x754C;&#x4E0E;&#x8F93;&#x5165;&#x5927;&#x5C0F;&#x65E0;&#x5173;&#xFF0C;&#x5219;&#x79F0;&#x5176;&#x5177;&#x6709;&#x5E38;&#x6570;&#x65F6;&#x95F4;&#xFF0C;&#x8BB0;&#x4F5C;$ O(1) $&#x65F6;&#x95F4;&#x3002;&#x4E3E;&#x4F8B;&#x5B50;&#x4ECE;&#x67D0;&#x4E2A;&#x6570;&#x7EC4;&#x62FF;&#x51FA;&#x67D0;&#x4E2A;&#x7ED9;&#x5B9A;&#x7684;&#x5143;&#x7D20;&#x53EA;&#x9700;&#x8981;&#x4E00;&#x6761;&#x5BFB;&#x5740;&#x6307;&#x4EE4;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x8BA4;&#x4E3A;&#x5B83;&#x662F; $ O(N) $ &#x3002; &#x5BF9;&#x6570;&#x65F6;&#x95F4; $ O(lgN) $&#x4E00;&#x822C;&#x548C;&#x6811;&#x6709;&#x5173;&#x7684;&#x64CD;&#x4F5C;&#x8FD8;&#x6709;&#x5355;&#x72EC;&#x4F7F;&#x7528;&#x4E86;&#x4E8C;&#x5206;&#x6CD5;&#x7684;&#x7B97;&#x6CD5;&#x90FD;&#x4F1A;&#x6709;&#x8FD9;&#x6837;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x3002;&#x5728;&#x4E0A;&#x4E00;&#x8282;&#x6211;&#x4EEC;&#x7528;&#x6811;&#x7684;&#x4F8B;&#x5B50;&#x8BBA;&#x8BC1;&#x8FC7; $ lgN $ &#x8FD9;&#x4E2A;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F;&#x600E;&#x4E48;&#x6765;&#x7684;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x4E0D;&#x518D;&#x8D58;&#x8FF0;&#x4E86;&#x3002;&#x5BF9;&#x6570;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5341;&#x5206;&#x7684;&#x5C0F;&#xFF0C;&#x6BCF;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x8F93;&#x5165;&#xFF0C;&#x5176;&#x6240;&#x9700;&#x8981;&#x7684;&#x989D;&#x5916;&#x8BA1;&#x7B97;&#x65F6;&#x95F4;&#x4F1A;&#x53D8;&#x5C0F;&#x3002; &#x7EBF;&#x6027;&#x65F6;&#x95F4; $ O(N) $&#x4E00;&#x822C;&#x7684;&#x904D;&#x5386;&#x64CD;&#x4F5C;&#x5C31;&#x662F; $ O(N) $ &#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x8F93;&#x5165;&#x6570;&#x636E;&#x548C;&#x590D;&#x6742;&#x5EA6;&#x6210;&#x6B63;&#x6BD4;&#x3002; &#x7EBF;&#x6027;&#x5BF9;&#x6570;&#x65F6;&#x95F4; $ O(nlgN) $&#x4ECE;&#x8868;&#x8FBE;&#x5F0F;&#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x7EBF;&#x6027;&#x5BF9;&#x6570;&#x65F6;&#x95F4;&#x589E;&#x957F;&#x5F97;&#x6BD4;&#x7EBF;&#x6027;&#x65F6;&#x95F4;&#x8981;&#x5FEB;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x4EFB;&#x4F55;&#x542B;&#x6709;n&#xFF0C;&#x4E14;n&#x7684;&#x5E42;&#x6307;&#x6570;&#x5927;&#x4E8E;1&#x7684;&#x591A;&#x9879;&#x5F0F;&#x65F6;&#x95F4;&#x6765;&#x8BF4;&#xFF0C;&#x7EBF;&#x6027;&#x5BF9;&#x6570;&#x65F6;&#x95F4;&#x5374;&#x589E;&#x957F;&#x5F97;&#x6162;&#x3002;&#x4E00;&#x822C;&#x7528;&#x5230;&#x4E86;&#x5206;&#x6CBB;&#x6CD5;&#x7684;&#x7B97;&#x6CD5;&#x90FD;&#x6709;&#x7EBF;&#x6027;&#x5BF9;&#x6570;&#x65F6;&#x95F4; &#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x6BD4;&#x8F83;&#x5FEB;&#x7684;&#x51E0;&#x79CD;&#x6392;&#x5E8F;&#x90FD;&#x6709;&#x8FD9;&#x6837;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF08;&#x5FEB;&#x6392;&#x3001;&#x5806;&#x6392;&#x5E8F;&#x3001;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#xFF09;&#x7B49;&#x7B49;&#x3002; &#x5E42;&#x6B21;&#x65F6;&#x95F4; $ O(n^n) $&#x7ECF;&#x5E38;&#x7684;&#x6709; $ O(n^2) $ &#x3001;$ O(n^3) $ &#x8FD9;&#x6837;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#x591A;&#x5C42;&#x5FAA;&#x73AF;&#xFF08;&#x904D;&#x5386;&#xFF09;&#x7684;&#x53E0;&#x52A0;&#x3002; &#x6307;&#x6570;&#x65F6;&#x95F4; $ O(2^n) $&#x6BD4;&#x5982;&#x8BF4;&#x641C;&#x7D22;&#x5168;&#x90E8;&#x7684;&#x5B50;&#x96C6;&#x3002; &#x9012;&#x5F52;&#x7684;&#x5206;&#x6790; Tips : &#x9884;&#x4F30;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x7684;&#x65B9;&#x6CD5; &#x4EC5;&#x4F7F;&#x7528; Big O &#x6765;&#x8BA1;&#x7B97;&#xFF0C;&#x9884;&#x4F30;&#x7B97;&#x6CD5;&#x4E0A;&#x9650; &#x5FFD;&#x7565;&#x53C2;&#x6570;&#x548C;&#x4F4E;&#x6B21;&#x5E42;&#x9879;&#x76EE; &#x666E;&#x901A;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x8BA8;&#x8BBA;&#x8FC7;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x9762;&#x6BD4;&#x8F83;&#x590D;&#x6742;&#x7684;&#x662F;&#x5BF9;&#x9012;&#x5F52;&#x51FD;&#x6570;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x7684;&#x5206;&#x6790;&#x3002; &#x8FD9;&#x91CC;&#x6709;&#x4E24;&#x79CD;&#x4E3B;&#x8981;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x7684;&#x5206;&#x6790;&#x65B9;&#x6CD5;&#xFF1A; &#x4E3B;&#x5B9A;&#x7406;&#x6CD5; T(n) = a T(n / b) + h(n) \\\\\\\\ a \\geq 1 \\text{ && } b \\geq 1&#x4E3B;&#x5B9A;&#x7406;&#x6CD5;&#x4F7F;&#x7528;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x4E2A;&#x516C;&#x5F0F;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;&#xFF0C;&#x5176;&#x4E2D;&#x7684; $ T(n) $ &#x4EE3;&#x8868;&#x6574;&#x4E2A;&#x9012;&#x5F52;&#x4EFB;&#x52A1;&#xFF0C;$ a $ &#x4EE3;&#x8868;&#x4EFB;&#x52A1;&#x88AB;&#x5206;&#x6210;&#x51E0;&#x4E2A;&#x5206;&#x652F;&#xFF0C;$ b $ &#x8868;&#x793A;&#x6BCF;&#x4E2A;&#x5206;&#x652F;&#x7684;&#x4EFB;&#x52A1;&#x89C4;&#x6A21;&#x88AB;&#x7F29;&#x51CF;&#x5230;&#x539F;&#x4EFB;&#x52A1;&#x7684;&#x51E0;&#x5206;&#x4E4B;&#x51E0;&#xFF0C;$ h(n) $ &#x8868;&#x793A;&#x548C;&#x9012;&#x5F52;&#x65E0;&#x5173;&#x7684;&#x4EFB;&#x52A1;&#x3002; &#x5728;&#x6C42;&#x51FA; $ a $ &#x3001; $ b $ &#x4E4B;&#x540E;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6309;&#x60C5;&#x51B5;&#x8FDB;&#x884C;&#x5206;&#x522B;&#x7684;&#x8BA8;&#x8BBA;&#xFF0C;&#x5224;&#x65AD; $n^{log_b^a} $ &#x548C; $ h(n) $ &#x7684;&#x5173;&#x7CFB;&#xFF1A; $ = \\Theta( h(n) ) $ &#xFF1A;&#x590D;&#x6742;&#x5EA6;&#x4E3A; $ \\Theta (h(n) * lg(n)) $ $ &gt; \\Theta(h(n)) $ &#xFF1A;&#x590D;&#x6742;&#x5EA6;&#x4E3A; $ \\Theta(n^{log_b^a}) $ $ &lt; \\Theta(h(n)) $ &#xFF1A;&#x590D;&#x6742;&#x5EA6;&#x4E3A; $ \\Theta(h(n)) $ &#x9012;&#x5F52;&#x6811;&#x6CD5; &#x9012;&#x5F52;&#x6811;&#x6CD5;&#x5C31;&#x662F;&#x53EF;&#x4EE5;&#x628A;&#x6574;&#x4E2A;&#x8FC7;&#x7A0B;&#x5199;&#x6210;&#x4E00;&#x4E2A;&#x6811;&#x5F62;&#x56FE;&#x53BB;&#x5206;&#x6790;&#x5B83;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x3002;&#x4E3B;&#x8981;&#x5185;&#x6838;&#x662F;&#x5728;&#x6C42;&#x5168;&#x90E8;&#x8282;&#x70B9;&#x7684;&#x548C;&#x7684;&#x89C4;&#x6A21;&#x3002; &#x6BD4;&#x5982;&#x4E0A;&#x9762;&#x7684;&#x4F8B;&#x5B50; $ f(n) $ &#x6709; $ a $ &#x4E2A;&#x5206;&#x652F;&#x548C; $ /b $ &#x7684;&#x89C4;&#x6A21;&#x5212;&#x5206;&#xFF0C;&#x8FD9;&#x6837;&#x8FD9;&#x68F5;&#x6811;&#x7684;&#x9AD8;&#x5EA6;&#x5C31;&#x53EF;&#x4EE5;&#x8FD9;&#x4E48;&#x6C42;&#xFF1A; n / b^h = 1 \\\\\\\\ h = log_b^n&#x7136;&#x540E;&#x8FD9;&#x6837;&#x5B50;&#x5728;&#x89C4;&#x6A21;&#x5212;&#x5206;&#x5230;&#x6700;&#x5E95;&#x5C42;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5F53;&#x6570;&#x636E;&#x89C4;&#x6A21;&#x88AB;&#x5212;&#x5206;&#x5230; $ \\Theta(1) $ &#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6574;&#x5C42;&#x7684;&#x8282;&#x70B9;&#x5C31;&#x4F1A;&#x6709;&#xFF1A; \\text{node_number} = a^{h} = a^{log_b^n} = n^{log_b^a}&#x8FD9;&#x5C31;&#x662F;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#x7684;&#x89C4;&#x6A21;&#x503C;&#x3002; &#x7136;&#x540E;&#x8FD8;&#x6709;&#x6BCF;&#x5C42;&#x7684;&#x7684;&#x8282;&#x70B9;&#x7684;&#x548C;&#xFF1A; \\text{every_floor_nodes_numbers} = f(n) + af(n/b) + a^2f(n/b^2) + ...... + a^jf(n/b^j) = \\sum_{j=0}^{log_b^n-1} a^jf(n/b^j)&#x8FD9;&#x6837;&#x6574;&#x4E2A;&#x7684; $ T(n) $ : T(n) =n^{log_b^a}+\\sum_{j=0}^{log_b^n-1} a^jf(n/b^j)&#x6211;&#x4EEC;&#x4ED4;&#x7EC6;&#x7684;&#x5206;&#x6790;&#x4F1A;&#x53D1;&#x73B0;&#xFF0C;&#x6211;&#x4EEC;&#x521A;&#x624D;&#x8BC1;&#x660E;&#x7684;&#x8FD9;&#x4E2A;&#x5C31;&#x662F;&#x4E3B;&#x5B9A;&#x7406;&#x6CD5;&#x7684;&#x516C;&#x5F0F;&#xFF0C;&#x8FD9;&#x4E5F;&#x80FD;&#x8BF4;&#x660E;&#xFF0C;&#x4E3B;&#x5B9A;&#x7406;&#x6CD5;&#x5176;&#x5B9E;&#x662F;&#x9012;&#x5F52;&#x6811;&#x6CD5;&#x5728;&#x7279;&#x6B8A;&#x60C5;&#x51B5;&#x4E0B;&#x7684;&#x62BD;&#x8C61;&#x3002;&#x9012;&#x5F52;&#x6811;&#x6CD5;&#x7684;&#x7279;&#x70B9;&#x5C31;&#x662F;&#x753B;&#x51FA;&#x9012;&#x5F52;&#x6811;&#xFF0C;&#x7136;&#x540E;&#x6C42;&#x51FA;&#x6574;&#x68F5;&#x6811;&#x7684;&#x8282;&#x70B9;&#x4E4B;&#x548C;&#x7136;&#x540E;&#x5224;&#x65AD;&#x95EE;&#x9898;&#x89C4;&#x6A21;&#x3002;","categories":[],"tags":[{"name":"re-learn","slug":"re-learn","permalink":"https://lfkdsk.github.io/tags/re-learn/"}]},{"title":"第二周:有点不知所谓","slug":"week-1","date":"2017-03-18T07:35:56.000Z","updated":"2017-03-19T14:57:42.000Z","comments":true,"path":"2017/03/18/week-1/","link":"","permalink":"https://lfkdsk.github.io/2017/03/18/week-1/","excerpt":"","text":"&#x4ECA;&#x5929;&#x662F;&#x5468;&#x516D;&#x4E86;&#xFF0C;&#x65F6;&#x95F4;&#x8FC7;&#x7684;&#x5FEB;&#x7684;&#x60CA;&#x4EBA;&#xFF0C;&#x8FD9;&#x5468;&#x7ED9;&#x6211;&#x611F;&#x89C9;&#x5C31;&#x662F;&#x6CA1;&#x5E72;&#x4EC0;&#x4E48;&#x7684;&#x611F;&#x89C9;&#xFF0C;&#x7A81;&#x7136;&#x83AB;&#x540D;&#x5176;&#x5999;&#x7684;&#x5C31;&#x5230;&#x4E86;&#x5468;&#x516D;&#x3002; &#x7136;&#x540E;&#x5728;&#x5145;&#x5B9E;&#x7684;&#x4E00;&#x5929;&#x5B66;&#x4E60;&#x4E4B;&#x540E;&#xFF0C;&#x5C31;&#x5230;&#x4E86;&#x5468;&#x65E5;&#x3002; &#x8FD9;&#x5468;&#x5468;&#x4E00;&#x5230;&#x5468;&#x4E94;&#x6D3B;&#x7684;&#x6709;&#x70B9;&#x9893;&#xFF0C;&#x4E8B;&#x60C5;&#x5F88;&#x591A;&#xFF0C;&#x65F6;&#x95F4;&#x5F88;&#x5C11;&#xFF0C;&#x6BCF;&#x5929;&#x8981;&#x88AB;&#x5355;&#x8BCD;&#xFF0C;&#x7136;&#x540E;&#x8FD8;&#x6709;&#x5F88;&#x591A;&#x7684;&#x590D;&#x4E60;&#x4EFB;&#x52A1;&#xFF0C;&#x5355;&#x8BCD;&#x8D8A;&#x80CC;&#x8D8A;&#x591A;&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x8BB0;&#x5FC6;&#x66F2;&#x7EBF;&#x63A8;&#x8350;&#x7684;&#x590D;&#x4E60;&#x5355;&#x8BCD;&#x4E5F;&#x8D8A;&#x6765;&#x8D8A;&#x591A;&#xFF0C;&#x4E0D;&#x8FC7;&#x8FD9;&#x4E2A;&#x5468;&#x672B;&#x6211;&#x8C03;&#x6574;&#x7684;&#x4E0D;&#x9519;&#xFF0C;&#x8FD9;&#x4E9B;&#x5BF9;&#x4E8E;&#x6211;&#x6765;&#x8BF4;&#x5DF2;&#x7ECF;&#x4E0D;&#x662F;&#x95EE;&#x9898;&#x4E86;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#x6247;&#x8D1D;&#x5355;&#x8BCD;&#x90A3;&#x4E2A;&#x5E94;&#x7528;&#x771F;&#x7684;&#x6CA1;&#x4EC0;&#x4E48;&#x7528;&#xFF0C;&#x8BCD;&#x4E66;&#x6CA1;&#x6709;&#x5355;&#x8BCD;&#x8F6F;&#x4EF6;&#x7684;&#x591A;&#xFF0C;&#x7136;&#x540E;&#x8FD8;&#x51C0;&#x662F;&#x9519;&#x7684;&#xFF0C;&#x5F88;&#x591A;&#x4E1C;&#x897F;&#x90FD;&#x6CA1;&#x6709;&#x5408;&#x7406;&#x7684;&#x8BCD;&#x6839;&#x8BB0;&#x5FC6;&#x65B9;&#x5F0F;&#x3002;&#x6211;&#x73B0;&#x5728;&#x81EA;&#x5DF1;&#x627E;&#x7684;&#x80CC;&#x8BF5;&#x65B9;&#x5F0F;&#x8FD8;&#x662F;&#x633A;&#x9002;&#x5408;&#x6211;&#x7684;&#xFF0C;&#x6211;&#x8981;&#x662F; TOFEL &#x8003;&#x5F97;&#x597D;&#xFF0C;&#x6211;&#x4E5F;&#x6765;&#x5206;&#x4EAB;&#x4E00;&#x4E0B;&#x54C8;&#x3002; &#x8FD9;&#x4E2A;&#x5468;&#x672B;&#x548C;&#x5189;&#x5B66;&#x957F;&#x53BB;&#x5403;&#x4E86;&#x706B;&#x9505;&#xFF0C;&#x6211;&#x6BCF;&#x6B21;&#x5403;&#x706B;&#x9505;&#x90FD;&#x4F1A;&#x5403;&#x6491;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x662F;&#x5F88;&#x559C;&#x6B22;&#x5403;&#x706B;&#x9505;&#x7684;&#x611F;&#x89C9;&#x3002; &#x5468;&#x4E94;&#x548C;&#x6731;&#x8001;&#x5E08;&#x8BF4;&#x4E86;&#x8981;&#x53BB;&#x5C0F;&#x5C4B;&#xFF08;&#x4ED6;&#x7684;&#x95F2;&#x7F6E;&#x529E;&#x516C;&#x5BA4;&#x53BB;&#x5B66;&#x4E60;&#xFF09;&#xFF0C;&#x6211;&#x7740;&#x5B9E;&#x8C03;&#x6574;&#x7684;&#x4E0D;&#x9519;&#xFF0C;&#x6548;&#x7387;&#x4E5F;&#x5F97;&#x5230;&#x4E86;&#x5F88;&#x5927;&#x7684;&#x63D0;&#x9AD8;&#xFF0C;&#x5E94;&#x8BE5;&#x80CC;&#x7684;&#x5355;&#x8BCD;&#x90FD;&#x80CC;&#x5B8C;&#x4E86;&#xFF0C;&#x8FD8;&#x80FD;&#x770B;&#x4E66;&#x5199;&#x6587;&#x7AE0;&#xFF0C;&#x7B49;&#x5355;&#x8BCD;&#x518D;&#x80CC;&#x51E0;&#x5929;&#x6211;&#x5C31;&#x53BB;&#x5F00;&#x59CB;&#x5237; OG &#x597D;&#x4E86;&#xFF0C;&#x4EE5;&#x540E;&#x7684;&#x751F;&#x6D3B;&#x53EA;&#x4F1A;&#x8D8A;&#x6765;&#x8D8A;&#x5FD9;&#x788C;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x81EA;&#x5DF1;&#x80FD;&#x6709;&#x6210;&#x5C31;&#x611F;&#xFF0C;&#x6D3B;&#x7684;&#x8FD8;&#x662F;&#x633A;&#x5E78;&#x798F;&#x7684;&#xFF0C;&#x54C8;&#x54C8;&#x3002; &#x4E00;&#x4E2A;&#x4EBA;&#x5446;&#x7740;&#x6D3B;&#x7684;&#x8FD8;&#x80FD;&#x5F88;&#x5F00;&#x5FC3;&#xFF0C;&#x53EF;&#x80FD;&#x6211;&#x7684;&#x6027;&#x683C;&#x8FD8;&#x662F;&#x5F88;&#x5185;&#x5411;&#x7684;&#x5427;&#x3002;&#x4E0D;&#x8FC7;&#x8FD9;&#x6837;&#x6700;&#x4E13;&#x5FC3;&#x4E86;&#xFF0C;&#x5C31;&#x50CF;&#x5728;&#x56FE;&#x4E66;&#x9986;&#x4E00;&#x6837;&#xFF0C;&#x4E0D;&#x8FC7;&#x56FE;&#x4E66;&#x9986;&#x8981;&#x968F;&#x8EAB;&#x5E26;&#x597D;&#x591A;&#x4E1C;&#x897F;&#xFF0C;&#x5FC3;&#x91CC;&#x4E0D;&#x723D;&#xFF0C;&#x8FD8;&#x662F;&#x5B9E;&#x9A8C;&#x5BA4;&#x65B9;&#x4FBF;&#x554A;&#xFF0C;&#x5199;&#x4EE3;&#x7801;&#x8BFB;&#x4E66;&#x590D;&#x4E60;&#x90FD;&#x5F88;&#x597D;&#x3002;&#x770B;&#x5230;&#x4E86;&#x4E66;&#x67B6;&#x4E0A;&#x7684;&#x4E09;&#x8A00;&#x4E8C;&#x62CD;&#xFF0C;&#x5F88;&#x4E45;&#x4EE5;&#x524D;&#x4E9A;&#x9A6C;&#x900A;&#x7684;&#x6253;&#x6298;&#x7248;&#xFF0C;&#x7EB8;&#x8D28;&#x4E0D;&#x662F;&#x5F88;&#x597D;&#xFF0C;&#x6628;&#x5929;&#x56DE;&#x987E;&#x4E86;&#x7B2C;&#x4E00;&#x7AE0;&#xFF0C;&#x611F;&#x89C9;&#x6545;&#x4E8B;&#x7F3A;&#x4E86;&#x70B9;&#x4EC0;&#x4E48;&#xFF0C;&#x4ECA;&#x5929;&#x7528; Kindle &#x4E0B;&#x4E86;&#x4E00;&#x672C;&#x4FBF;&#x643A;&#x6765;&#x770B;&#xFF0C;&#x7EB8;&#x8D28;&#x7248;&#x679C;&#x7136;&#x662F;&#x5220;&#x6389;&#x4E86;&#x5F88;&#x6C61;&#x7684;&#x4E1C;&#x897F;2333333&#xFF0C;&#x4E09;&#x8A00;&#x4E8C;&#x62CD;&#x679C;&#x7136;&#x5F88;&#x6C61;&#x3002; &#x5728;&#x627E;&#x4E00;&#x4E2A;&#x540E;&#x7AEF;&#x4EE3;&#x7801;&#x7684; Bug &#xFF0C;&#x627E;&#x4E86;&#x5F88;&#x4E45;&#x76EE;&#x524D;&#x8FD8;&#x5728;&#x5361;&#x7740;&#xFF0C;&#x96BE;&#x8FC7;&#x3002; &#x5514;&#xFF0C;&#x590D;&#x4E60;&#x5B8C;&#x5355;&#x8BCD;&#x5C31;&#x53BB;&#x7761;&#x89C9;&#x53BB;&#x597D;&#x4E86;&#xFF0C;&#x660E;&#x5929;&#x6CA1;&#x4EC0;&#x4E48;&#x8BFE;&#xFF0C;&#x53EF;&#x4EE5;&#x590D;&#x4E60;&#x6570;&#x5B66;&#x53BB;&#xFF0C;&#x987A;&#x4FBF;&#x7EE7;&#x7EED;&#x63A8; SICP &#x548C;&#x76F8;&#x5173;&#x7684;&#x6587;&#x7AE0;&#xFF0C;&#x6211;&#x6700;&#x8FD1;&#x5728;&#x77E5;&#x4E4E;&#x8FD8;&#x5438;&#x4E86;&#x4E0D;&#x5C11;&#x7C89;&#x554A;&#x54C8;&#x54C8;&#xFF0C;&#x60F3;&#x5230;&#x54EA;&#x8BF4;&#x5230;&#x54EA;&#xFF0C;&#x8D76;&#x7D27;&#x53BB;&#x590D;&#x4E60;&#x5355;&#x8BCD;&#x4E86;&#x3002; &#x6CA1;&#x4EBA;&#x6253;&#x6270;&#x7684;&#x623F;&#x95F4;&#x5F00;&#x5FC3;&#xFF1A;","categories":[],"tags":[{"name":"周记","slug":"周记","permalink":"https://lfkdsk.github.io/tags/周记/"}]},{"title":"Algorithms:Union Find","slug":"re-learn-al","date":"2017-03-15T10:48:10.000Z","updated":"2017-03-19T14:43:26.000Z","comments":true,"path":"2017/03/15/re-learn-al/","link":"","permalink":"https://lfkdsk.github.io/2017/03/15/re-learn-al/","excerpt":"","text":"&#x91CD;&#x65B0;&#x5B66;&#x4E60;&#x7B97;&#x6CD5;&#x77E5;&#x8BC6;&#x7684;&#x7B2C;&#x4E00;&#x8282;&#xFF0C;Algorithms&#x4E2D;&#x7684;1.5&#x8282;&#xFF0C;&#x5E76;&#x5DEE;&#x96C6;&#x3002; &#x5E76;&#x5DEE;&#x96C6;&#x53EF;&#x4EE5;&#x5224;&#x65AD;&#x4E00;&#x5BF9;&#x5BF9;&#x8C61;&#x7684;&#x8FDE;&#x901A;&#x6027;&#xFF08;&#x662F;&#x5426;&#x6709;&#x7B49;&#x4EF7;&#x5173;&#x7CFB;&#xFF09;&#xFF0C;&#x4E5F;&#x88AB;&#x53EB;&#x505A;&#x52A8;&#x6001;&#x8FDE;&#x901A;&#x6027;&#x7B97;&#x6CD5;&#x3002;&#x5E76;&#x5DEE;&#x96C6;&#x7684;&#x91CD;&#x70B9;&#x5728;&#x4E8E;&#x600E;&#x4E48;&#x628A;&#x6240;&#x6709;&#x7684;&#x5B50;&#x8282;&#x70B9;&#x5212;&#x5206;&#x6210;&#x591A;&#x4E2A;&#x96C6;&#x5408;&#xFF0C;&#x5982;&#x679C;&#x4E24;&#x4E2A;&#x70B9;&#x6709;&#x8FDE;&#x901A;&#x6027;&#x5C31;&#x5C06;&#x5B83;&#x4EEC;&#x5212;&#x5206;&#x5230;&#x540C;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x91CC;&#x9762;&#x53BB;&#xFF0C;&#x8FD9;&#x6837;&#x5B50;&#x5F53;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x4E24;&#x4E2A;&#x70B9;&#x662F;&#x5728;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x4E2D;&#x6211;&#x4EEC;&#x5C31;&#x80FD;&#x8BA4;&#x4E3A;&#x5979;&#x4EEC;&#x662F;&#x53EF;&#x8FBE;&#x7684;&#x3002; Tips&#xFF1A; &#x7B49;&#x4EF7;&#x5173;&#x7CFB;&#xFF1A; &#x81EA;&#x53CD;&#x6027; &#x5BF9;&#x79F0;&#x6027; &#x4F20;&#x9012;&#x6027; &#x4F8B;&#x5982;&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x7C7B;&#x4F3C;&#x8FD9;&#x6837;&#x7684;&#x8FF7;&#x5BAB;&#x95EE;&#x9898;&#xFF1A; API return value Function name Usage UF(N) &#x751F;&#x6210;0~N-1&#x4E2A;&#x70B9;&#xFF08;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x7ACB;&#x4F53;&#x7684;&#x5E76;&#x5DEE;&#x96C6;&#x6241;&#x5E73;&#x5316;&#xFF09; void union(int p,int q) p q &#x4E2D;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x94FE;&#x63A5; int find(int p) &#x8FD4;&#x56DE;p&#x7684;&#x6807;&#x8BC6;&#x7B26; int connected(int p,int q) &#x5224;&#x65AD;P Q &#x662F;&#x5426;&#x6709;&#x540C;&#x4E00;&#x4E2A;&#x8054;&#x901A;&#x5206;&#x91CF; &#x4E09;&#x79CD;&#x7B97;&#x6CD5;QuickFind&#x548C;&#x540D;&#x5B57;&#x4E00;&#x6837;&#xFF0C;&#x8FD9;&#x4E2A;&#x7B97;&#x6CD5;&#x7684;&#x901F;&#x5EA6;&#x5FEB;&#x5728;&#x4E86;Find&#x4E0A;&#x9762;&#xFF0C;&#x6BCF;&#x6B21;&#x7684;find&#x64CD;&#x4F5C;&#x662F;O(1)&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x672C;&#x8EAB;&#x662F;&#x6548;&#x7387;&#x6700;&#x5DEE;&#x7684;&#x4E00;&#x79CD;&#x3002; 1234567891011121314public int find(int n) { return id[n]}public void union(int p, int q) { int pID = find(p); int qID = find(q); if (pID == qID) return; // &#x5C06;p&#x7684;&#x6240;&#x6709;&#x5206;&#x7C7B;&#x6539;&#x6210;q&#x7684;&#x5206;&#x91CF; for (...) { if(id[i] == pID) id[i] = qID; }} &#x5E76;&#x5DEE;&#x96C6;&#x7684;&#x76EE;&#x7684;&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x67D0;&#x79CD;&#x6807;&#x8BC6;&#x7B26;&#x7684;&#x65B9;&#x6CD5;&#x5C06;&#x5143;&#x7D20;&#x5212;&#x5206;&#x5F00;&#xFF0C;QuickFind&#x8FD9;&#x6837;&#x5B50;&#x867D;&#x7136;&#x6BCF;&#x6B21;&#x7684;&#x67E5;&#x627E;&#x597D;&#x50CF;&#x5F88;&#x5FEB;&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x5B9E;&#x6BCF;&#x6B21;&#x7684;union&#x8981;&#x505A;&#x4E00;&#x6B21;O&#xFF08;n&#xFF09;&#x7684;&#x64CD;&#x4F5C;&#x3002; QuickUnionQuickUnion&#x7684;&#x65B9;&#x6CD5;&#x5C31;&#x9AD8;&#x660E;&#x5F88;&#x591A;&#xFF0C;&#x4E0A;&#x9762;&#x7684;&#x91CD;&#x6574;&#x6807;&#x8BC6;&#x7B26;&#x4EA7;&#x751F;&#x4E86;&#x5F88;&#x5927;&#x7684;&#x6D88;&#x8017;&#xFF0C;&#x8FD9;&#x6837;&#x5B50;&#x6211;&#x4EEC;&#x5C31;&#x5E94;&#x8BE5;&#x907F;&#x514D;&#x8FD9;&#x4E2A;&#x6D88;&#x8017;&#xFF0C;&#x7ED3;&#x6210;&#x4E00;&#x68F5;&#x6811;&#x65E0;&#x7591;&#x662F;&#x5F88;&#x597D;&#x7684;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x53EA;&#x8981;&#x4E24;&#x4E2A;&#x8282;&#x70B9;&#x6709;&#x76F8;&#x540C;&#x7684;&#x6839;&#xFF0C;&#x90A3;&#x6211;&#x4EEC;&#x5C31;&#x8BA4;&#x4E3A;&#x4ED6;&#x4EEC;&#x5728;&#x76F8;&#x540C;&#x7684;&#x96C6;&#x5408;&#x3002; 123456789101112131415161718private int find(int p) { // &#x4E0D;&#x65AD;&#x5411;&#x4E0A;&#x67E5;&#x627E; &#x76F4;&#x5230;&#x6839;&#x8282;&#x70B9; while(p != id[p]){ p = id[p]; } return p;}public void union(int p, int q) { int pRoot = find(p); int qRoot = find(q); if(pRoot == qRoot) { return; } // &#x628A;p&#x7684;&#x6839;&#x8282;&#x70B9;&#x76F4;&#x63A5;&#x6539;&#x6210;q&#x7684;&#x6839;&#x8282;&#x70B9; id[pRoot] = qRoot; count--;} &#x521D;&#x59CB;&#x5316;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x6807;&#x8BC6;&#x7B26;&#x90FD;&#x6307;&#x5411;&#x81EA;&#x5DF1;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x641C;&#x7D22;&#x6839;&#x8282;&#x70B9;&#x7684;&#x65F6;&#x5019;&#x624D;&#x80FD;&#x9760;&#x6839;&#x8282;&#x70B9;&#x7684;id&#x706F;&#x4E0D;&#x7B49;&#x4E8E;value&#x6765;&#x5224;&#x65AD;&#x3002;&#x5728;&#x8FDE;&#x63A5;&#x7684;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x4E5F;&#x76F4;&#x63A5;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x628A;&#x4E00;&#x4E2A;&#x7684;&#x6839;&#x4ED8;&#x7ED9;&#x53E6;&#x4E00;&#x4E2A;&#x6839;&#x3002;union&#x4E0D;&#x518D;&#x662F;&#x7EBF;&#x6027;&#x7EA7;&#x522B;&#x7684;&#x8FD0;&#x7B97;&#x5566;&#x3002; Weight-QuickUnion&#x4F7F;&#x7528;&#x4E86;&#x6811;&#x7ED3;&#x6784;&#x6700;&#x5927;&#x7684;&#x95EE;&#x9898;&#x5C31;&#x662F;&#x6811;&#x7684;&#x7EB5;&#x6DF1;&#x95EE;&#x9898;&#xFF0C;&#x6811;&#x7684;&#x9AD8;&#x5EA6;&#x53D8;&#x9AD8;&#x4E4B;&#x540E;&#xFF0C;&#x7531;&#x4E0B;&#x5230;&#x4E0A;&#x5230;&#x6839;&#x7684;&#x7EBF;&#x6027;&#x6D88;&#x8017;&#x4ECD;&#x7136;&#x4E0D;&#x5BB9;&#x5C0F;&#x89D1;&#xFF0C;&#x8FD9;&#x65F6;&#x6211;&#x4EEC;&#x91C7;&#x53D6;&#x4E00;&#x79CD;&#x7B56;&#x7565;&#xFF0C;&#x6BCF;&#x5F53;&#x5927;&#x6811;&#x548C;&#x5C0F;&#x6811;&#x5408;&#x5E76;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x603B;&#x662F;&#x628A;&#x5C0F;&#x6811;&#x4F5C;&#x4E3A;&#x5927;&#x6811;&#x7684;&#x5B50;&#x6811;&#xFF0C;&#x8FD9;&#x6837;&#x5B50;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x6709;&#x6548;&#x7684;&#x7F29;&#x51CF;&#x6811;&#x7684;&#x9AD8;&#x5EA6;&#x3002; 1234567891011121314151617181920212223public class WeightedQuickUnionUF { private int[] sz;// &#x8BE5;&#x8282;&#x70B9;&#x6709;&#x591A;&#x5C11;&#x5C42; public WeightedQuickUnionUF(int N) { // ... initial sz = new int[N]; for (int i = 0; i &lt; N; i++) { sz[i] = 1; } } public void union(int p, int q) { int i = find(p); int j = find(q); if(i == j) return; if(sz[i] &lt; sz[j]) { id[i] = j; sz[j] += sz[i]; } else { id[j] = i; sz[i] += sz[j]; } }} &#x6211;&#x4EEC;&#x4E3A;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x90FD;&#x6DFB;&#x52A0;&#x4E86;&#x6743;&#x91CD;&#x503C;&#xFF0C;&#x5373;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x5B50;&#x8282;&#x70B9;&#x7684;&#x5C42;&#x6570;&#xFF0C;&#x8FD9;&#x6837;&#x6BCF;&#x6B21;&#x5728;&#x5408;&#x5E76;&#x6811;&#x7684;&#x65F6;&#x5019;&#x90FD;&#x4F1A;&#x8FDB;&#x884C;&#x6539;&#x53D8;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x6811;&#x7684;&#x5C42;&#x6570;&#x5C31;&#x5F97;&#x5230;&#x4E86;&#x6709;&#x6548;&#x7684;&#x63A7;&#x5236;&#x3002; &#x5927;&#x6982;&#x5C31;&#x662F;&#x5982;&#x56FE;&#x7684;&#x6548;&#x679C;&#x3002; Tips1: &#x8DEF;&#x5F84;&#x538B;&#x7F29; &#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x6211;&#x4EEC;&#x7684;&#x591A;&#x4E2A;&#x8282;&#x70B9;&#x90FD;&#x80FD;&#x76F4;&#x63A5;&#x8FDE;&#x5230;&#x6839;&#x8282;&#x70B9;&#x4E0A;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x4E0D;&#x60F3;&#x8981;QuickUnion&#x90A3;&#x79CD;&#x4F4E;&#x6548;&#x7387;&#x3002; 123456789&gt; public int root(int i) {&gt; while(id[i] != i) {&gt; id[i] = id[id[i]]; // &#x8FD9;&#x662F;&#x4E00;&#x79CD;&#x8DEF;&#x5F84;&#x538B;&#x7F29;&#x65B9;&#x5F0F;&gt; // &#x538B;&#x7F29;&#x4E00;&#x5C42;&gt; i = id[i];&gt; }&gt; return i;&gt; }&gt; &gt; &#x6BCF;&#x6B21;find&#x7684;&#x65F6;&#x5019;&#x90FD;&#x4F1A;&#x8FDB;&#x884C;&#x8DEF;&#x5F84;&#x538B;&#x7F29;&#x3002; Tips2 : lgN &#x547D;&#x9898;&#xFF1A; N&#x4E2A;&#x89E6;&#x70B9;&#xFF0C;&#x6DF1;&#x5EA6;&#x6700;&#x591A;&#x6709; lgN &#x5C42; &#x6211;&#x4EEC;&#x5728;&#x7B97;&#x6811;&#x7684;&#x590D;&#x6742;&#x7A0B;&#x5EA6;&#x7684;&#x65F6;&#x5019;&#x7ECF;&#x5E38;&#x90FD;&#x662F;&#x5B58;&#x5728; lgN &#x8FD9;&#x4E2A;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x8BC1;&#x660E;&#x4E00;&#x4E0B;&#x3002; &#x5047;&#x8BBE;&#x6211;&#x4EEC;&#x6709;&#x4E24;&#x9897;&#x5B50;&#x6811;&#xFF0C; T1 , T2 , &#x5176;&#x4E2D; T1 &lt; T2 ,&#x8FD9;&#x6837;&#x6211;&#x4EEC;&#x5E94;&#x8BE5;&#x628A; T1 &#x8FDE;&#x5728; T2 &#x7684;&#x4E0B;&#x9762;&#x3002; T2 &gt; T1 &#x90A3;&#x4E48; T2 &#x81F3;&#x5C11;&#x4E5F;&#x8981;&#x6BD4; T1 &#x591A;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x8FD9;&#x6837;&#x5B50;&#x8FD9;&#x4E2A;&#x5408;&#x5E76;&#x8FC7;&#x7A0B;&#xFF0C;&#x5176;&#x5B9E;&#x662F;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x7FFB;&#x500D;&#x7684;&#x8FC7;&#x7A0B;&#x3002; &#x8FD9;&#x6837;&#x6211;&#x4EEC;&#x8981;&#x5230; N &#x4E2A;&#x8282;&#x70B9; &#x5C31;&#x8981;&#x7FFB; lgN &#x500D;&#x3002; &#x8BFE;&#x540E;&#x4F5C;&#x4E1A; &#x662F;&#x4E00;&#x4E2A;&#x6E17;&#x900F;&#x548C;&#x8499;&#x5854;&#x5361;&#x7F57;&#x4EFF;&#x771F;&#x7684;&#x9898;&#xFF1A; &#x6211;&#x7684;&#x7B54;&#x6848; &#x5B83;&#x7684; OJ &#x771F;&#x662F;&#x9EBB;&#x70E6;&#xFF0C;&#x8981;&#x7528;&#x9ED8;&#x8BA4;&#x5305;&#x540D;&#xFF0C;&#x8FD8;&#x6709;&#x4E0D;&#x5C11;&#x7684;&#x8F93;&#x51FA;&#x9650;&#x5236;&#x4EC0;&#x4E48;&#x7684;&#xFF0C;&#x8FD8;&#x6709; Style-Check&#xFF0C; &#x4E0D;&#x8FC7;&#x8FD8;&#x662F;&#x5F88;&#x597D;&#x73A9;&#x7684;233333&#x3002; &#x53E6;&#x9644;&#x539F;&#x4E66;&#x4E2D;&#x7684;&#x5B9E;&#x73B0;&#xFF1A; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223/****************************************************************************** * Compilation: javac WeightedQuickUnionUF.java * Execution: java WeightedQuickUnionUF &lt; input.txt * Dependencies: StdIn.java StdOut.java * Data files: http://algs4.cs.princeton.edu/15uf/tinyUF.txt * http://algs4.cs.princeton.edu/15uf/mediumUF.txt * http://algs4.cs.princeton.edu/15uf/largeUF.txt * * Weighted quick-union (without path compression). * ******************************************************************************/package edu.princeton.cs.algs4;/** * The {@code WeightedQuickUnionUF} class represents a &lt;em&gt;union&#x2013;find data type&lt;/em&gt; * (also known as the &lt;em&gt;disjoint-sets data type&lt;/em&gt;). * It supports the &lt;em&gt;union&lt;/em&gt; and &lt;em&gt;find&lt;/em&gt; operations, * along with a &lt;em&gt;connected&lt;/em&gt; operation for determining whether * two sites are in the same component and a &lt;em&gt;count&lt;/em&gt; operation that * returns the total number of components. * &lt;p&gt; * The union&#x2013;find data type models connectivity among a set of &lt;em&gt;n&lt;/em&gt; * sites, named 0 through &lt;em&gt;n&lt;/em&gt;&#x2013;1. * The &lt;em&gt;is-connected-to&lt;/em&gt; relation must be an * &lt;em&gt;equivalence relation&lt;/em&gt;: * &lt;ul&gt; * &lt;li&gt; &lt;em&gt;Reflexive&lt;/em&gt;: &lt;em&gt;p&lt;/em&gt; is connected to &lt;em&gt;p&lt;/em&gt;. * &lt;li&gt; &lt;em&gt;Symmetric&lt;/em&gt;: If &lt;em&gt;p&lt;/em&gt; is connected to &lt;em&gt;q&lt;/em&gt;, * then &lt;em&gt;q&lt;/em&gt; is connected to &lt;em&gt;p&lt;/em&gt;. * &lt;li&gt; &lt;em&gt;Transitive&lt;/em&gt;: If &lt;em&gt;p&lt;/em&gt; is connected to &lt;em&gt;q&lt;/em&gt; * and &lt;em&gt;q&lt;/em&gt; is connected to &lt;em&gt;r&lt;/em&gt;, then * &lt;em&gt;p&lt;/em&gt; is connected to &lt;em&gt;r&lt;/em&gt;. * &lt;/ul&gt; * &lt;p&gt; * An equivalence relation partitions the sites into * &lt;em&gt;equivalence classes&lt;/em&gt; (or &lt;em&gt;components&lt;/em&gt;). In this case, * two sites are in the same component if and only if they are connected. * Both sites and components are identified with integers between 0 and * &lt;em&gt;n&lt;/em&gt;&#x2013;1. * Initially, there are &lt;em&gt;n&lt;/em&gt; components, with each site in its * own component. The &lt;em&gt;component identifier&lt;/em&gt; of a component * (also known as the &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;canonical element&lt;/em&gt;, &lt;em&gt;leader&lt;/em&gt;, * or &lt;em&gt;set representative&lt;/em&gt;) is one of the sites in the component: * two sites have the same component identifier if and only if they are * in the same component. * &lt;ul&gt; * &lt;li&gt;&lt;em&gt;union&lt;/em&gt;(&lt;em&gt;p&lt;/em&gt;, &lt;em&gt;q&lt;/em&gt;) adds a * connection between the two sites &lt;em&gt;p&lt;/em&gt; and &lt;em&gt;q&lt;/em&gt;. * If &lt;em&gt;p&lt;/em&gt; and &lt;em&gt;q&lt;/em&gt; are in different components, * then it replaces * these two components with a new component that is the union of * the two. * &lt;li&gt;&lt;em&gt;find&lt;/em&gt;(&lt;em&gt;p&lt;/em&gt;) returns the component * identifier of the component containing &lt;em&gt;p&lt;/em&gt;. * &lt;li&gt;&lt;em&gt;connected&lt;/em&gt;(&lt;em&gt;p&lt;/em&gt;, &lt;em&gt;q&lt;/em&gt;) * returns true if both &lt;em&gt;p&lt;/em&gt; and &lt;em&gt;q&lt;/em&gt; * are in the same component, and false otherwise. * &lt;li&gt;&lt;em&gt;count&lt;/em&gt;() returns the number of components. * &lt;/ul&gt; * &lt;p&gt; * The component identifier of a component can change * only when the component itself changes during a call to * &lt;em&gt;union&lt;/em&gt;&#x2014;it cannot change during a call * to &lt;em&gt;find&lt;/em&gt;, &lt;em&gt;connected&lt;/em&gt;, or &lt;em&gt;count&lt;/em&gt;. * &lt;p&gt; * This implementation uses weighted quick union by size (without path compression). * Initializing a data structure with &lt;em&gt;n&lt;/em&gt; sites takes linear time. * Afterwards, the &lt;em&gt;union&lt;/em&gt;, &lt;em&gt;find&lt;/em&gt;, and &lt;em&gt;connected&lt;/em&gt; * operations take logarithmic time (in the worst case) and the * &lt;em&gt;count&lt;/em&gt; operation takes constant time. * For alternate implementations of the same API, see * {@link UF}, {@link QuickFindUF}, and {@link QuickUnionUF}. * * &lt;p&gt; * For additional documentation, see &lt;a href=&quot;http://algs4.cs.princeton.edu/15uf&quot;&gt;Section 1.5&lt;/a&gt; of * &lt;i&gt;Algorithms, 4th Edition&lt;/i&gt; by Robert Sedgewick and Kevin Wayne. * * @author Robert Sedgewick * @author Kevin Wayne */public class WeightedQuickUnionUF { private int[] parent; // parent[i] = parent of i private int[] size; // size[i] = number of sites in subtree rooted at i private int count; // number of components /** * Initializes an empty union&#x2013;find data structure with {@code n} sites * {@code 0} through {@code n-1}. Each site is initially in its own * component. * * @param n the number of sites * @throws IllegalArgumentException if {@code n &lt; 0} */ public WeightedQuickUnionUF(int n) { count = n; parent = new int[n]; size = new int[n]; for (int i = 0; i &lt; n; i++) { parent[i] = i; size[i] = 1; } } /** * Returns the number of components. * * @return the number of components (between {@code 1} and {@code n}) */ public int count() { return count; } /** * Returns the component identifier for the component containing site {@code p}. * * @param p the integer representing one object * @return the component identifier for the component containing site {@code p} * @throws IndexOutOfBoundsException unless {@code 0 &lt;= p &lt; n} */ public int find(int p) { validate(p); while (p != parent[p]) p = parent[p]; return p; } // validate that p is a valid index private void validate(int p) { int n = parent.length; if (p &lt; 0 || p &gt;= n) { throw new IndexOutOfBoundsException(&quot;index &quot; + p + &quot; is not between 0 and &quot; + (n-1)); } } /** * Returns true if the the two sites are in the same component. * * @param p the integer representing one site * @param q the integer representing the other site * @return {@code true} if the two sites {@code p} and {@code q} are in the same component; * {@code false} otherwise * @throws IndexOutOfBoundsException unless * both {@code 0 &lt;= p &lt; n} and {@code 0 &lt;= q &lt; n} */ public boolean connected(int p, int q) { return find(p) == find(q); } /** * Merges the component containing site {@code p} with the * the component containing site {@code q}. * * @param p the integer representing one site * @param q the integer representing the other site * @throws IndexOutOfBoundsException unless * both {@code 0 &lt;= p &lt; n} and {@code 0 &lt;= q &lt; n} */ public void union(int p, int q) { int rootP = find(p); int rootQ = find(q); if (rootP == rootQ) return; // make smaller root point to larger one if (size[rootP] &lt; size[rootQ]) { parent[rootP] = rootQ; size[rootQ] += size[rootP]; } else { parent[rootQ] = rootP; size[rootP] += size[rootQ]; } count--; } /** * Reads in a sequence of pairs of integers (between 0 and n-1) from standard input, * where each integer represents some object; * if the sites are in different components, merge the two components * and print the pair to standard output. * * @param args the command-line arguments */ public static void main(String[] args) { int n = StdIn.readInt(); WeightedQuickUnionUF uf = new WeightedQuickUnionUF(n); while (!StdIn.isEmpty()) { int p = StdIn.readInt(); int q = StdIn.readInt(); if (uf.connected(p, q)) continue; uf.union(p, q); StdOut.println(p + &quot; &quot; + q); } StdOut.println(uf.count() + &quot; components&quot;); }}/****************************************************************************** * Copyright 2002-2016, Robert Sedgewick and Kevin Wayne. * * This file is part of algs4.jar, which accompanies the textbook * * Algorithms, 4th edition by Robert Sedgewick and Kevin Wayne, * Addison-Wesley Professional, 2011, ISBN 0-321-57351-X. * http://algs4.cs.princeton.edu * * * algs4.jar is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * algs4.jar is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with algs4.jar. If not, see http://www.gnu.org/licenses. ******************************************************************************/","categories":[],"tags":[{"name":"re-learn","slug":"re-learn","permalink":"https://lfkdsk.github.io/tags/re-learn/"}]},{"title":"第一周：迷惘中的蹒跚","slug":"week-0","date":"2017-03-11T12:26:36.000Z","updated":"2017-03-12T14:08:04.000Z","comments":true,"path":"2017/03/11/week-0/","link":"","permalink":"https://lfkdsk.github.io/2017/03/11/week-0/","excerpt":"","text":"&#x8FD9;&#x5E94;&#x8BE5;&#x662F;&#x8FDB;&#x5165;&#x5927;&#x4E09;&#x4E0B;&#x5B66;&#x671F;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x5468;&#x672B;&#x4E86;&#xFF0C;&#x81EA;&#x4ECE;&#x51B3;&#x5B9A;&#x6709;&#x51FA;&#x56FD;&#x8BFB;&#x4E66;&#x7684;&#x6253;&#x7B97;&#x3002;&#x65E5;&#x5B50;&#x5C31;&#x4E00;&#x5929;&#x5929;&#x53D8;&#x5F97;&#x5FD9;&#x788C;&#x8D77;&#x6765;&#xFF0C;&#x81EA;&#x5DF1;&#x5B9A;&#x4E86;&#x4E2A;&#x6BCF;&#x5929;200+&#x5355;&#x8BCD;&#x7684;&#x8BA1;&#x5212;&#xFF0C;&#x542C;&#x7740;&#x552C;&#x4EBA;&#xFF0C;&#x4F46;&#x5176;&#x5B9E;&#x4ECE;&#x81EA;&#x8EAB;&#x6765;&#x770B;&#x4E5F;&#x662F;&#x633A;&#x7B26;&#x5408;&#x79D1;&#x5B66;&#x89C4;&#x5F8B;&#x7684;&#xFF0C;&#x901A;&#x8FC7;&#x53CD;&#x590D;&#x7684;&#x7EC3;&#x4E60;&#xFF0C;&#x76EE;&#x524D;&#x80CC;&#x4E86;&#x5927;&#x6982;&#x56DB;&#x5929;&#x7684;&#x4E71;&#x5E8F;&#x7684;&#x7EA2;&#x5B9D;&#x4E66;&#xFF08;&#x5176;&#x5B9E;&#x662F;&#x7EFF;&#x8272;&#x7684;&#xFF09;&#xFF0C;860+&#x7684;&#x5355;&#x8BCD;&#x57FA;&#x672C;&#x4E0A;&#x90FD;&#x80CC;&#x4E0B;&#x6765;&#x4E86;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x5C31;&#x662F;&#x4E0D;&#x80FD;&#x61C8;&#x6020;&#xFF0C;&#x575A;&#x6301;&#x4F4F;&#x6BCF;&#x5929;&#x5B66;&#x4E60;&#x3002; &#x8FD9;&#x5468;&#x7684;&#x5468;&#x4E00;&#x8BD5;&#x7740;&#x9762;&#x4E86;&#x4E2A;&#x8BD5;&#xFF0C;&#x7F8E;&#x56E2;&#x7684;&#x732B;&#x773C;&#x7535;&#x5F71;&#xFF0C;&#x8BF4;&#x8D77;&#x6765;&#x5176;&#x5B9E;&#x8981;&#x662F;&#x51C6;&#x5907;&#x51FA;&#x56FD;&#x7684;&#x8BDD;&#xFF0C;&#x4E0B;&#x5B66;&#x671F;&#x53EF;&#x80FD;&#x5C31;&#x4E0D;&#x80FD;&#x5982;&#x671F;&#x53BB;&#x5916;&#x9762;&#x5B9E;&#x4E60;&#x53BB;&#x4E86;&#x3002;&#x4E0D;&#x8FC7;&#x60F3;&#x60F3;&#x4E5F;&#x6CA1;&#x4EC0;&#x4E48;&#x597D;&#x9057;&#x61BE;&#x7684;&#xFF0C;&#x90A3;&#x79CD;&#x5B9E;&#x9645;&#x7684;&#x5DE5;&#x4F5C;&#x4F53;&#x9A8C;&#x81EA;&#x5DF1;&#x53C8;&#x4E0D;&#x662F;&#x6CA1;&#x6709;&#x7ECF;&#x53D7;&#x8FC7;&#xFF0C;&#x518D;&#x8FD9;&#x4E48;&#x65E9;&#x53BB;&#x516C;&#x53F8;&#x906D;&#x7F6A;&#xFF0C;&#x89C9;&#x5F97;&#x4E5F;&#x6CA1;&#x4EC0;&#x4E48;&#x592A;&#x5927;&#x7684;&#x5FC5;&#x8981;&#x3002;&#x4E0D;&#x8FC7;&#x9762;&#x8BD5;&#x7684;&#x53CD;&#x9988;&#x8FD8;&#x6CA1;&#x6709;&#xFF0C;&#x9F99;&#x5B66;&#x957F;&#x8BF4;&#x6548;&#x679C;&#x8FD8;&#x4E0D;&#x9519;&#xFF0C;&#x4F46;&#x613F;&#x5982;&#x6B64;&#x5427;&#x3002;&#x9762;&#x8BD5;&#x5B98;&#x95EE;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x5927;&#x591A;&#x6570;&#x90FD;&#x77E5;&#x9053;&#x5427;&#xFF0C;&#x5C11;&#x6570;&#x6709;&#x62FF;&#x4E0D;&#x51C6;&#x7684;&#x77E5;&#x8BC6;&#xFF0C;&#x6700;&#x540E;&#x6765;&#x4E86;&#x4E00;&#x4E2A;DFS&#x7684;&#x904D;&#x5386;View&#x6811;&#xFF0C;&#x4E5F;&#x662F;&#x5F88;&#x7B80;&#x5355;&#x7684;&#x77E5;&#x8BC6;&#x3002; &#x5982;&#x679C;&#x4E0D;&#x6253;&#x7B97;&#x7740;&#x6025;&#x627E;&#x5DE5;&#x4F5C;&#x4E86;&#x7684;&#x8BDD;&#xFF0C;&#x5176;&#x5B9E;&#x6BCF;&#x5929;&#x5C31;&#x6CA1;&#x6709;&#x592A;&#x591A;&#x7684;&#x4E8B;&#x60C5;&#x4E86;&#x3002;&#x8D81;&#x7740;&#x8FD9;&#x6BB5;&#x65F6;&#x95F4;&#x5E94;&#x8BE5;&#x597D;&#x597D;&#x7684;&#x590D;&#x4E60;&#x548C;&#x5B66;&#x4E60;&#x77E5;&#x8BC6;&#xFF0C;&#x6700;&#x8FD1;&#x7684;&#x751F;&#x6D3B;&#x4E60;&#x60EF;&#x4E5F;&#x8FD8;&#x7B97;&#x597D;&#xFF0C;&#x57FA;&#x672C;&#x4E0A;&#x90FD;&#x80FD;&#x4FDD;&#x8BC1;12&#x70B9;&#x4E4B;&#x524D;&#x7761;&#x89C9;&#xFF0C;&#x8D77;&#x5E8A;&#x5E73;&#x65F6;&#x7684;&#x8BDD;&#x8D77;&#x7684;&#x4E5F;&#x4E0D;&#x665A;&#xFF0C;7&#x70B9;10&#x5206;&#x5DEE;&#x4E0D;&#x591A;&#x5C31;&#x8D77;&#x4E86;&#x3002;&#x6BCF;&#x5929;&#x7684;&#x8BFE;&#x4E0D;&#x591A;&#xFF0C;&#x6B63;&#x597D;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x80CC;&#x5355;&#x8BCD;&#x770B;&#x4E66;&#xFF0C;&#x6211;&#x603B;&#x662F;&#x89C9;&#x5F97;&#x81EA;&#x5DF1;&#x7684;&#x7B97;&#x6CD5;&#x5B66;&#x7684;&#x4E0D;&#x600E;&#x4E48;&#x597D;&#xFF0C;&#x6700;&#x8FD1;&#x4E70;&#x4E86;&#x51E0;&#x672C;&#x4E66;&#x53BB;&#x5237;&#x4E00;&#x5237;&#x77E5;&#x8BC6;&#x3002; &#x6700;&#x8FD1;&#x4E0D;&#x600E;&#x4E48;&#x53BB;&#x56FE;&#x4E66;&#x9986;&#x4E86;&#xFF0C;&#x5012;&#x662F;&#x5E38;&#x6765;&#x5B9E;&#x9A8C;&#x5BA4;&#xFF0C;&#x6211;&#x53D1;&#x73B0;&#x4E86;&#x5982;&#x679C;&#x6211;&#x53EA;&#x662F;&#x80CC;&#x5355;&#x8BCD;&#x7684;&#x7684;&#x8BDD;&#xFF0C;&#x5E73;&#x65F6;&#x57FA;&#x672C;&#x4E0A;&#x90FD;&#x4E0D;&#x4F1A;&#x5206;&#x5FC3;&#x53BB;&#x505A;&#x4EC0;&#x4E48;&#x4E8B;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x8981;&#x662F;&#x5199;&#x8D77;&#x4E86;&#x4EE3;&#x7801;&#x5C31;&#x63A7;&#x5236;&#x4E0D;&#x4F4F;&#x5566;23333&#x3002;&#x4ECA;&#x5929;&#x4E0B;&#x5348;&#x5F00;&#x59CB;&#x6539;HobbyScript&#x7684;&#x89E3;&#x91CA;&#x5668;&#xFF0C;&#x641E;&#x5230;&#x73B0;&#x5728;&#x624D;&#x5DEE;&#x4E0D;&#x591A;&#x6539;&#x5B8C;&#xFF0C;&#x8BF4;&#x5B9E;&#x8BDD;&#x6211;&#x771F;&#x7684;&#x90FD;&#x4E0D;&#x60F3;&#x518D;&#x6539;&#x4E86;&#x3002;&#x8FD9;&#x6837;&#x5B50;&#x5F04;&#x7684;&#x597D;&#x803D;&#x8BEF;&#x4E8B;&#xFF0C;&#x8FD8;&#x597D;&#x4ECA;&#x5929;&#x7684;&#x5355;&#x8BCD;&#x590D;&#x4E60;&#x5B8C;&#x4E86;&#x3002;&#x6700;&#x8FD1;&#x5728;&#x8BFB;SICP&#xFF0C;&#x76F8;&#x5173;&#x7684;&#x8BFB;&#x4E66;&#x7B14;&#x8BB0;&#x4E5F;&#x5DF2;&#x7ECF;&#x5199;&#x4E86;&#x4E24;&#x7BC7;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x4E0D;&#x518D;&#x8D58;&#x8FF0;&#x4E86;&#x3002;&#x91CC;&#x9762;&#x7684;&#x4E1C;&#x897F;&#x867D;&#x7136;&#x7B80;&#x5355;&#xFF0C;&#x4F46;&#x662F;&#x4E3A;&#x4E86;&#x80FD;&#x66F4;&#x6DF1;&#x523B;&#x7684;&#x4E86;&#x89E3;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#x6211;&#x8FD8;&#x662F;&#x5E94;&#x8BE5;&#x4ED4;&#x7EC6;&#x7684;&#x9605;&#x8BFB;&#x548C;&#x5B66;&#x4E60;&#x3002; &#x4ECA;&#x5929;&#x5C31;&#x8BF4;&#x5230;&#x8FD9;&#x5427;&#xFF0C;&#x73B0;&#x5728;&#x5728;&#x5B9E;&#x9A8C;&#x5BA4;&#x90FD;&#x5FEB;10.10&#x5206;&#x4E86;&#xFF0C;&#x518D;&#x4E0D;&#x8D70;&#x5C31;&#x56DE;&#x4E0D;&#x53BB;&#x4E86;&#xFF0C;&#x90A3;&#x6211;&#x5148;&#x8D70;&#x4E86;&#xFF5E;&#xFF5E;","categories":[],"tags":[{"name":"周记","slug":"周记","permalink":"https://lfkdsk.github.io/tags/周记/"}]},{"title":"0x02：SICP 的魔法 - 数据抽象、层次抽象和符号数据","slug":"learn-sicp-2","date":"2017-03-11T10:17:35.000Z","updated":"2017-03-25T16:11:11.000Z","comments":true,"path":"2017/03/11/learn-sicp-2/","link":"","permalink":"https://lfkdsk.github.io/2017/03/11/learn-sicp-2/","excerpt":"","text":"&#x5728;&#x7B2C;&#x4E00;&#x7AE0;&#x91CC;&#x9762;&#xFF0C;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x89C1;&#x8BC6;&#x5230;&#x4E86;&#x8FC7;&#x7A0B;&#x62BD;&#x8C61;&#x7684;&#x9B54;&#x6CD5;&#xFF0C;&#x4E00;&#x4E2A;&#x8FC7;&#x7A0B;&#x63CF;&#x8FF0;&#x4E86;&#x4E00;&#x7CFB;&#x5217;&#x6570;&#x636E;&#x7684;&#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#xFF0C;&#x4F46;&#x672C;&#x8EAB;&#x53C8;&#x662F;&#x4E00;&#x79CD;&#x5143;&#x7D20;&#x53EF;&#x4EE5;&#x51FA;&#x73B0;&#x5728;&#x7A0B;&#x5E8F;&#x7684;&#x4EFB;&#x4F55;&#x90E8;&#x5206;&#xFF0C;&#x6240;&#x4EE5;&#x8BF4;&#x8FC7;&#x7A0B;&#x662F;&#x4E00;&#x79CD;&#x62BD;&#x8C61;&#xFF0C;&#x6211;&#x4EEC;&#x5728;&#x4F7F;&#x7528;&#x7684;&#x65F6;&#x5019;&#x4E0D;&#x9700;&#x8981;&#x77E5;&#x9053;&#x4EFB;&#x4F55;&#x548C;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x6709;&#x5173;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x8C03;&#x7528;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x5B9A;&#x4E49;&#x597D;&#x7684;&#x8FC7;&#x7A0B;&#x5C31;&#x884C;&#x4E86;&#x3002; &#x4E0E;&#x6B64;&#x76F8;&#x7C7B;&#xFF0C;&#x6570;&#x636E;&#x672C;&#x8EAB;&#x4E5F;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x4E00;&#x79CD;&#x62BD;&#x8C61;&#xFF0C;&#x6211;&#x4EEC;&#x5728;&#x4E4B;&#x524D;&#x63A5;&#x89E6;&#x7684;&#x6570;&#x636E;&#x90FD;&#x662F;&#x4E00;&#x4E9B;&#x7B80;&#x5355;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x80FD;&#x6CA1;&#x4EC0;&#x4E48;&#x611F;&#x53D7;&#x3002;&#x4F46;&#x662F;&#x6570;&#x636E;&#x4E5F;&#x53EF;&#x4EE5;&#x5305;&#x542B;&#x4E0D;&#x6B62;&#x4E00;&#x79CD;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x4F7F;&#x7528;&#x7684;&#x65F6;&#x5019;&#x9690;&#x85CF;&#x5177;&#x4F53;&#x7684;&#x5B9E;&#x73B0;&#x7EC6;&#x8282;&#xFF0C;&#x5177;&#x4F53;&#x4F7F;&#x7528;&#x7684;&#x65F6;&#x5019;&#x53C8;&#x80FD;&#x4F5C;&#x4E3A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x5728;&#x7A0B;&#x5E8F;&#x4EFB;&#x610F;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x56E0;&#x6B64;&#x6570;&#x636E;&#x4E5F;&#x662F;&#x4E00;&#x79CD;&#x62BD;&#x8C61;&#x3002; &#x6709;&#x8FC7; OO &#x8BED;&#x8A00;&#x7ECF;&#x9A8C;&#x7684;&#x540C;&#x5B66; &#x53EF;&#x4EE5;&#x501F;&#x52A9;&#x7C7B;&#x7684;&#x6982;&#x5FF5;&#x7406;&#x89E3;&#x4E00;&#x4E0B;&#x4EE5;&#x4E0A;&#x7684;&#x6982;&#x5FF5; &#x4F46;&#x662F;&#x7C7B;&#x7684;&#x6982;&#x5FF5;&#x662F;&#x65E0;&#x6CD5;&#x5B8C;&#x5168;&#x6982;&#x62EC;&#x7684;&#x54E6;&#xFF5E; &#x6570;&#x636E;&#x62BD;&#x8C61;&#x6211;&#x4EEC;&#x4ECE;&#x6700;&#x7B80;&#x5355;&#x7684;&#x6570;&#x636E;&#x62BD;&#x8C61;&#x5F00;&#x59CB;&#xFF0C;&#x9996;&#x5148;&#x8BF4;&#x6700;&#x5C0F;&#x7684;&#x6570;&#x636E;&#x62BD;&#x8C61;&#x96C6;&#x5408; &#x2014;&#x2014; &#x5E8F;&#x5BF9;&#x3002; &#x5E8F;&#x5BF9;&#x8981;&#x5B9E;&#x73B0;&#x6570;&#x636E;&#x62BD;&#x8C61;&#x9996;&#x5148;&#x8981;&#x6709;&#x80FD;&#x628A;&#x6570;&#x636E;&#x6253;&#x6210;&#x4E00;&#x4E2A;&#x5305;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x53EB;&#x5B83;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x8FD8;&#x5E94;&#x8BE5;&#x6709;&#x80FD;&#x628A;&#x6570;&#x636E;&#x4ECE;&#x6346;&#x4E2D;&#x53D6;&#x51FA;&#x6765;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x53EB;&#x4ED6;&#x9009;&#x62E9;&#x51FD;&#x6570;&#x3002; &#x5728; Scheme &#x4E2D;&#x63D0;&#x4F9B;&#x4E86;&#x80FD;&#x5B9E;&#x73B0;&#x8FD9;&#x4E9B;&#x65B9;&#x6CD5;&#x7684; API: Function Name Usage ( cons p1 p2) &#x80FD;&#x628A;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#x6253;&#x5305;&#x6210;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61; ( car x ) &#x80FD;&#x4ECE; cons &#x6253;&#x5305;&#x51FA;&#x7684;&#x5BF9;&#x8C61; &#x53D6;&#x51FA;&#x5176;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x636E; ( cdr x ) &#x80FD;&#x4ECE; cons &#x6253;&#x5305;&#x51FA;&#x7684;&#x5BF9;&#x8C61; &#x53D6;&#x51FA;&#x5176;&#x4E2D;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;&#x636E; &#x5BF9;&#x4E8E;&#x80FD;&#x975E;&#x5E38;&#x65B9;&#x4FBF;&#x6784;&#x5EFA; class &#x6216;&#x662F; struct &#x8FD9;&#x6837;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x7684;&#x4F7F;&#x7528;&#x8005;&#x6765;&#x770B;&#xFF0C;&#x8FD9;&#x4E2A;&#x5E8F;&#x5BF9;&#x7684;&#x4F5C;&#x7528;&#x5B9E;&#x5728;&#x662F;&#x5FAE;&#x4E4E;&#x5176;&#x5FAE;&#xFF0C;&#x4F46;&#x662F;&#x5927;&#x7684;&#x62BD;&#x8C61;&#x6A21;&#x5F0F;&#x90FD;&#x662F;&#x4ECE;&#x6700;&#x5C0F;&#x7684;&#x62BD;&#x8C61;&#x65B9;&#x5F0F;&#x5F00;&#x59CB;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x5E8F;&#x5BF9;&#x4E5F;&#x53EA;&#x662F;&#x4E3A;&#x4E86;&#x6F14;&#x793A; Scheme &#x7684;&#x62BD;&#x8C61;&#x80FD;&#x529B;&#x3002; &#x5982;&#x4F55;&#x5B9A;&#x4E49;&#x6709;&#x7406;&#x6570;&#xFF1F;&#x8FD9;&#x770B;&#x8D77;&#x6765;&#x4F3C;&#x4E4E;&#x4E0D;&#x662F;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x56E0;&#x4E3A;&#x8BED;&#x8A00;&#x90FD;&#x4F1A;&#x539F;&#x751F;&#x652F;&#x6301;&#x5404;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x6D6E;&#x70B9;&#x6570;&#xFF0C;&#x80FD;&#x8F7B;&#x677E;&#x7684;&#x7528;&#x6765;&#x8868;&#x793A;&#x6709;&#x7406;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x8BF7;&#x5148;&#x5FD8;&#x4E86;&#x6709;&#x5173;&#x8FD9;&#x65B9;&#x9762;&#x7684;&#x77E5;&#x8BC6;&#xFF0C;&#x5355;&#x7EAF;&#x8003;&#x8651;&#x5F53;&#x6211;&#x4EEC;&#x7684;&#x7CFB;&#x7EDF;&#x53EA;&#x80FD;&#x652F;&#x6301;&#x6574;&#x5F62;&#x6570;&#x636E;&#x7684;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x5E94;&#x8BE5;&#x600E;&#x4E48;&#x8868;&#x793A;&#x6709;&#x7406;&#x6570;&#x3002; &#x4ECE;&#x4E0A;&#x4E00;&#x5C0F;&#x8282;&#x7684;&#x5E8F;&#x5BF9;&#x7684;&#x77E5;&#x8BC6;&#x51FA;&#x53D1;&#xFF0C;&#x6211;&#x4EEC;&#x5F88;&#x5BB9;&#x6613;&#x627E;&#x5230;&#x7B54;&#x6848;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x6709;&#x7406;&#x6570;&#x7684;&#x5C0F;&#x6570;&#x70B9;&#x524D;&#x540E;&#x7684;&#x90E8;&#x5206;&#xFF0C;&#x5206;&#x522B;&#x7528;&#x4E00;&#x4E2A;&#x6574;&#x5F62;&#x6570;&#x636E;&#x6765;&#x8868;&#x793A;&#xFF0C;&#x518D;&#x628A;&#x4ED6;&#x4EEC;&#x7528; cons &#x6253;&#x5305;&#xFF0C;&#x5F53;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;&#x7684;&#x65F6;&#x5019;&#x518D;&#x62C6;&#x5F00;&#x8BA1;&#x7B97;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; &#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x5BF9;&#x4E8E;&#x6709;&#x7406;&#x6570;&#x7684;&#x5B9A;&#x4E49;&#x751A;&#x81F3;&#x90FD;&#x53EF;&#x4EE5;&#x7528;&#x4E0A;&#x9762;&#x7684;&#x51FD;&#x6570;&#x6765;&#x8868;&#x793A; &#xFF1A; Function Name Usage ( make-rat x y ) &#x751F;&#x6210;&#x6709;&#x7406;&#x6570; x.y ( number bundle ) &#x83B7;&#x53D6; x.y &#x4E2D;&#x7684; x ( denom bundle ) &#x83B7;&#x53D6; x.y &#x4E2D;&#x7684; y &#x5199;&#x5B9E;&#x73B0;&#x4E5F;&#x5F88;&#x7B80;&#x5355; &#xFF1A; 123456789; &#x76F4;&#x63A5;&#x6253;&#x5305;(define (make-rat x y) (cons x y)); &#x62FF;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;(define (number bundle) (car bundle)); &#x62FF;&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;(define (number bundle) (cdr bundle)) &#x6211;&#x4EEC;&#x8FD9;&#x6837;&#x5C31;&#x53EF;&#x4EE5;&#x7528;&#x4E0A;&#x9762;&#x7684; API &#x53BB;&#x5B9E;&#x73B0;&#x6709;&#x7406;&#x6570;&#x7684;&#x56DB;&#x5219;&#x8FD0;&#x7B97;&#x4EC0;&#x4E48;&#x7684; &#xFF1A; 123456789(define (add-rat x y) (make-rat (+ (* (numer x) (denom y)) (* (numer y) (denom x))) (* (denom x) (denom y))))(define (sub-rat x y) (make-rat (- (* (numer x) (denom y)) (* (numer y) (denom x))) (* (denom x) (denom y)))); ... &#x8FD8;&#x6709;&#x5F88;&#x591A; &#x8FD9;&#x6837;&#x6211;&#x4EEC;&#x4F1A;&#x53D1;&#x73B0; add-rat &#x3001;sub-rat &#x8FD9;&#x6837;&#x7684;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x8FC7;&#x7A0B;&#x62BD;&#x8C61;&#xFF0C;&#x4EC5;&#x63A5;&#x53D7;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x7684; &#x6709;&#x7406;&#x6570; &#x7C7B;&#x578B; ( &#x5373; cons &#x5305;&#x88F9;&#x7684;&#x7C7B;&#x578B; ) &#x7684;&#x6570;&#x636E;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x6211;&#x4EEC;&#x751A;&#x81F3;&#x5B8C;&#x5168;&#x4E0D;&#x9700;&#x8981;&#x77E5;&#x9053;&#x6709;&#x7406;&#x6570;&#x5230;&#x5E95;&#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x628A;&#x6709;&#x7406;&#x6570;&#x63D0;&#x4EA4;&#x7ED9;&#x8FC7;&#x7A0B;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x62FF;&#x5230;&#x8FD4;&#x56DE;&#x7684;&#x6709;&#x7406;&#x6570;&#x7C7B;&#x578B;&#x7684;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x4E86;&#x3002; &#x6570;&#x636E;&#x62BD;&#x8C61;&#x548C;&#x8FC7;&#x7A0B;&#x62BD;&#x8C61;&#x76F8;&#x8F85;&#x76F8;&#x627F;&#xFF0C;&#x5728;&#x4ED6;&#x4EEC;&#x7684;&#x5E2E;&#x52A9;&#x4E4B;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x4E3A;&#x7CFB;&#x7EDF;&#x589E;&#x52A0;&#x4E86;&#x7C7B;&#x578B;&#xFF0C;&#x8FD9;&#x65E0;&#x7591;&#x662F;&#x4E00;&#x79CD;&#x65B0;&#x7684;&#x8FDB;&#x6B65;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x5236;&#x4F5C;&#x7C7B;&#x578B;&#x4E86;&#x3002; &#x5B9E;&#x73B0;&#x62BD;&#x8C61;&#x5C4F;&#x969C;&#x521A;&#x624D;&#x7684;&#x6709;&#x7406;&#x6570;&#x7A0B;&#x5E8F;&#x53EF;&#x4EE5;&#x4F53;&#x73B0;&#x4E3A;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x5F20;&#x5C42;&#x6B21;&#x56FE;&#xFF1A;&#x3000; &#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x6765;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E0D;&#x540C;&#x5C42;&#x6B21;&#x7684;&#x7A0B;&#x5E8F;&#x6765;&#x8BB2;&#xFF0C;&#x6709;&#x7406;&#x6570;&#x7684;&#x610F;&#x4E49;&#x90FD;&#x662F;&#x4E0D;&#x540C;&#x7684;&#xFF0C;&#x5BF9;&#x4E8E;&#x4F7F;&#x7528;&#x7684;&#x7A0B;&#x5E8F;&#x6765;&#x8BB2;&#xFF0C;&#x6709;&#x7406;&#x6570;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x666E;&#x901A;&#x5143;&#x7D20;&#xFF0C;&#x5230;&#x4E86;&#x9700;&#x8981;&#x8868;&#x793A;&#x6709;&#x7406;&#x6570;&#x7684;&#x5C42;&#x6B21;&#xFF0C;&#x6709;&#x7406;&#x6570;&#x88AB;&#x5206;&#x6210;&#x4E86;&#x5206;&#x5B50;&#x5206;&#x6BCD;&#x6765;&#x4F7F;&#x7528;&#xFF0C;&#x5230;&#x4E86;&#x5E8F;&#x5BF9;&#x8868;&#x8FF0;&#x7684;&#x5C42;&#x6B21;&#xFF0C;&#x6709;&#x7406;&#x6570;&#x662F;&#x901A;&#x8FC7;&#x67D0;&#x79CD;&#x7CFB;&#x7EDF;&#x5B9E;&#x73B0;&#xFF0C;&#x5C06;&#x4E24;&#x4E2A;&#x6574;&#x5F62;&#x6570;&#x636E;&#x7ED1;&#x5B9A;&#x5728;&#x4E00;&#x8D77;&#x7684;&#x3002; &#x5B9E;&#x73B0;&#x8FD9;&#x6837;&#x7684;&#x62BD;&#x8C61;&#x5C4F;&#x969C;&#x6709;&#x4EC0;&#x4E48;&#x597D;&#x5904;&#xFF1F;&#x5305;&#x62EC;&#x4F46;&#x4E0D;&#x9650;&#x4E8E;&#xFF1A; &#x4E0D;&#x540C;&#x7684;&#x90E8;&#x5206;&#x5173;&#x8054;&#x6781;&#x5C11;&#xFF0C;&#x53EF;&#x4EE5;&#x72EC;&#x7ACB;&#x4FEE;&#x6539;&#x548C;&#x589E;&#x6DFB;&#x65B9;&#x6CD5;&#x3002; &#x4FEE;&#x6539;&#x5B9E;&#x73B0;&#x65B9;&#x4FBF;&#xFF0C;&#x51CF;&#x5C11;&#x9519;&#x8BEF;&#x7684;&#x53D1;&#x751F;&#x3002; &#x4FEE;&#x6539;&#x65B9;&#x4FBF;&#x7684;&#x8BDD;&#xFF0C;&#x6211;&#x4EEC;&#x5BF9;&#x8BBE;&#x8BA1;&#x5C31;&#x4E5F;&#x6709;&#x5E2E;&#x52A9;&#xFF0C;&#x4E00;&#x4E9B;&#x51B3;&#x7B56;&#x53EF;&#x4EE5;&#x63A8;&#x8FDF;&#x3002; Tips: &#x4FEE;&#x6539;&#x5B9E;&#x73B0;&#x5982;&#x4F55;&#x4F53;&#x73B0;&#x65B9;&#x4FBF;&#x5462;&#xFF1F; &#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x6362;&#x4E86;&#x5B9E;&#x73B0; &#x5E8F;&#x5BF9; &#x7684; API&#xFF0C;&#x90A3;&#x6211;&#x4EEC;&#x4E5F;&#x53EA;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x6700;&#x4E0B;&#x9762;&#x4E00;&#x5C42;&#x5C31;&#x53EF;&#x4EE5;&#x5168;&#x90E8;&#x4FEE;&#x6539;&#x3002;&#x76F8;&#x53CD;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x6240;&#x6709;&#x7684;&#x65B9;&#x6CD5;&#x90FD;&#x4F9D;&#x8D56;&#x4E8E; &#x6700;&#x4E0B;&#x5C42;&#x5B9E;&#x73B0;&#xFF0C;&#x6BD4;&#x5982;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x7684; add-rat &#x65B9;&#x6CD5;&#x91CC;&#x9762;&#x8FD8;&#x662F;&#x7528;&#x4E86; car &#x3001;cdr &#x8FD9;&#x6837;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x90A3;&#x6211;&#x4EEC;&#x5982;&#x679C;&#x60F3;&#x5F7B;&#x5E95;&#x6539;&#x6389;&#x8FD9;&#x5957; API &#x9700;&#x8981;&#x4FEE;&#x6539;&#x4E0B;&#x65B9;&#x5168;&#x90E8;&#x7684;&#x4E09;&#x5C42;&#x5B9E;&#x73B0;&#x3002; &#x6570;&#x636E;&#x7684;&#x8FC7;&#x7A0B;&#x5B9E;&#x73B0;&#x6211;&#x4EEC;&#x4E4B;&#x524D;&#x4F7F;&#x7528;&#x7684;&#x6709;&#x7406;&#x6570;&#x7A0B;&#x5E8F;&#xFF0C;&#x4EC5;&#x9760;&#x4E86;&#x4E09;&#x4E2A;&#x57FA;&#x672C;&#x8FC7;&#x7A0B;&#x53BB;&#x5B9A;&#x4E49;&#xFF0C;&#x800C;&#x6CA1;&#x6709;&#x770B;&#x5230;&#x5177;&#x4F53;&#x7684;&#x5B9E;&#x73B0;&#x8FC7;&#x7A0B;&#xFF0C;&#x90A3;&#x4E48;&#x201C;&#x6570;&#x636E;&#x5230;&#x5E95;&#x662F;&#x4EC0;&#x4E48;&#x5462;&#x201D;&#xFF1F; &#x6570;&#x636E;&#x7684;&#x62BD;&#x8C61;&#x5B9E;&#x73B0;&#x6709;&#x5F88;&#x591A;&#x79CD;&#x529E;&#x6CD5;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x6311;&#x4E00;&#x79CD;&#x4E0D;&#x4F9D;&#x8D56;&#x4F4E;&#x5C42;&#x5B9E;&#x73B0;&#xFF0C;&#x5C3D;&#x5728; Scheme &#x4E2D;&#x5C31;&#x80FD;&#x5B9E;&#x73B0;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x901A;&#x8FC7;&#x8FC7;&#x7A0B;&#x53BB;&#x5B9E;&#x73B0;&#x6570;&#x636E;&#x62BD;&#x8C61;&#xFF1A; 123456789; cons &#x5B9A;&#x4E49;(define (cons x y) (define (dispatch m) (cond ((= m 0) x) ((= m 1) y) (else (error &quot;Argument error &quot;))))); car / cdr &#x5B9A;&#x4E49;(define (car z) (z 0))(define (cdr z) (z 1)) &#x5F53;&#x7136; Scheme &#x4E2D;&#x7684;&#x6570;&#x636E;&#x5B9E;&#x73B0;&#x80AF;&#x5B9A;&#x4E0D;&#x662F;&#x8FD9;&#x4E48;&#x505A;&#x7684;&#xFF0C;&#x4E3A;&#x4E86;&#x6548;&#x7387;&#x5F88;&#x5B9A;&#x662F;&#x901A;&#x8FC7;&#x5E95;&#x5C42;&#x5B9E;&#x73B0;&#x7684;&#x3002;&#x4F46;&#x662F;&#x4ECE;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x91CC;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x56DE;&#x987E;&#x5728;&#x672C;&#x4E66;&#x5F00;&#x5934;&#x7684;&#x4E00;&#x53E5;&#x8BDD;&#xFF0C;&#x8FC7;&#x7A0B;&#x548C;&#x6570;&#x636E;&#x4E4B;&#x95F4;&#x6CA1;&#x6709;&#x7EDD;&#x5BF9;&#x754C;&#x9650;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x770B;&#x5230;&#x4E86;&#x8FC7;&#x7A0B;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8868;&#x793A;&#x6570;&#x636E;&#x7684;&#x80FD;&#x529B;&#x3002; Tips : Church encoding &#x4E18;&#x5947;&#x8BA1;&#x6570; &#x770B;&#x8D77;&#x6765;&#x5F88;&#x9B3C;&#x755C;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5B8C;&#x5168;&#x901A;&#x8FC7; $ \\lambda $ &#x6F14;&#x7B97;&#x53BB;&#x5B9E;&#x73B0;&#x5168;&#x90E8;&#x7684;&#x6574;&#x6570;&#x8FD0;&#x7B97;&#x7CFB;&#x7EDF;&#x3002; &#x6BD4;&#x5982;&#x8BF4;&#x50CF;&#x4E0B;&#x56FE;&#x4E00;&#x6837;&#xFF0C;&#x6211;&#x4EEC;&#x7528; lambda &#x7684;&#x5C42;&#x6570;&#x53BB;&#x8868;&#x8FBE;&#x6570;&#x5B57;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x6765;&#x5B9E;&#x73B0;&#x8FD0;&#x7B97;&#x3002; Test 2.6 &#x5C31;&#x548C;&#x8FD9;&#x4E2A;&#x6709;&#x5173;&#x3002; &#x5C42;&#x6B21;&#x62BD;&#x8C61;&#x6211;&#x4EEC;&#x6709;&#x4E86;&#x5E8F;&#x5BF9;&#x7684;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#xFF0C;&#x4F46;&#x4E5F;&#x5E76;&#x4E0D;&#x662F;&#x8BF4;&#x6211;&#x4EEC;&#x5C31;&#x53EA;&#x80FD;&#x628A;&#x4E24;&#x4E2A;&#x6570;&#x636E;&#x6346;&#x7ED1;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x6211;&#x4EEC;&#x7684; Bundle &#x4E5F;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x5E8F;&#x5BF9;&#x7684;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#xFF0C;&#x8FD9;&#x6837;&#x5B50;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5C42;&#x6B21;&#x7ED3;&#x6784;&#x53BB;&#x5B9E;&#x73B0;&#x7EBF;&#x6027;&#x7ED3;&#x6784;&#xFF0C;&#x6211;&#x4EEC;&#x901A;&#x5E38;&#x53EF;&#x4EE5;&#x628A;&#x5B83;&#x4EEC;&#x63CF;&#x7ED8;&#x6210;&#x4E00;&#x4E2A;&#x76D2;&#x56FE;&#x7684;&#x5F62;&#x5F0F;&#xFF1A; &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8BF4;&#x8FD9;&#x79CD;&#x7279;&#x6027;&#x662F;&#x4E00;&#x79CD;&#x95ED;&#x5305;&#x6027;&#x8D28;&#x3002; Tips &#x95ED;&#x5305;&#x7684;&#x542B;&#x4E49;&#xFF1A; &#x4E66;&#x91CC;&#x9762;&#x7684;&#x610F;&#x601D;&#x5E94;&#x8BE5;&#x662F;&#x8BF4;&#x7EC4;&#x5408;&#x6570;&#x636E;&#x5BF9;&#x8C61;&#x7684;&#x7ED3;&#x679C;&#x4ECD;&#x80FD;&#x7EE7;&#x7EED;&#x7EC4;&#x5408;&#xFF0C;&#x8FD9;&#x662F;&#x7B26;&#x5408;&#x6570;&#x5B66;&#x542B;&#x4E49;&#x7684;&#x610F;&#x4E49;( list &#x4E2D;&#x7684;&#x5143;&#x7D20;&#x5728;&#x8FD0;&#x7B97;&#x4E0B;&#x5C01;&#x95ED;) Closure &#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x542B;&#x4E49;&#xFF0C;&#x662F;&#x6307;&#x5E26;&#x6709;&#x81EA;&#x7531;&#x53D8;&#x91CF;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;Closure Function &#x548C;&#x666E;&#x901A;&#x51FD;&#x6570;&#x4E00;&#x6837;&#x62E5;&#x6709;&#x4F5C;&#x7528;&#x5E76;&#x4E14;&#x5728;&#x4F20;&#x9012;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x4ECD;&#x80FD;&#x643A;&#x5E26;&#x8FD9;&#x4E9B;&#x81EA;&#x7531;&#x53D8;&#x5143;&#x3002; &#x5E8F;&#x5217;&#x7684;&#x5F62;&#x6210;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x6211;&#x4EEC;&#x7684; Pair &#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x7ED3;&#x6210;&#x94FE;&#x7684;&#x5F62;&#x5F0F;&#x5F62;&#x6210;&#x4E00;&#x4E2A;&#x7EBF;&#x6027;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x8FD9;&#x770B;&#x8D77;&#x6765;&#x548C;&#x6211;&#x4EEC;&#x6240;&#x77E5;&#x9053;&#x7684;&#x7EBF;&#x6027;&#x8868;&#x7684;&#x5B9E;&#x73B0;&#x5982;&#x51FA;&#x4E00;&#x8F99;&#xFF0C;&#x901A;&#x8FC7;&#x628A; cons &#x8FC7;&#x7A0B;&#x7684;&#x5C42;&#x5C42;&#x5D4C;&#x5957;&#x6211;&#x4EEC;&#x5F97;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x7EBF;&#x6027;&#x8868;&#xFF1A; 1234567; &#x901A;&#x8FC7;&#x8FD9;&#x6837;&#x7684;&#x65B9;&#x5F0F;&#x7ED3;&#x6210;&#x94FE;(cons 1 (cons 2 (cons 3 (cons nil)))); &#x5F53;&#x7136;&#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528; list API(list 1 2 3) &#x5728;&#x7ED3;&#x6210;&#x4E86;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#x4E4B;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x8FC7;&#x7A0B; car &#x548C; cdr &#x90FD;&#x6709;&#x4E86;&#x65B0;&#x7684;&#x610F;&#x4E49;&#xFF0C;car &#x53EF;&#x4EE5;&#x53D6;&#x51FA; list &#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C; &#x800C; cdr &#x8FD4;&#x56DE;&#x7684;&#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4EE5;&#x5916;&#x7684;&#x5269;&#x4F59;&#x5143;&#x7D20;&#x6240;&#x5F62;&#x6210;&#x7684;&#x5217;&#x8868;&#x3002; &#x6709;&#x4E86;&#x6570;&#x636E;&#x8868;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x5F88;&#x591A;&#x5E38;&#x89C1;&#x7684;&#x8868;&#x64CD;&#x4F5C;&#x4E86;&#xFF0C;&#x6BD4;&#x5982;&#xFF1A; 12345678910(define (length items) (if (null? items) 0 (+ 1 (length (cdr items))))) ; &#x6C42;&#x8868;&#x7684;&#x957F;&#x5EA6;(define (append list1 list2) (if (null? list1) list2 (cons (car list1) (append (cdr list1) list2)))); &#x5408;&#x5E76;&#x4E24;&#x4E2A;&#x6570;&#x636E;&#x8868; Tips&#xFF1A;&#x6570;&#x636E;&#x8868;&#x5728;&#x73B0;&#x5728;&#x6D41;&#x884C;&#x8BED;&#x8A00;&#x4E2D;&#x662F;&#x5E38;&#x89C1;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x65E0;&#x8BBA;&#x662F; CPP STL &#x91CC;&#x9762;&#x7684; list &#x8FD8;&#x662F; Java &#x4E2D;&#x7684; List &#x7CFB;&#x5217;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x90FD;&#x662F;&#x4ECE; Lisp &#x7684;&#x8868;&#x4E2D;&#x5438;&#x53D6;&#x4E86;&#x5F88;&#x591A;&#x7684;&#x7279;&#x6027;&#x3002; &#x9AD8;&#x9636;&#x64CD;&#x4F5C;&#x548C;&#x5C42;&#x6B21;&#x7ED3;&#x6784;&#x4E00;&#x4E9B;&#x73B0;&#x4EE3;&#x7684;&#x3001;&#x652F;&#x6301;&#x51FD;&#x6570;&#x5F0F;&#x7684;&#x8BED;&#x8A00;&#x90FD;&#x63D0;&#x4F9B;&#x4E86;&#x7C7B;&#x4F3C; map &#x3001;reduce &#x3001;filter &#x8FD9;&#x4E9B;&#x9AD8;&#x9636;&#x51FD;&#x6570;&#x7684;&#x652F;&#x6301;&#xFF0C;&#x90FD;&#x662F;&#x5B9E;&#x73B0;&#x4E86;&#x4E00;&#x79CD;&#x6620;&#x5C04;&#x7684;&#x64CD;&#x4F5C;&#x3002;&#x7528;&#x5176;&#x4E2D;&#x7684; map &#x4E3E;&#x4F8B;&#x5B50;&#xFF0C;&#x5B83;&#x7684;&#x5B9E;&#x8D28;&#x662F;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x5BF9;&#x6240;&#x6709;&#x5143;&#x7D20;&#x64CD;&#x4F5C;&#x7684;&#x6620;&#x5C04;&#xFF0C;&#x6240;&#x5F97;&#x5230;&#x7684;&#x5E8F;&#x5217;&#x987A;&#x5E8F;&#x4E0D;&#x53D8;&#x3002; &#x6BD4;&#x5982;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5199;&#x4E00;&#x4E2A;&#x5BF9;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x7B49;&#x6BD4;&#x4F8B;&#x653E;&#x5927;&#x7684;&#x4F8B;&#x5B50;&#xFF1A; 12345678(define (scale-list items factor) (if (null? items) nil (cons (* (car items) factor) (scale-list (cdr items) factor))))(scale-list (list 1 2 3 4 5) 10)(10 20 30 40 50) &#x5982;&#x679C;&#x6211;&#x4EEC;&#x5C06;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x5728;&#x63D0;&#x9AD8;&#x4E00;&#x5C42;&#x62BD;&#x8C61;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x4E86; map &#x7684;&#x5B9A;&#x4E49;&#x4E86;&#xFF1A; 123456789(define (map proc items) (if (null? items) nil (cons (proc (car items)) (map proc (cdr items))))); &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F88;&#x65B9;&#x4FBF;&#x7684;&#x7528; map &#x53BB;&#x5B9E;&#x73B0; scale-list(map lambda(x) (* x 10) (list 1 2 3 4 5))(10 20 30 40 50) map &#x64CD;&#x4F5C;&#x662F;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x7684;&#x91CC;&#x7A0B;&#x7891;&#xFF0C;&#x8FD9;&#x8868;&#x660E;&#x4E86;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8131;&#x79BB;&#x5BF9;&#x5E8F;&#x5217;&#x7684;&#x5177;&#x4F53;&#x64CD;&#x4F5C;&#xFF0C;&#x800C;&#x4E13;&#x6CE8;&#x4E8E;&#x5BF9;&#x5143;&#x7D20;&#x7684;&#x64CD;&#x4F5C;&#x4E0A;&#x9762;&#x3002;&#x6620;&#x5C04;&#x7684;&#x5C42;&#x6B21;&#x4ECE;&#x5143;&#x7D20;&#x7684;&#x7B49;&#x7EA7;&#x63D0;&#x5347;&#x5230;&#x4E86;&#x8868;&#x5C42;&#x3002; &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x672C;&#x8EAB;&#x662F;&#x5143;&#x7D20;&#x7684;&#x8282;&#x70B9;&#x4E5F;&#x66FF;&#x6362;&#x6210; list &#x53BB;&#x63A8;&#x5E7F;&#x8FD9;&#x4E2A;&#x6620;&#x5C04;&#x65B9;&#x5F0F;&#xFF0C;&#x90A3;&#x7EBF;&#x6027;&#x7684;&#x8868;&#x5C31;&#x53D8;&#x6210;&#x4E86;&#x7ACB;&#x4F53;&#x7684;&#x6811;&#xFF1A; &#x6811;&#x5F62;&#x7ED3;&#x6784;&#x7684;&#x4FBF;&#x5229;&#x5C31;&#x5F88;&#x6709;&#x8FF9;&#x53EF;&#x5FAA;&#x4E86;&#xFF0C;&#x53EF;&#x4EE5;&#x81EA;&#x7136;&#x5730;&#x7528;&#x9012;&#x5F52;&#x65B9;&#x5F0F;&#x5904;&#x7406;&#x3002;&#x4ECD;&#x7136;&#x4F7F;&#x7528;&#x4E4B;&#x524D;&#x5BF9;&#x5E8F;&#x5217;&#x7684;&#x4F8B;&#x5B50;&#xFF08;&#x5BF9;&#x5E8F;&#x5217;&#x8FDB;&#x884C;&#x7B49;&#x6BD4;&#x4F8B;&#x653E;&#x7F29;&#xFF09;&#xFF0C;&#x76F8;&#x5E94;&#x7684;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5199;&#x51FA;&#x76F8;&#x5E94;&#x7684; Scheme &#x4EE3;&#x7801;&#xFF1A; 12345678(define (scale-tree tree factor) (cond ((null? tree) nil) ((not (pair? tree)) (* tree factor)) (else (cons (scale-tree (car tree) factor) (scale-tree (cdr tree) factor)))))(scale-tree (list 1 (list 2 (list 3 4) 5) (list 6 7)) 10)(10 (20 (30 40) 50) (60 70)) &#x5F53;&#x7136;&#x672C;&#x8EAB;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; map &#x8FDB;&#x884C;&#x62BD;&#x8C61;&#xFF1A; 123456(define (scale-tree tree factor) (map (lambda (sub-tree) (if (pair? sub-tree) (scale-tree sub-tree factor) (* sub-tree factor))) tree)) &#x6811;&#x672C;&#x8EAB;&#x4E5F;&#x53EF;&#x4EE5;&#x770B;&#x505A;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; map &#x6620;&#x5C04;&#x5230;&#x5B50;&#x6811;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5206;&#x522B;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x8FDB;&#x884C;&#x5904;&#x7406;&#xFF0C;&#x6709;&#x5B50;&#x6811;&#x7684;&#x5411;&#x4E0B;&#x7EE7;&#x7EED;&#x9012;&#x5F52;&#xFF0C;&#x53F6;&#x5B50;&#x5C31;&#x7FFB;&#x500D;&#x3002; &#x5E8F;&#x5217;&#x64CD;&#x4F5C;&#x6211;&#x4EEC;&#x5148;&#x4E3E;&#x4E24;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; &#x8FD9;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#x770B;&#x8D77;&#x6765;&#x6709;&#x5F88;&#x5927;&#x7684;&#x4E0D;&#x540C;&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x5B9E;&#x4E24;&#x4E2A;&#x8FC7;&#x7A0B;&#x672C;&#x8EAB;&#x90FD;&#x6709;&#x4E00;&#x4E9B;&#x901A;&#x6027;&#xFF1A; &#x8868;&#x73B0;&#xFF0F;&#x7C7B;&#x578B; &#x679A;&#x4E3E; &#x7D2F;&#x79EF; &#x8FC7;&#x6EE4; &#x9009;&#x51FA;&#x7684;&#x6570;&#x64CD;&#x4F5C; &#x6C42;&#x5E73;&#x65B9;&#x548C; &#x679A;&#x4E3E;&#x6240;&#x6709;&#x7684;&#x6811;&#x53F6; &#x7D2F;&#x8BA1;&#x6C42;&#x5E73;&#x65B9;&#x548C; &#x8FC7;&#x6EE4;&#x5947;&#x6570; &#x5E73;&#x65B9;&#x548C; Fib &#x679A;&#x4E3E;&#x6240;&#x6709;&#x7684; Fib Fib &#x6C42;&#x548C; &#x8FC7;&#x6EE4;&#x5076;&#x6570; k &lt;=n &#x6C42; Fib(k) &#x53EF;&#x4EE5;&#x753B;&#x6210;&#x8FD9;&#x6837;&#x7684;&#x6D41;&#x7A0B;&#x56FE;&#xFF1A; &#x4E0A;&#x56FE;&#x8868;&#x73B0;&#x51FA;&#x4E86;&#x4E00;&#x4E2A;&#x4FE1;&#x606F;&#x6D41;&#x7684;&#x4F20;&#x9012;&#x8FC7;&#x7A0B;&#xFF0C;&#x5728;&#x7A0B;&#x5E8F;&#x4E2D;&#x8868;&#x73B0;&#x51FA;&#x8FD9;&#x4E2A;&#x4FE1;&#x606F;&#x7684;&#x4F20;&#x9012;&#x8FC7;&#x7A0B;&#xFF0C;&#x5C31;&#x80FD;&#x8BA9;&#x6570;&#x636E;&#x64CD;&#x4F5C;&#x66F4;&#x4E3A;&#x6E05;&#x6670;&#x3002; Tips: &#x94FE;&#x5F0F;&#x8C03;&#x7528;&#x548C;&#x6D41;&#x5F0F; API &#x4E8B;&#x5B9E;&#x4E0A;&#x94FE;&#x5F0F;&#x8C03;&#x7528;&#x548C;&#x6D41;&#x5F0F; API &#x5728;&#x73B0;&#x4EE3;&#x7684;&#x7F16;&#x7A0B;&#x4E2D;&#x8D77;&#x5230;&#x5F88;&#x5927;&#x7684;&#x4F5C;&#x7528;&#x3002;&#x65E0;&#x8BBA;&#x662F; jQuery &#x8FD8;&#x662F; Reactive &#x7CFB;&#x7684;&#x5404;&#x7C7B; &#x7A0B;&#x5E8F;&#x5E93;&#xFF0C;&#x90FD;&#x4F7F;&#x7528;&#x4E86;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x53BB;&#x8BBE;&#x8BA1; API&#x3002; Tips: &#x4FE1;&#x606F;&#x6D41;&#x7ED3;&#x6784; &#x9700;&#x8981;&#x6CE8;&#x610F;&#x8868;&#x793A;&#x548C;&#x5904;&#x7406;&#x4ECE;&#x4E00;&#x4E2A;&#x6B65;&#x9AA4;&#x5411;&#x4E0B;&#x4E00;&#x6B65;&#x9AA4;&#x6D41;&#x52A8;&#x7684;&#x4FE1;&#x606F; &#x8868;&#x9002;&#x5408;&#x8868;&#x793A;&#x548C;&#x4F20;&#x9012;&#x8FD9;&#x4E9B;&#x4FE1;&#x606F;&#xFF0C;&#x901A;&#x8FC7;&#x8868;&#x64CD;&#x4F5C;&#x5B9E;&#x73B0;&#x5404;&#x6B65;&#x5904;&#x7406; filterFilter &#x8FC7;&#x6EE4;&#x5668;&#x7684;&#x5B9E;&#x73B0;&#x601D;&#x8DEF;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x9012;&#x5F52;&#x53D1;&#x73B0;&#x4E0D;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x7684;&#x8DF3;&#x8FC7;&#xFF0C;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x7684;&#x7EE7;&#x7EED;&#xFF0C;&#x6700;&#x540E;&#x91CD;&#x6574;&#x6210;&#x4E00;&#x4E2A;&#x8868;&#x3002; 123456(define (filter predicate sequence) (cond ((null? sequence) nil) ; &#x4E0D;&#x6EE1;&#x8DB3;&#x7684;&#x4E22;&#x6389; ((predicate (car sequence)) (cons (car sequence) ; &#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x7684;&#x4FDD;&#x7559;&#x7ED1;&#x5B9A;&#x5728;&#x4E00;&#x8D77; (filter predicate (cdr sequence)))) (else (filter predicate (cdr sequence))))) accumulate&#x7D2F;&#x52A0;&#x5668;&#x4E4B;&#x524D;&#x5DF2;&#x7ECF;&#x6709;&#x8FC7;&#x4ECB;&#x7ECD;&#x4E86;&#xFF0C;&#x901A;&#x8FC7;&#x4F20;&#x5165;&#x64CD;&#x4F5C;&#x7B26;&#xFF0C;&#x9012;&#x5F52;&#x4F7F;&#x7528;&#x64CD;&#x4F5C;&#x7B26;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;&#x3002; 12345(define (accumulate op initial sequence) (if (null? sequence) initial (op (car sequence) (accumulate op initial (cdr sequence))))) enumerate&#x6811;&#x548C;&#x5E8F;&#x5217;&#x7684;&#x679A;&#x4E3E;&#x4E4B;&#x524D;&#x90FD;&#x5DF2;&#x7ECF;&#x51FA;&#x73B0;&#x8FC7;&#x4E86;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x3002; &#x91CD;&#x6574;&#x5E8F;&#x5217;&#x91CD;&#x6574;&#x8FC7;&#x7684;&#x5E8F;&#x5217;&#x64CD;&#x4F5C;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4EE5;&#x4E0A;&#x63D0;&#x4F9B;&#x7684; API &#x8FDB;&#x884C;&#x6574;&#x7406;&#xFF1A; 12345(define (sum-odd-squares tree) (accumulate + 0 (map square (filter odd? (enumerate-tree tree)))))","categories":[],"tags":[{"name":"SICP","slug":"SICP","permalink":"https://lfkdsk.github.io/tags/SICP/"}]},{"title":"推荐一篇有趣的论文","slug":"recommand-i-paper","date":"2017-03-10T09:05:28.000Z","updated":"2017-03-10T09:07:27.000Z","comments":true,"path":"2017/03/10/recommand-i-paper/","link":"","permalink":"https://lfkdsk.github.io/2017/03/10/recommand-i-paper/","excerpt":"","text":"","categories":[],"tags":[{"name":"Paper","slug":"Paper","permalink":"https://lfkdsk.github.io/tags/Paper/"}]},{"title":"0x01：SICP 的魔法 - 过程的求值计算和高阶过程","slug":"learn-sicp-1","date":"2017-02-27T04:01:15.000Z","updated":"2017-03-18T08:47:23.000Z","comments":true,"path":"2017/02/27/learn-sicp-1/","link":"","permalink":"https://lfkdsk.github.io/2017/02/27/learn-sicp-1/","excerpt":"","text":"&#x8FC7;&#x7A0B;&#x7684;&#x6C42;&#x503C;&#x8BA1;&#x7B97;&#x8FD9;&#x91CC;&#x9762;&#x6211;&#x4EEC;&#x5148;&#x6765;&#x4ECB;&#x7ECD;&#x4E00;&#x79CD;&#x6700;&#x4E3A;&#x7B80;&#x5355;&#x3001;&#x901A;&#x7528;&#x7684;&#x6C42;&#x503C;&#x6A21;&#x578B;&#xFF0C;&#x4EE3;&#x6362;&#x6A21;&#x578B;&#x5E76;&#x4E0D;&#x80FD;&#x6982;&#x62EC;&#x5168;&#x90E8;&#x7684;&#x6C42;&#x503C;&#x65B9;&#x5F0F;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x5148;&#x4ECE;&#x8FD9;&#x4E2A;&#x5F00;&#x59CB;&#x3002; &#x4EE3;&#x6362;&#x6A21;&#x578B;&#x901A;&#x7528;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x8BA1;&#x7B97;&#x6A21;&#x5F0F;&#xFF0C;&#x63CF;&#x8FF0;&#x8D77;&#x6765;&#x5176;&#x5B9E;&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF0C;&#x5148;&#x6C42;&#x51FA;&#x5404;&#x5B50;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;&#xFF0C;&#x627E;&#x5230;&#x8981;&#x8C03;&#x7528;&#x7684;&#x8FC7;&#x7A0B;&#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x7528;&#x6C42;&#x51FA;&#x7684;&#x5B9E;&#x9645;&#x53C2;&#x6570;&#x4EE3;&#x6362;&#x8FC7;&#x7A0B;&#x4F53;&#x91CC;&#x7684;&#x5F62;&#x5F0F;&#x53C2;&#x6570;&#xFF0C;&#x518D;&#x5BF9;&#x8FC7;&#x7A0B;&#x4F53;&#x8FDB;&#x884C;&#x6C42;&#x503C;&#xFF0C;&#x672C;&#x8D28;&#x4E0A;&#x4E00;&#x79CD;&#x4F7F;&#x7528;&#x7B49;&#x4EF7;&#x6027;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x62C6;&#x5206;&#x673A;&#x5236;&#xFF0C;&#x6BD4;&#x5982;&#x4E0B;&#x4F8B;&#xFF0C;&#x662F;&#x5BF9;&#x4E00;&#x4E2A;&#x5E73;&#x65B9;&#x548C;&#x51FD;&#x6570;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;&#x7684;&#x8BE6;&#x7EC6;&#x6B65;&#x9AA4;&#xFF1A; 12345678910(define (sum-of-squares x y) (+ (square x) (square y))); sum-of-squares &#x6C42;&#x4E24;&#x4E2A;&#x6570;&#x7684;&#x5E73;&#x65B9;&#x548C;(define (f x) (sum-of-squares (+ x 1) (+ x 2)))(f 5) (sum-of-squares (+ 5 1) (* 5 2)) ; &#x6CE8;&#x610F;&#x8FD9;&#x4E24;&#x884C;&#xFF0C;&#x9996;&#x5148;&#x7B97;&#x51FA;&#x6765;&#x5F62;&#x53C2;(+ (square 6) (square 10)) (+ (* 6 6) (* 10 10))(+ 36 100)136 Tips: &#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x6362;&#x65B9;&#x5F0F;&#x53C8;&#x88AB;&#x79F0;&#x4F5C;&#x5E94;&#x7528;&#x5E8F;&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#xFF0C;&#x8FD9;&#x4E5F;&#x662F; Scheme &#x89E3;&#x91CA;&#x5668;&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#xFF0C;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x79CD;&#x88AB;&#x79F0;&#x4F5C;&#x6B63;&#x5219;&#x5E8F;&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#xFF0C;&#x6B63;&#x5219;&#x6027;&#x548C;&#x4E0A;&#x9762;&#x4E0D;&#x4E00;&#x6837;&#x7684;&#x5730;&#x65B9;&#x5728;&#x4E8E;&#xFF0C;&#x5B83;&#x4E0D;&#x4F1A;&#x5148;&#x8BA1;&#x7B97;&#x51FA;&#x8C03;&#x7528;&#x8FC7;&#x7A0B;&#x7684;&#x5F62;&#x53C2;&#xFF0C;&#x53CD;&#x5012;&#x662F;&#x4E00;&#x5B9A;&#x8981;&#x628A;&#x6574;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x6700;&#x5C0F;&#x5316;&#x5230;&#x6240;&#x6709;&#x7684;&#x4E1C;&#x897F;&#x90FD;&#x80FD;&#x76F4;&#x63A5;&#x8BA1;&#x7B97;&#x7684;&#x7A0B;&#x5E8F;(&#x644A;&#x5F00;&#x4E86;&#x7684;&#x611F;&#x89C9;): 12345678&gt; (f 5) &gt; (sum-of-squares (+ 5 1) (* 5 2))&gt; (+ (square (+ 5 1)) (square (* 5 2)) ); &#x6CE8;&#x610F;&#x8FD9;&#x4E24;&#x884C;&#x8FD9;&#x91CC;&#x6CA1;&#x5F80;&#x4E0B;&#x8BA1;&#x7B97;&#x5F62;&#x53C2;&gt; (+ (* (+ 5 1) (+ 5 1)) (* (* 5 2) (* 5 2)))&gt; (+ (* 6 6) (* 10 10)) ; &#x53CD;&#x5012;&#x662F;&#x90FD;&#x644A;&#x5F00;&#x4E86;&#x624D;&#x5F00;&#x59CB;&#x8FDB;&#x884C;&#x89C4;&#x7EA6;&gt; (+ 36 100)&gt; 136&gt; &gt; PS: &#x6709;&#x4E2A;&#x5F88;&#x7B80;&#x5355;&#x7684;Demo&#x80FD;&#x8BC1;&#x660E;&#x6240;&#x7528;&#x7684;&#x89E3;&#x91CA;&#x5668;&#x5230;&#x5E95;&#x7528;&#x4E86;&#x4EC0;&#x4E48;&#x8BA1;&#x7B97;&#x987A;&#x5E8F;: 123456&gt; (define (p) (p))&gt; (define (test x y)&gt; (if (= x 0)&gt; 0&gt; y))&gt; &gt; &#x5927;&#x5BB6;&#x53EF;&#x4EE5;&#x60F3;&#x60F3;&#x6B63;&#x5219;&#x5E8F;&#x548C;&#x5E94;&#x7528;&#x5E8F;&#x5206;&#x522B;&#x4F1A;&#x6709;&#x4EC0;&#x4E48;&#x7ED3;&#x679C;&#x3002; &#x8FED;&#x4EE3;&#x4E0E;&#x9012;&#x5F52;&#x6211;&#x4EEC;&#x9996;&#x5148;&#x4ECE;&#x4E24;&#x4E2A;&#x7B80;&#x5355;&#x4F8B;&#x5B50;&#x5F00;&#x59CB;&#xFF1A; &#x56FE;&#x4E2D;&#x6709;&#x4E24;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x8BA1;&#x7B97;&#x4E0A;&#x662F;&#x7B49;&#x4EF7;&#x7684;&#x90FD;&#x662F;&#x5BF9;a&#x3001;b&#x8FDB;&#x884C;&#x76F8;&#x52A0;&#x7684;&#x7B49;&#x4EF7;&#x578B;(&#x8FD9;&#x91CC;&#x4F7F;&#x7528;plus&#x662F;&#x4E3A;&#x4E86;&#x533A;&#x522B;&#x57FA;&#x672C;&#x7B26;&#x53F7;)&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x6D3B;&#x5B66;&#x6D3B;&#x7528;&#x4E00;&#x4E0B;&#x521A;&#x624D;&#x5B66;&#x8FC7;&#x7684;&#x4EE3;&#x6362;&#x6A21;&#x578B;&#x7684;&#x77E5;&#x8BC6;&#x5C31;&#x4F1A;&#x53D1;&#x73B0;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x8FC7;&#x7A0B;&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#x662F;&#x4E0D;&#x540C;&#x7684;&#xFF1A; &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x629B;&#x5F00;&#x522B;&#x7684;&#x6211;&#x4EEC;&#x5F88;&#x660E;&#x663E;&#x5C31;&#x80FD;&#x53D1;&#x73B0;&#xFF0C;&#x8FD9;&#x4E24;&#x79CD;&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#x7684;&#x56FE;&#x5F62;&#x957F;&#x5F97;&#x5C31;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x65B9;&#x6848;1&#x91CC;&#x9762;&#x5C42;&#x5C42;&#x4EE3;&#x6362;&#x4E4B;&#x540E;&#x8868;&#x8FBE;&#x5F0F;&#x8D8A;&#x6765;&#x8D8A;&#x957F;&#xFF0C;&#x6700;&#x540E;&#x5F00;&#x59CB;&#x89C4;&#x7EA6;&#x3002;&#x4F46;&#x662F;&#x65B9;&#x6848;2&#x5C31;&#x6CA1;&#x6709;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#xFF0C;&#x6BCF;&#x6B21;&#x90FD;&#x662F;&#x5355;&#x4E00;&#x7684;&#x4E00;&#x6B65;&#x5C42;&#x5C42;&#x8C03;&#x7528;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x8BDD;&#x5B9E;&#x73B0;&#x8FD9;&#x4E24;&#x79CD;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5C31;&#x5929;&#x5DEE;&#x5730;&#x522B;&#xFF0C;&#x65B9;&#x6848;1&#x662F;&#x4E00;&#x4E2A;O(n)&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#xFF0C;&#x5C42;&#x5C42;&#x9012;&#x5F52;&#x7684;&#x5C55;&#x5F00;&#x3002;&#x800C;&#x65B9;&#x6848;2&#x7684;&#x8C03;&#x7528;&#x662F;&#x7EBF;&#x6027;&#x6B21;&#x6570;&#x7684;&#x8FED;&#x4EE3;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5C31;&#x662F;O(1)&#x7684;&#x3002; &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x5C31;&#x79F0;&#x7B2C;&#x4E00;&#x79CD;&#x6C42;&#x503C;&#x65B9;&#x5F0F;&#x662F;&#x7EBF;&#x6027;&#x9012;&#x5F52;&#xFF0C;&#x7B2C;&#x4E8C;&#x79CD;&#x65B9;&#x5F0F;&#x662F;&#x7EBF;&#x6027;&#x8FED;&#x4EE3;&#x3002; Tips: &#x8FD9;&#x4E00;&#x8282;&#x7684;&#x9012;&#x5F52;&#x548C;&#x8FED;&#x4EE3;&#x548C;&#x6211;&#x4EEC;&#x5728;&#x5176;&#x4F59;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x91CC;&#x5B66;&#x4E60;&#x7684;&#x6709;&#x6240;&#x533A;&#x522B;&#x3002;&#x8FD9;&#x91CC;&#x9762;&#x8BF4;&#x7684;&#x662F;&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#xFF0C;&#x800C;&#x975E;&#x8BED;&#x6CD5;&#x5B9E;&#x73B0;&#xFF0C;&#x5982;&#x679C;&#x4ECE;&#x8BED;&#x6CD5;&#x89D2;&#x5EA6;&#x6765;&#x8BB2;&#x8FD9;&#x4E24;&#x4E2A;&#x90FD;&#x8C03;&#x7528;&#x4E86;&#x81EA;&#x5DF1;&#x90FD;&#x662F;&#x8BED;&#x6CD5;&#x9012;&#x5F52;&#x3002;&#x8BA1;&#x7B97;&#x7684;&#x7EBF;&#x6027;&#x9012;&#x5F52;&#x7684;&#x4F4E;&#x6548;&#x8FD8;&#x4F53;&#x73B0;&#x5728;&#x4E2D;&#x95F4;&#x7ED3;&#x679C;&#x5B58;&#x50A8;&#x9700;&#x8981;&#x7A7A;&#x95F4;&#xFF0C;&#x6574;&#x4F53;&#x5F62;&#x6210;&#x4E00;&#x4E2A;&#x8F83;&#x5927;&#x7684;&#x8FD0;&#x884C;&#x6808;&#x3002;&#x800C;&#x7EBF;&#x6027;&#x8FED;&#x4EE3;&#x7684;&#x4E2D;&#x95F4;&#x7ED3;&#x679C;&#x53EA;&#x662F;&#x4E2D;&#x95F4;&#x7ED3;&#x679C;&#x7684;&#x6570;&#x503C;&#x548C;&#x8BA1;&#x6570;&#x5668;&#x6570;&#x503C;&#xFF0C;&#x5F53;&#x8BA1;&#x7B97;&#x673A;&#x6389;&#x7535;&#x540E;&#x4E5F;&#x5BB9;&#x6613;&#x6062;&#x590D;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x8BA1;&#x7B97;&#x4E2D;&#x4EFB;&#x4F55;&#x4E00;&#x6B65;&#x4E2D;&#x65AD;&#x548C;&#x91CD;&#x542F;&#x3002; &#x6811;&#x5F62;&#x7ED3;&#x6784;&#x8BF4;&#x8D77;&#x6811;&#x5F62;&#x7ED3;&#x6784;&#x6211;&#x4EEC;&#x5148;&#x4E3E;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;&#xFF1A; Fib(n) = \\begin{cases} 0, & \\text{n = 0 } \\\\\\\\ n, & \\text{n = 1} \\\\\\\\ Fib(n-1) + Fib(n-2), & \\text{others} \\end{cases}&#x8FD9;&#x662F;&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;&#x7684;&#x89C4;&#x5219;&#x5B9A;&#x4E49;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x7ECF;&#x5E38;&#x7528;&#x8FD9;&#x4E2A;&#x65B9;&#x5F0F;&#x53BB;&#x4F7F;&#x7528;&#x9012;&#x5F52;&#x7F16;&#x5199;&#x4EE3;&#x7801;&#xFF0C;&#x7B80;&#x5355;&#x7684;&#x5199;&#x6210; Scheme &#x7684;&#x6837;&#x5B50;&#x5462;&#x5E94;&#x8BE5;&#x5C31;&#x662F;&#x4E0B;&#x9762;&#x8FD9;&#x4E2A;&#x6837;&#x5B50;: 1234(define (Fib x) (if (&lt; N 2) N (+ (Fib (- N 1)) (Fib (- N 2)))) &#x6309;&#x7167;&#x6211;&#x4EEC;&#x4E4B;&#x524D;&#x7684;&#x6B65;&#x9AA4;&#x53BB;&#x5206;&#x6790;&#x6574;&#x4E2A;&#x8FC7;&#x7A0B;&#x7684;&#x6C42;&#x503C;&#x8FC7;&#x7A0B;&#xFF0C;&#x80FD;&#x753B;&#x51FA;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x4E2A;&#x6811;&#x5F62;&#x7684;&#x56FE;&#xFF1A; &#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x662F;&#x975E;&#x5E38;&#x4F4E;&#x6548;&#x7684;&#xFF0C;&#x4ECE;&#x56FE;&#x4E2D;&#x6709;&#x975E;&#x5E38;&#x591A;&#x91CD;&#x590D;&#x7684;&#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#xFF0C;&#x6BD4;&#x5982;Fib 2 ,Fib1&#x90FD;&#x8BA1;&#x7B97;&#x4E86;&#x4E24;&#x6B21;&#xFF0C;&#x5E76;&#x4E14;&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F;&#x6307;&#x6570;&#x7EA7;&#x7684;&#xFF0C;&#x8FD9;&#x4E2A;&#x91CD;&#x590D;&#x4F1A;&#x968F;&#x7740;&#x8BA1;&#x7B97;&#x6570;&#x636E;&#x7684;&#x589E;&#x5927;&#x800C;&#x7EE7;&#x7EED;&#x7684;&#x589E;&#x5927;&#x3002; &#x5982;&#x4F55;&#x4F18;&#x5316;&#xFF1F; &#x6211;&#x4EEC;&#x770B;&#x5230;&#x4E4B;&#x524D;&#x7684;&#x7EBF;&#x6027;&#x8FED;&#x4EE3;&#x63D0;&#x5230;&#x4E86;&#x53EA;&#x4FDD;&#x5B58;&#x4E86;&#x4E2D;&#x95F4;&#x7ED3;&#x679C;&#x7684;&#x6570;&#x503C;&#x548C;&#x8BA1;&#x6570;&#x5668;&#x6570;&#x503C;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x501F;&#x52A9;&#x8FD9;&#x4E2A;&#x601D;&#x8DEF;&#x53BB;&#x4F18;&#x5316;&#x6211;&#x4EEC;&#x7684;&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;&#x3002; &#x6211;&#x4EEC;&#x4F7F;&#x7528;a&#xFF0C;b&#x4E24;&#x4E2A;&#x53D8;&#x91CF;&#x4FDD;&#x5B58;&#x4E2D;&#x95F4;&#x7ED3;&#x679C;&#xFF0C;&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;&#x662F;Fib(0)=0&#xFF0C;Fib(1)=1&#xFF0C;&#x5176;&#x4F59;&#x7B49;&#x4E8E;&#x524D;&#x4E24;&#x4E2A;&#x6570;&#x4E4B;&#x548C;&#xFF0C;&#x6240;&#x4EE5;&#x9996;&#x5148;&#x7ED9;a&#xFF0F;b&#x8D4B;&#x503C;&#x4E3A;1, &#x4E4B;&#x540E;&#xFF1A; a\\Leftarrow a + b\\\\\\\\ b\\Leftarrow a&#x8FD9;&#x6837;&#x53CD;&#x590D;&#x7684;&#x8FED;&#x4EE3;&#x4E0B;&#x53BB;&#xFF0C;&#x6700;&#x540E;a&#xFF0C;b&#x5C31;&#x4F1A;&#x4FDD;&#x5B58;&#x6700;&#x7EC8;&#x7ED3;&#x679C;Fib(n+1)&#xFF0C;Fib(n)&#x3002; &#x5199;&#x6210;&#x4EE3;&#x7801;&#x7684;&#x5F62;&#x5F0F;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF1A; 1234567(define (fib n) (define (fib-iter a b count) (if (= count 0)) b (fib-iter (+ a b) a (- count 1))) (fib-iter 1 0 n) ) &#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x6811;&#x5F62;&#x7684;&#x9012;&#x5F52;&#x5C31;&#x4F1A;&#x53D8;&#x6210;&#x4E00;&#x4E2A;&#x5E38;&#x6570;&#x65F6;&#x95F4;&#x7684;&#x7EBF;&#x6027;&#x7684;&#x7EBF;&#x6027;&#x8FED;&#x4EE3;&#x3002; &#x84; Tips: &#x5C3E;&#x9012;&#x5F52;&#x5F62;&#x5F0F;&#x548C;&#x5C3E;&#x9012;&#x5F52;&#x4F18;&#x5316; &#x89;&#x4E00;&#x4E2A;&#x9012;&#x5F52;&#x5B9A;&#x4E49;&#x7684;&#x8FC7;&#x7A0B;&#x79F0;&#x4E3A;&#x662F;&#x5C3E;&#x9012;&#x5F52;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x5176;&#x4E2D;&#x5BF9;&#x672C;&#x8FC7;&#x7A0B;&#x7684;&#x9012;&#x5F52;&#x8C03;&#x7528;&#x90FD;&#x662F;&#x8FC7;&#x7A0B;&#x6267;&#x884C;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F; &#x867D;&#x7136;&#x662F;&#x9012;&#x5F52;&#x5B9A;&#x4E49;&#x8FC7;&#x7A0B;&#xFF0C;&#x8BA1;&#x7B97;&#x6240;&#x9700;&#x7684;&#x5B58;&#x50A8;&#x5374;&#x4E0D;&#x968F;&#x9012;&#x5F52;&#x6DF1;&#x5EA6;&#x589E;&#x52A0;&#x3002;&#x5C3E;&#x9012;&#x5F52;&#x6280;&#x672F;&#x5C31;&#x662F;&#x91CD;&#x590D;&#x4F7F;&#x7528;&#x539F;&#x8FC7;&#x7A0B;&#x5728;&#x6267;&#x884C;&#x6808;&#x91CC;&#x7684;&#x5B58;&#x50A8;&#xFF0C;&#x4E0D;&#x53E6;&#x884C;&#x5206;&#x914D; &#x5B9E;&#x4F8B;&#x6C42;&#x503C;PS: &#x589E;&#x957F;&#x7684;&#x9636; =&gt; Big O &#x5206;&#x6790;&#x6CD5; O(1) < O(log n) < O(n) < O(n log n) < O(n^2) < O(n^3) < ... < O(2^n) \\\\\\\\ 常量\\qquad 对数\\qquad 线性\\qquad 平方\\qquad\\qquad 立方\\qquad \\qquad\\qquad\\qquad指数\\qquadExample: &#x5E42;&#x8FD0;&#x7B97;&#xFF1A;&#x6C42;b&#x7684;n&#x6B21;&#x5E42; b{^n} = b * b ^{n-1} \\\\\\\\ b^0 = 112345678910111213; &#x7EBF;&#x6027;&#x9012;&#x5F52;&#x65B9;&#x5F0F; O(n)&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; O(n)&#x7684;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;(define (expt b n) (if (= n 0) 1 (expt b n - 1))); &#x7EBF;&#x6027;&#x8FED;&#x4EE3;&#x65B9;&#x5F0F; O(n) &#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; O(1)&#x7684;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; (define (expt b n) (expt-iter b n 1)) (define (expt-iter b n result) (if (= n 0) result (expt-iter b (- n 1) (* result b)))) &#x4E8C;&#x5206;&#x6CD5; O(log(n))&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;: b^n = (b^{n/2}) \\text { n为偶数}\\\\\\\\ b^n = b*b^{n-1} \\text { n为奇数}1234(define (fast-expt b n) (cond ((= n 0) 1) ((even? n) (square (fast-expt b (/ n 2)))) (else (* b (fast-expt b (- n 1)))))) &#x6700;&#x5927;&#x516C;&#x7EA6;&#x6570;: &#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x539F;&#x7406;&#x7684; Scheme &#x63CF;&#x8FF0;&#xFF0C;&#x7B97;&#x6CD5;&#x7684;&#x589E;&#x957F;&#x9636;: 1234(define (GCD a b) ((if (= b 0) a (GCD b (reminder a b))))) &#x7D20;&#x6027;&#x68C0;&#x6D4B;&#xFF1A; &#x901A;&#x5E38;&#x7684;&#x7D20;&#x6027;&#x68C0;&#x6D4B;&#xFF0C;&#x662F;&#x68C0;&#x6D4B;&#x662F;&#x5426;&#x6709;&#x5C0F;&#x4E8E; $ \\sqrt{n} $ &#x7684;&#x7D20;&#x6570;&#xFF0C;&#x8FD9;&#x662F;&#x4E00;&#x4E2A; $ ch $ &#x7684;&#x7B97;&#x6CD5;&#x3002; &#x8D39;&#x9A6C;&#x68C0;&#x67E5;&#x63D0;&#x4F9B;&#x4E86;$ O(log(n)) $ &#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#xFF1A; a^n \\equiv a \\mod n&#x53D6;&#x4EFB;&#x610F;a &lt; n&#xFF0C;&#x4EE3;&#x5165;&#x516C;&#x5F0F;&#x6C42;a^n mod n&#x7B49;&#x4E0D;&#x7B49;&#x4E8E;n&#x3002;&#x5982;&#x679C;&#x7B49;&#x4E8E;&#xFF0C;&#x5C31;&#x6709;&#x53EF;&#x80FD;&#x662F;&#x7D20;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x4E0D;&#x662F;&#x80AF;&#x5B9A;&#x4E0D;&#x662F;&#x7D20;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x4E0D;&#x65AD;&#x7684;&#x53D6;&#x968F;&#x673A;&#x6570;&#x8FDB;&#x884C;&#x6982;&#x7387;&#x68C0;&#x6D4B;&#x589E;&#x52A0;&#x7D20;&#x6027;&#x6D4B;&#x8BD5;&#x7684;&#x6982;&#x7387;&#x3002; 12345678(define (fermat-test n) (define (try-it a) (= (expmod a n n) a) (try-it (+ 1 (random (- n 1))))))(define (fast-prime? n times) (cond (fermat-test n) (fast-prime n (- times 1))) (else false))) &#x4F7F;&#x7528;&#x4E86;&#x6982;&#x7387;&#x6D4B;&#x8BD5;&#xFF0C;&#x63D0;&#x9AD8;&#x4E86;&#x6C42;&#x7D20;&#x6570;&#x7684;&#x6982;&#x7387;&#xFF0C;&#x80FD;&#x9A97;&#x8FC7;&#x8D39;&#x9A6C;&#x68C0;&#x6D4B;&#x7684;&#x6570;&#x5B57;&#x7279;&#x522B;&#x5C11;&#x53EF;&#x4EE5;&#x5FFD;&#x7565;&#x4E0D;&#x8BA1;&#x3002; &#x9AD8;&#x9636;&#x51FD;&#x6570;&#x62BD;&#x8C61;&#x6211;&#x4EEC;&#x4ECE;&#x4E4B;&#x524D;&#x7684;&#x5B66;&#x4E60;&#x4E2D;&#x80FD;&#x770B;&#x51FA;&#xFF0C;&#x8FC7;&#x7A0B;&#x4E5F;&#x662F;&#x4E00;&#x7C7B;&#x62BD;&#x8C61;&#xFF0C;&#x4E0D;&#x4F9D;&#x8D56;&#x7279;&#x5B9A;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x5374;&#x80FD;&#x63CF;&#x8FF0;&#x6570;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4E92;&#x5173;&#x7CFB;&#xFF1A; 1(define (cube x) (* x x x)) &#x4F46;&#x662F;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x8FC7;&#x7A0B;&#x53EA;&#x80FD;&#x4F20;&#x5165;&#x6570;&#xFF0C;&#x90A3;&#x8FC7;&#x7A0B;&#x62BD;&#x8C61;&#x7684;&#x63CF;&#x8FF0;&#x80FD;&#x529B;&#x663E;&#x7136;&#x8981;&#x5927;&#x6253;&#x6298;&#x6263;&#xFF0C;&#x6211;&#x4EEC;&#x4E4B;&#x524D;&#x4E5F;&#x5DF2;&#x7ECF;&#x8BF4;&#x8FC7;&#x4E86;&#xFF0C;&#x6570;&#x636E;&#x548C;&#x8FC7;&#x7A0B;&#x7684;&#x754C;&#x9650;&#x5C06;&#x53D8;&#x5F97;&#x8D8A;&#x6765;&#x8D8A;&#x6A21;&#x7CCA;&#xFF0C;&#x8FD9;&#x6837;&#x5B50;&#x6211;&#x4EEC;&#x7684;&#x8FC7;&#x7A0B;&#x4E0D;&#x4F46;&#x80FD;&#x5F53;&#x6210;&#x53C2;&#x6570;&#x4F20;&#x5165;&#x8FD8;&#x80FD;&#x5F53;&#x6210;&#x53C2;&#x6570;&#x8FD4;&#x56DE;&#xFF0C;&#x8FD8;&#x62E5;&#x6709;$ \\lambda $ &#x8868;&#x8FBE;&#x5F0F;&#x8FD9;&#x6837;&#x62E5;&#x6709;&#x533F;&#x540D;&#x548C;&#x95ED;&#x5305;&#x7279;&#x6027;&#x7684;&#x9AD8;&#x9636;&#x5E94;&#x7528;&#x3002; &#x6211;&#x4EEC;&#x5728;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x4E0B;&#x60C5;&#x51B5;&#x4E0B;&#x9700;&#x8981;&#x7528;&#x5230;&#x9AD8;&#x9636;&#x8FC7;&#x7A0B;&#xFF1A; &#x89; &#x4E00;&#x4E9B;&#x8BA1;&#x7B97;&#x5177;&#x6709;&#x76F8;&#x4F3C;&#x7684;&#x6A21;&#x5F0F;&#xFF0C;&#x53EA;&#x662F;&#x5176;&#x4E2D;&#x6D89;&#x53CA;&#x7684;&#x51E0;&#x4E2A;&#x64CD;&#x4F5C;&#x4E0D;&#x540C; &#x8981;&#x5229;&#x7528;&#x516C;&#x5171;&#x6A21;&#x5F0F;&#x9700;&#x8981;&#x628A;&#x8FD9;&#x51E0;&#x4E2A;&#x64CD;&#x4F5C;&#x53C2;&#x6570;&#x5316; &#x5177;&#x6709;&#x53C2;&#x6570;&#x5316;&#x64CD;&#x4F5C;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x5C31;&#x662F;&#x9AD8;&#x9636;&#x8FC7;&#x7A0B;(&#x4E00;&#x79CD;) &#x8FC7;&#x7A0B;&#x4F5C;&#x4E3A;&#x53C2;&#x6570; &#x6211;&#x4EEC;&#x6765;&#x5148;&#x770B;&#x8FD9;&#x51E0;&#x4E2A;&#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#xFF0C;&#x90FD;&#x662F;&#x5F88;&#x7B80;&#x5355;&#x7684;&#x8FC7;&#x7A0B;&#xFF1A; &#x6211;&#x4EEC;&#x80FD;&#x5F88;&#x5BB9;&#x6613;&#x7684;&#x5728;&#x8FD9;&#x4E09;&#x4E2A;&#x7D2F;&#x52A0;&#x5F0F;&#x4E2D;&#x627E;&#x5230;&#x5171;&#x6027;&#xFF0C;&#x4ED6;&#x4EEC;&#x7684;&#x533A;&#x522B;&#x662F;&#x6BCF;&#x4E2A;item&#x7684;&#x6784;&#x6210;&#x4E0D;&#x540C;&#xFF0C;&#x4F46;&#x662F;&#x7EC4;&#x5408;&#x65B9;&#x5F0F;&#x90FD;&#x662F;&#x5BF9;a,b&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x800C;&#x4E14;&#x4ECE;&#x6574;&#x4F53;&#x6765;&#x770B;&#x90FD;&#x662F;&#x6BCF;&#x4E2A;item&#x7684;&#x7D2F;&#x52A0;&#xFF0C;&#x8FD9;&#x6837;&#x6211;&#x4EEC;&#x5C31;&#x80FD;&#x4ECE;&#x4E2D;&#x62BD;&#x8C61;&#x51FA;&#x4E00;&#x4E2A;&#x901A;&#x5F0F;&#xFF1A; 12345(define (&lt;name&gt; a b) ((if (&gt; a b) 0 (+ (&lt;term&gt; a) (&lt;name&gt; (&lt;next&gt; a) b)))) &#x8FD9;&#x5176;&#x4E2D;&lt;name&gt;&#x4EE3;&#x8868;&#x4E86;&#x51FD;&#x6570;&#x540D;&#xFF0C;&lt;term&gt;&#x4EE3;&#x8868;&#x4E86;&#x5BF9;a&#x8FDB;&#x884C;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&lt;next&gt; &#x4EE3;&#x8868;&#x4E86;&#x4E00;&#x79CD;&#x6539;&#x53D8;&#x53C2;&#x6570;&#x7684;&#x6B65;&#x8FDB;&#xFF0C;&#x8BA1;&#x7B97;&#x4E86;&#x4E0B;&#x4E00;&#x6B65;&#x7684;a&#x7684;&#x503C;&#x3002; &#x8FD9;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x6211;&#x4EEC;&#x5BF9;a&#x7684;&#x64CD;&#x4F5C;&lt;term&gt;&#x548C;&lt;next&gt;&#x5DF2;&#x7ECF;&#x88AB;&#x62BD;&#x8C61;&#x4E86;&#x51FA;&#x6765;&#xFF0C;&#x5982;&#x679C;&#x8FD9;&#x4E24;&#x4E2A;&#x8FC7;&#x7A0B;&#x80FD;&#x88AB;&#x5F53;&#x6210;&#x53C2;&#x6570;&#x4F20;&#x5165;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x6837;&#x7684;&#x901A;&#x5F0F;&#x5C31;&#x80FD;&#x5F88;&#x597D;&#x7684;&#x6982;&#x62EC;&#x4E0A;&#x9762;&#x4E09;&#x4E2A;&#x8BA1;&#x7B97;&#x516C;&#x5F0F;&#x7684;&#x8FC7;&#x7A0B;&#x4E86;&#xFF0C;&#x6070;&#x597D; Scheme &#x5C31;&#x652F;&#x6301;&#x4EE5;&#x8FC7;&#x7A0B;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x505A;&#x7D2F;&#x52A0;&#x7684;&#x7684;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x5C31;&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x5199;&#xFF1A; 123456789101112; next &#x7684;&#x6B65;&#x8FDB;(define (next x) (+ x 1)); term (define (term x) x); &#x901A;&#x5F0F;(define (sum term a next b) (if (&gt; a b) 0 (+ (term a) (sum (next a) b)))); &#x7D2F;&#x52A0;&#x7684;&#x5305;&#x88C5;(define (sum-integers a b) (sum term a next b)) &#x901A;&#x8FC7;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x4E2A;&#x7279;&#x6027;&#x652F;&#x6301;&#x7684;&#x9AD8;&#x9636;&#x51FD;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x975E;&#x5E38;&#x8F7B;&#x6613;&#x7684;&#x89E3;&#x51B3;&#x4E86;&#x4E4B;&#x524D;&#x90A3;&#x4E9B;&#x7684;&#x5197;&#x4F59;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5C06;&#x4E00;&#x4E2A;&#x8FED;&#x4EE3;&#x7D2F;&#x52A0;&#x7684;&#x8FC7;&#x7A0B;&#x62BD;&#x8C61;&#x6210;&#x4E86;&#x4E00;&#x4E2A;&#x901A;&#x5F0F;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x4F20;&#x5165;&#x8FC7;&#x7A0B;&#x5C31;&#x597D;&#x4E86;&#x3002; C &#x8BED;&#x8A00;&#x7B49;&#x4F20;&#x7EDF;&#x8BED;&#x8A00;&#x662F;&#x65E0;&#x6CD5;&#x4F20;&#x9012;&#x8FC7;&#x7A0B;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x4F20;&#x9012;&#x51FD;&#x6570;&#x6307;&#x9488;&#xFF0C;&#x5B8C;&#x6210;&#x7C7B;&#x4F3C;&#x7684;&#x6548;&#x679C;&#xFF0C; C&#x91CC;&#x9762;&#x8BA9;&#x7ED3;&#x6784;&#x4F53;&#x5305;&#x542B;&#x8FC7;&#x7A0B;&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x7ED3;&#x6784;&#x4F53;&#x643A;&#x5E26;&#x51FD;&#x6570;&#x6307;&#x9488;&#x6765;&#x5B8C;&#x6210;&#x7684;&#x3002; 12&gt; typedef double (*add) (int); // &#x51FD;&#x6570;&#x540D;&#x548C;&#x7C7B;&#x578B;&gt; $ \\lambda $ &#x7684;&#x6784;&#x9020;&#x4E0A;&#x4E00;&#x5C0F;&#x8282;&#x91CC;&#x9762;&#x6211;&#x4EEC;&#x505A;&#x51FA;&#x6765;&#x4E00;&#x4E2A;&#x7D2F;&#x52A0;&#x7684;&#x901A;&#x5F0F;&#xFF0C;&#x4E3A;&#x4E86;&#x597D;&#x7406;&#x89E3;&#x6211;&#x662F;&#x628A;&#x597D;&#x51E0;&#x4E2A;&#x51FD;&#x6570;&#x5206;&#x5F00;&#x5B9A;&#x4E49;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x4E4B;&#x524D;&#x77E5;&#x9053;&#xFF0C;&#x5B50;&#x56FD;&#x7B56;&#x548C;&#x56FD;&#x5185;&#x7684;&#x5B9A;&#x4E49;&#x53EF;&#x4EE5;&#x5199;&#x5728;&#x8FC7;&#x7A0B;&#x5185;&#xFF0C;&#x5C31;&#x50CF;&#x8FD9;&#x6837;&#xFF1A; 12345(define (sum-integers a b) (define (next x) (+ x 1)) (define (term x) x) (sum term a next b) ) &#x5199;&#x6210;&#x8FD9;&#x6837;&#xFF0C;&#x5B50;&#x8FC7;&#x7A0B;&#x7684;&#x5B89;&#x5168;&#x6027;&#x548C;&#x53EF;&#x8FBE;&#x6027;&#x90FD;&#x5F97;&#x5230;&#x4E86;&#x4FDD;&#x8BC1;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x4E0D;&#x7981;&#x8981;&#x95EE;&#xFF0C;next&#x548C;term&#x8FD9;&#x4E24;&#x4E2A;&#x53D8;&#x91CF;&#x771F;&#x6709;&#x7528;&#x4E48;&#xFF1F;&#x6211;&#x4EEC;&#x53EA;&#x662F;&#x628A;&#x4ED6;&#x4EEC;&#x521B;&#x5EFA;&#x51FA;&#x6765;&#x5C31;&#x6254;&#x8FDB;&#x4E86;sum&#x8FC7;&#x7A0B;&#xFF0C;&#x4E4B;&#x540E;&#x4ED6;&#x4EEC;&#x5C31;&#x518D;&#x6CA1;&#x4EC0;&#x4E48;&#x7528;&#x4E86;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x5C31;&#x5E94;&#x8BE5;&#x5F15;&#x5165;$ \\lambda $&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x4F7F;&#x7528;&#x8FC7;&#x51FD;&#x6570;&#x5F0F;&#x8BED;&#x8A00;&#x7684;&#x540C;&#x5B66;&#x5BF9;&#x8FD9;&#x4E2A;&#x5E94;&#x8BE5;&#x4E0D;&#x4F1A;&#x964C;&#x751F;&#xFF1A; 12; &#x6BD4;&#x5982;&#x521A;&#x624D;&#x7684; next &#x5C31;&#x53EF;&#x4EE5;&#x5199;&#x6210;&#x8FD9;&#x79CD;&#x5F62;&#x5F0F;(lambda (x) (+ x 1)) $ \\lambda $ &#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x8BED;&#x6CD5;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF1A; $ \\lambda $ &#x8868;&#x8FBE;&#x5F0F;&#x63D0;&#x4F9B;&#x4E86;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x4E2A;&#x533F;&#x540D;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x518D;&#x5199;&#x8FD9;&#x4E2A;&#x7D2F;&#x52A0;&#x51FD;&#x6570;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x53EF;&#x4EE5;&#x5199;&#x6210;&#x8FD9;&#x4E2A;&#x6837;&#x5B50;&#x7684;&#x4E86;&#xFF1A; 123456(define (sum-intergers a b) (sum (lambda (x) (+ x 1) a (lambda (x) x b)) &#x662F;&#x4E0D;&#x662F;&#x65B9;&#x4FBF;&#x4E86;&#x5F88;&#x591A;&#x3002; Tips: lambda &#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x6C42;&#x503C; &#x4E4B;&#x524D;&#x6211;&#x4EEC;&#x5B66;&#x8FC7; Scheme &#x5E94;&#x7528;&#x5E8F;&#x7684;&#x6C42;&#x503C;&#x987A;&#x5E8F;&#xFF0C;&#x4F1A;&#x5148;&#x5BF9;&#x51FD;&#x6570;&#x7684;&#x53C2;&#x6570;&#x8FDB;&#x884C;&#x6C42;&#x503C; &#x4F46;&#x662F; lambda &#x662F;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x53C2;&#x6570;&#x4E0D;&#x53C2;&#x4E0E;&#x6C42;&#x503C; &#x8FD8;&#x6709;&#xFF1A; Tips: lambda &#x521B;&#x5EFA;&#x7684;&#x662F;&#x5BF9;&#x8C61;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x4E5F;&#x540C;&#x6837;&#x662F;&#x8FC7;&#x7A0B;&#x800C;&#x5DF2; &#x548C;define&#x521B;&#x5EFA;&#x7684;&#x8FC7;&#x7A0B;&#x8FD8;&#x662F;&#x6709;&#x6240;&#x533A;&#x522B;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x56E0;&#x4E3A;&#x662F;&#x8FC7;&#x7A0B;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x5F53;&#x4F5C;&#x7EC4;&#x5408;&#x5B50; &#x7684;&#x8FD0;&#x7B97;&#x7B26;&#x6765;&#x7528;&#x3002; &#x4F7F;&#x7528;let&#x521B;&#x5EFA;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x53E6;&#x5916; $ \\lambda $ &#x8868;&#x8FBE;&#x5F0F;&#x8FD8;&#x63D0;&#x4F9B;&#x4E86;&#x4F7F;&#x7528;let&#x521B;&#x5EFA;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x7684;&#x65B9;&#x6CD5;&#xFF1A; &#x6211;&#x4EEC;&#x6709;&#x7684;&#x65F6;&#x5019;&#x7A0B;&#x5E8F;&#x9700;&#x8981;&#x4E00;&#x4E9B;&#x4E2D;&#x95F4;&#x53D8;&#x91CF;&#xFF0C;&#x867D;&#x7136;&#x4E5F;&#x80FD;&#x7528;define&#x53BB;&#x5B9A;&#x4E49;&#xFF0C;&#x4F46;&#x662F;define&#x6700;&#x597D;&#x8FD8;&#x662F;&#x7528;&#x6765;&#x5B9A;&#x4E49;&#x5185;&#x90E8;&#x8FC7;&#x7A0B;&#x6BD4;&#x8F83;&#x597D;&#x3002; &#x8FD8;&#x6709;&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x8F85;&#x52A9;&#x7684;&#x5B50;&#x8FC7;&#x7A0B;&#x53BB;&#x4EE3;&#x7406;&#x8FD9;&#x4E2A;&#x4E2D;&#x95F4;&#x53D8;&#x91CF;&#xFF0C;&#x4F46;&#x662F;&#x9762;&#x5BF9;&#x66F4;&#x590D;&#x6742;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x4F1A;&#x4F7F;&#x5F97;&#x4EE3;&#x7801;&#x7ED3;&#x6784;&#x4E0D;&#x6E05;&#x6670;&#x3002; SICP&#x4E0A;&#x7684;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; f(x,y) = x(1 + xy)^2 + y (1-y) + (1 + xy)(1-y)&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x80FD;&#x5C06;&#x8FD9;&#x4E2A;&#x5F0F;&#x5B50;&#x7B80;&#x5316;&#xFF0C;&#x91CC;&#x9762;&#x7684;&#x91CD;&#x590D;&#x6B65;&#x9AA4;&#x5B9E;&#x5728;&#x662F;&#x592A;&#x591A;&#x4E86;&#xFF0C;&#x5982;&#x679C;&#x5168;&#x90FD;&#x76F4;&#x63A5;&#x5199;&#x51FA;&#x6765;&#x80AF;&#x5B9A;&#x5F88;&#x5751;&#x7684;&#x4F1A;&#x88AB;&#x8BA1;&#x7B97;&#x597D;&#x51E0;&#x6B21;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x8FD9;&#x4E2A;&#x7B80;&#x5199;&#x6210;&#x8FD9;&#x6837;&#xFF1A; a = 1 + xy\\\\\\\\ b = 1-y\\\\\\\\ f(x,y) = xa^2 + yb + ab&#x8FD9;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x5C31;&#x9700;&#x8981;&#x62BD;&#x8C61;&#x51FA;a,b&#x8FD9;&#x4E24;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x6211;&#x4EEC;&#x8FD9;&#x65F6;&#x5019;&#x5C31;&#x53EF;&#x4EE5;&#x5F15;&#x5165;let&#x8868;&#x8FBE;&#x5F0F;&#xFF1A; let &#x8868;&#x8FBE;&#x5F0F;&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x591A;&#x4E2A;&#x7C7B;&#x4F3C;&#x952E;&#x503C;&#x5BF9;&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#xFF0C;&#x53EF;&#x89C1;&#x6027;&#x4EC5;&#x5728;&#x8FD9;&#x4E2A;let&#x8868;&#x8FBE;&#x5F0F;&#x5185;&#xFF0C;&#x53EF;&#x4EE5;&#x5E94;&#x7528;&#x5728;&#x4E0B;&#x9762;&#x7684;body&#x4E2D;&#x3002; 123456(define (f x y) (let ((a (+ 1 (* x y))) (b (- 1 y))) (+ (* x (square a)) (* y b) (* a b)))) let&#x8868;&#x8FBE;&#x5F0F;&#x5177;&#x6709;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x4E9B;&#x7279;&#x6027;&#xFF1A; let &#x5C3D;&#x53EF;&#x80FD;&#x5728;&#x63A5;&#x8FD1;&#x4F7F;&#x7528;&#x7684;&#x5730;&#x65B9;&#x521B;&#x5EFA;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x7EA6;&#x675F;&#x3002; let&#x4E5F;&#x540C;&#x6837;&#x4F1A;&#x6709;&#x53D8;&#x91CF;&#x8986;&#x76D6;&#x7684;&#x60C5;&#x51B5;&#x51FA;&#x73B0;&#x3002; &#x8FC7;&#x7A0B;&#x4F5C;&#x4E3A;&#x8FD4;&#x56DE;&#x503C;&#x56DE;&#x5230;&#x6211;&#x4EEC;&#x6700;&#x5F00;&#x59CB;&#x7684;&#x6C42;&#x5E73;&#x65B9;&#x6839;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x77E5;&#x9053;&#x4E86;&#x6C42;&#x4E00;&#x4E2A;&#x6570;&#x7684;&#x5E73;&#x65B9;&#x6839;&#x7B49;&#x4EF7;&#x4E8E;&#x6C42;&#xFF1A; f(y) = x/y&#x7684;&#x4E00;&#x4E2A;&#x4E0D;&#x52A8;&#x70B9;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F88;&#x8F7B;&#x677E;&#x7684;&#x5199;&#x51FA;&#x8FD9;&#x6837;&#x7684;&#x4EE3;&#x7801;&#xFF1A; 123(define (sqrt x) (fixed-point (lambda (y) (/ x y)) 1.0 )) ; fixed-point &#x90A3;&#x4E00;&#x5957;&#x4E4B;&#x524D;&#x5DF2;&#x7ECF;&#x592A;&#x719F;&#x6089;&#x4E86;&#xFF0C;&#x5C31;&#x662F;&#x8C03;&#x7528;&#x4F20;&#x5165;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x4E0D;&#x65AD;&#x770B;&#x6570;&#x636E;&#x7684;&#x8D8B;&#x8FD1;&#x662F;&#x5426;&#x5C0F;&#x4E8E;&#x67D0;&#x4E2A;&#x53C2;&#x91CF; &#x4F46;&#x662F;&#x8FD9;&#x6837;&#x5B50;&#x7684;&#x5F0F;&#x5B50;&#x662F;&#x660E;&#x663E;&#x6CA1;&#x529E;&#x6CD5;&#x6B63;&#x5E38;&#x6536;&#x655B;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x4E0D;&#x8FC7;&#x5C31;&#x662F;&#x5728;&#x53CD;&#x590D;&#x7684;&#x5C1D;&#x8BD5;&#x4E24;&#x4E2A;&#x6570;&#x5B57;&#x800C;&#x5DF2;&#x3002;&#x8FD9;&#x65F6;&#x6211;&#x4EEC;&#x5728;&#x4E0A;&#x4E00;&#x8282;&#x91CC;&#x9762;&#x7684;&#x90A3;&#x4E2A;&#x529E;&#x6CD5;&#x7684;&#x4F5C;&#x7528;&#x5C31;&#x4F53;&#x73B0;&#x51FA;&#x6765;&#x4E86;&#xFF0C;&#x8FD8;&#x8BB0;&#x5F97;&#x4E48;&#xFF1F;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x4E86;: x_2 = (x_1 + f(x1) )/2&#x4F5C;&#x4E3A;&#x4E0B;&#x4E00;&#x6B21;&#x4F7F;&#x7528;&#x7684;&#x53D8;&#x91CF;&#x4F20;&#x5165;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x901A;&#x8FC7;&#x4E0D;&#x65AD;&#x7684;&#x8FED;&#x4EE3;&#x76F4;&#x5230;&#x6700;&#x540E;&#x7684;&#x7ED3;&#x679C;&#x6536;&#x655B;&#x5230;&#x4E00;&#x4E2A;&#x56FA;&#x5B9A;&#x7684;&#x503C;&#x6C42;&#x5F97;&#x4E0D;&#x52A8;&#x70B9;&#x3002; &#x8FD9;&#x79CD;&#x901A;&#x8FC7;&#x5E73;&#x5747;&#x503C;&#x6765;&#x89E3;&#x51B3;&#x51FD;&#x6570;&#x5448;&#x73B0;&#x6CE2;&#x52A8;&#x8D8B;&#x52BF;&#x7684;&#x65B9;&#x6CD5;&#x88AB;&#x53EB;&#x505A;&#x5E73;&#x5747;&#x963B;&#x5C3C;&#x6CD5; &#xFF0C;&#x901A;&#x8FC7;&#x8FD9;&#x79CD;&#x5E73;&#x5747;&#x963B;&#x5C3C;&#x7684;&#x903C;&#x8FD1;&#x65B9;&#x6CD5;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x4E0A;&#x9762;&#x7684;&#x90A3;&#x4E2A;&#x4EE3;&#x7801;&#x6539;&#x53D8;&#x4E00;&#x4E0B;&#xFF0C;&#x8FD9;&#x6837;&#x4E0D;&#x52A8;&#x70B9;&#x5C31;&#x53EF;&#x4EE5;&#x6B63;&#x5E38;&#x7684;&#x903C;&#x8FD1;&#x4E86;&#xFF1A; 123(define (sqrt x) (fixed-point) (lambda (y) (average y (/ x y)) 1.0)) &#x6211;&#x4EEC;&#x73B0;&#x5728;&#x5DF2;&#x7ECF;&#x628A;&#x91CC;&#x9762;&#x7684;&#x4F20;&#x5165;&#x7684;&#x8FC7;&#x7A0B;&#x6362;&#x6210;&#x4E86;&#x6211;&#x4EEC;&#x6240;&#x4F7F;&#x7528;&#x7684;&#x5E73;&#x5747;&#x963B;&#x5C3C;&#x7684;&#x65B9;&#x6CD5;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x6837;&#x7684;&#x8FC7;&#x7A0B;&#x660E;&#x663E;&#x662F;&#x4E0D;&#x80FD;&#x6EE1;&#x8DB3;&#x6211;&#x4EEC;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x5047;&#x5B9A;SICP&#x8FD9;&#x7AE0;&#x4E3B;&#x8981;&#x8C08;&#x7684;&#x662F;&#x6709;&#x5173;&#x8FC7;&#x7A0B;&#x62BD;&#x8C61;&#x7684;&#x8BDD;&#x9898;&#xFF08;&#x5B9E;&#x9645;&#x4E0A;&#x4E5F;&#x662F;&#x8FD9;&#x6837;&#xFF09;&#xFF0C;&#x5176;&#x5B9E;&#x5E73;&#x65B9;&#x6839;&#x7684;&#x8BDD;&#x9898;&#x53EA;&#x662F;&#x4E2A;&#x4E0D;&#x9519;&#x7684;&#x5F15;&#x5B50;&#x3002; &#x5176;&#x5B9E;&#x8FD9;&#x91CC;&#x9762;&#x51FA;&#x73B0;&#x7684;&#x95EE;&#x9898;&#x5C31;&#x662F;&#x91CC;&#x9762;&#x7684;&#x65B9;&#x6CD5;&#x53C8;&#x4E0D;&#x5177;&#x5907;&#x901A;&#x7528;&#x6027;&#x4E86;&#xFF0C;&#x6211;&#x4EEC;&#x4E4B;&#x524D;&#x4E5F;&#x8BF4;&#x4E86;&#x5E73;&#x5747;&#x963B;&#x5C3C;&#x662F;&#x4E00;&#x7C7B;&#x89E3;&#x51B3;&#x903C;&#x8FD1;&#x95EE;&#x9898;&#x7684;&#x901A;&#x7528;&#x65B9;&#x6CD5;&#xFF0C;&#x5355;&#x5C31;&#x6C42;&#x4E0D;&#x52A8;&#x70B9;&#x7684;&#x51FD;&#x6570;&#x6765;&#x8BF4;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x9488;&#x5BF9;&#x5404;&#x79CD;&#x7684;&#x8FC7;&#x7A0B;&#x4F7F;&#x7528;&#x5E73;&#x5747;&#x963B;&#x5C3C;&#x7684;&#x65B9;&#x6CD5;&#x7684;&#x3002;&#x8FD9;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x5C31;&#x5E0C;&#x671B;&#x8BED;&#x8A00;&#x53EF;&#x4EE5;&#x7ED9;&#x4E88;&#x6211;&#x4EEC;&#x751F;&#x6210;&#x65B9;&#x6CD5;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x8FD9;&#x6837;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x4F20;&#x5165;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x5E73;&#x5747;&#x963B;&#x5C3C;&#x52A0;&#x5DE5;&#x7684;&#x65B9;&#x6CD5;&#x5C31;&#x53EF;&#x4EE5;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x5E73;&#x5747;&#x963B;&#x5C3C;&#x6765;&#x6C42;&#x4E0D;&#x52A8;&#x70B9;&#x4E86;&#xFF0C;&#x5F53;&#x7136; Scheme &#x81EA;&#x7136;&#x63D0;&#x4F9B;&#x4E86;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x521A;&#x624D;&#x63CF;&#x8FF0;&#x7684;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x5199;&#x6210;&#x8FD9;&#x79CD;&#x6837;&#x5B50;&#xFF1A; 12(define (average-damp f) (lambda (x) (average x (f x)))) &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x4F20;&#x5165;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x751F;&#x6210;&#x5BF9;&#x5E94;&#x7684;&#x5E73;&#x5747;&#x963B;&#x5C3C;&#x65B9;&#x6CD5;&#x4E86;&#xFF0C;&#x6BD4;&#x5982;&#x6211;&#x4EEC;&#x60F3;&#x6C42;cos&#x51FD;&#x6570;&#x7684;&#x4E0D;&#x52A8;&#x70B9;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x5199;(average-damp cos)&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x7684;&#x53C2;&#x6570;&#x662F;&#x8FC7;&#x7A0B;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x8FC7;&#x7A0B;&#xFF0C;&#x4F46;&#x662F;&#x7ECF;&#x8FC7;&#x6211;&#x4EEC;&#x4E4B;&#x524D;&#x5BF9; Scheme &#x7684;&#x7406;&#x89E3;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x4E00;&#x70B9;&#x90FD;&#x4E0D;&#x611F;&#x89C9;&#x60CA;&#x5947;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#x5728;&#x8BA1;&#x7B97;&#x4E2D;&#x751F;&#x6210;&#x65B0;&#x8FC7;&#x7A0B;&#x662F;&#x524D;&#x9762;&#x6CA1;&#x9047;&#x5230;&#x8FC7;&#x7684;&#x65B0;&#x95EE;&#x9898;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x8FD9;&#x662F;lambda &#x8868;&#x8FBE;&#x5F0F;&#x6700;&#x91CD;&#x8981;&#x7684;&#x4F5C;&#x7528;&#x3002; Tips: &#x4F5C;&#x4E3A;&#x4E00;&#x7B49;&#x516C;&#x6C11;&#x7684;&#x8FC7;&#x7A0B;&#xFF1A; &#x53EF;&#x4EE5;&#x7528;&#x53D8;&#x91CF;&#x547D;&#x540D;&#xFF08;&#x5728;&#x5E38;&#x89C4;&#x8BED;&#x8A00;&#x91CC;&#xFF0C;&#x53EF;&#x5B58;&#x5165;&#x53D8;&#x91CF;&#xFF0C;&#x53D6;&#x51FA;&#x4F7F;&#x7528;&#xFF09; &#x89;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x4F20;&#x7ED9;&#x8FC7;&#x7A0B; &#x53EF;&#x4EE5;&#x7531;&#x8FC7;&#x7A0B;&#x4F5C;&#x4E3A;&#x7ED3;&#x679C;&#x8FD4;&#x56DE; &#x53EF;&#x4EE5;&#x653E;&#x5165;&#x5404;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784; &#x53EF;&#x4EE5;&#x5728;&#x8FD0;&#x884C;&#x4E2D;&#x52A8;&#x6001;&#x5730;&#x6784;&#x9020; &#x603B;&#x7ED3;&#x8FD9;&#x4E00;&#x7AE0;&#x6211;&#x4EEC;&#x63A5;&#x89E6;&#x4E86;&#x5F88;&#x591A;&#x76F8;&#x5BF9;&#x57FA;&#x7840;&#x7684;&#x77E5;&#x8BC6;&#xFF0C;&#x4ECE;&#x4E00;&#x4E2A;&#x6C42;&#x51FD;&#x6570;&#x5E73;&#x65B9;&#x6839;(&#x4E0D;&#x52A8;&#x70B9;)&#x7684;&#x95EE;&#x9898;&#x4E3A;&#x6838;&#x5FC3;&#xFF0C;&#x6211;&#x4EEC;&#x63A5;&#x89E6;&#x4E86; Scheme &#x7684;&#x57FA;&#x7840;&#x8BED;&#x6CD5;&#xFF0C;&#x8BA8;&#x8BBA;&#x8BED;&#x8A00;&#x7684;&#x6570;&#x503C;&#x8BA1;&#x7B97;&#x95EE;&#x9898;&#xFF0C;&#x751A;&#x81F3;&#x8FD8;&#x8C08;&#x5230;&#x4E86;&#x9AD8;&#x9636;&#x8FC7;&#x7A0B;&#xFF08;lambda&#x8868;&#x8FBE;&#x5F0F;&#x3001;Lisp &#x8BED;&#x8A00;&#x4E2D;&#x8FC7;&#x7A0B;&#x7684;&#x7B2C;&#x4E00;&#x5730;&#x4F4D;&#xFF09;&#xFF0C;&#x8FD9;&#x4E9B;&#x90FD;&#x662F;&#x548C;&#x4F20;&#x7EDF;&#x7684; OO &#x8BED;&#x8A00;&#x6709;&#x5F88;&#x5927;&#x7684;&#x533A;&#x522B;&#x7684;&#xFF0C;&#x751A;&#x81F3;&#x8BF4;&#x601D;&#x60F3;&#x90FD;&#x53EF;&#x4EE5;&#x8BF4;&#x662F;&#x8FD9;&#x79CD;&#x51FD;&#x6570;&#x5F0F;&#x8BED;&#x8A00;&#x7684;&#x4E00;&#x4E2A;&#x6838;&#x5FC3;&#x89C2;&#x70B9;&#x4E86;&#x3002;&#x6211;&#x7684;&#x5B66;&#x4E60;&#x8DEF;&#x5F84;&#x4E00;&#x76F4;&#x90FD;&#x5F88;&#x8BE1;&#x5F02;&#xFF0C;&#x5F88;&#x591A;&#x7684;&#x7406;&#x8BBA;&#x63A5;&#x89E6;&#x4E4B;&#x524D;&#x5C31;&#x4E0D;&#x5C0F;&#x5FC3;&#x505A;&#x8FC7;&#x4E00;&#x4E9B;&#x5B9E;&#x8DF5;&#xFF0C;&#x5176;&#x5B9E;&#x6709;&#x7684;&#x65F6;&#x5019;&#x8FD9;&#x6837;&#x5BF9;&#x77E5;&#x8BC6;&#x7684;&#x628A;&#x63E1;&#x662F;&#x4E0D;&#x7262;&#x9760;&#x7684;&#x3002;SICP&#x8FD9;&#x672C;&#x4E66;&#x770B;&#x8D77;&#x6765;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x89C9;&#x5F97;&#x8FD8;&#x662F;&#x5E94;&#x8BE5;&#x4ED4;&#x7EC6;&#x7684;&#x9605;&#x8BFB;&#xFF0C;&#x6BD5;&#x7ADF;&#x80FD;&#x628A;&#x5F88;&#x591A;&#x601D;&#x60F3;&#x6838;&#x5FC3;&#x7684;&#x95EE;&#x9898;&#x8BF4;&#x7684;&#x5982;&#x6B64;&#x7684;&#x6D45;&#x663E;&#x6613;&#x61C2;&#x8FD8;&#x662F;&#x5F88;&#x770B;&#x539F;&#x4E66;&#x4F5C;&#x8005;&#x529F;&#x5E95;&#x7684;&#x3002;","categories":[],"tags":[{"name":"SICP","slug":"SICP","permalink":"https://lfkdsk.github.io/tags/SICP/"}]},{"title":"Sketch的过去现在和未来","slug":"tanslate-sketch","date":"2017-02-24T13:43:32.000Z","updated":"2017-02-24T13:44:40.000Z","comments":true,"path":"2017/02/24/tanslate-sketch/","link":"","permalink":"https://lfkdsk.github.io/2017/02/24/tanslate-sketch/","excerpt":"","text":"&#x539F;&#x6587;&#x94FE;&#x63A5; : The Past, Present and Future of Sketch &#x539F;&#x6587;&#x4F5C;&#x8005; : Geoff Teehan &#x8BD1;&#x6587;&#x51FA;&#x81EA; : &#x6398;&#x91D1;&#x7FFB;&#x8BD1;&#x8BA1;&#x5212; &#x8BD1;&#x8005; : lfkdsk &#x6821;&#x5BF9;&#x8005;:&#x90B5;&#x8F89;Vista, lihenair Sketch&#x7684;&#x8FC7;&#x53BB;&#x73B0;&#x5728;&#x548C;&#x672A;&#x6765;&#x5728;&#x4E00;&#x6B21; Adobe &#x7684;&#x6D3B;&#x52A8;&#x4E0A;&#x6709;&#x4EBA;&#x95EE;&#x6211;&#x5BF9; Comet &#x6709;&#x4EC0;&#x4E48;&#x770B;&#x6CD5;&#x3002;&#x8FD9;&#x8BA9;&#x6211;&#x60F3;&#x8D77;&#x4E86; Comet &#x5BF9; Sketch &#x610F;&#x5473;&#x7740;&#x4EC0;&#x4E48;&#x3002; Sketch &#x548C; Photoshop &#x5DF2;&#x7ECF;&#x6210;&#x4E3A;&#x4EA7;&#x54C1;&#x8BBE;&#x8BA1;&#x8005;&#x7684;&#x9996;&#x9009;&#x5DE5;&#x5177;&#xFF0C;&#x800C;&#x4E14;&#x5927;&#x90E8;&#x5206;&#x6211;&#x4ECA;&#x5929;&#x4EA4;&#x6D41;&#x7684;&#x8BBE;&#x8BA1;&#x8005;&#x90FD;&#x5DF2;&#x7ECF;&#x4ECE; Photoshop &#x5207;&#x6362;&#x5230; Sketch &#x4E86;&#x3002; &#x4EA7;&#x54C1;&#x539F;&#x578B;&#x5DF2;&#x7ECF;&#x6210;&#x4E3A;&#x4EA7;&#x54C1;&#x8BBE;&#x8BA1;&#x7684;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#xFF0C;&#x7136;&#x800C;&#x76F4;&#x5230; Comet &#x51FA;&#x73B0;&#x4E4B;&#x524D;&#xFF0C; Adobe &#x5728;&#x8FD9;&#x4E2A;&#x9886;&#x57DF;&#x6CA1;&#x6709;&#x505A;&#x51FA;&#x4EFB;&#x4F55;&#x5EFA;&#x6811;&#x3002; Adobe &#x4E5F;&#x610F;&#x8BC6;&#x5230;&#x7C7B;&#x4F3C;&#x4E8E; Sketch &#x7684;&#x7B80;&#x5355;&#x800C;&#x4E13;&#x6CE8;&#x7684;&#x8BBE;&#x8BA1;&#x5DE5;&#x5177;&#x4F1A;&#x9010;&#x6E10;&#x6D41;&#x884C;&#x666E;&#x53CA;&#xFF0C;&#x53D8;&#x6210;&#x4EA7;&#x54C1;&#x8BBE;&#x8BA1;&#x8005;&#x7684;&#x9996;&#x9009;&#x5DE5;&#x5177;&#xFF0C;&#x8FD9;&#x53EF;&#x80FD;&#x5BF9; Comet &#x7684;&#x95EE;&#x4E16;&#x5145;&#x5F53;&#x4E86;&#x91CD;&#x8981;&#x7684;&#x89D2;&#x8272;&#x3002; &#x6211;&#x5F53;&#x65F6;&#x7684;&#x60F3;&#x6CD5;&#x662F;&#x5982;&#x679C;&#x6211;&#x662F; Pieter &#xFF0C;&#x6211;&#x4E00;&#x5B9A;&#x4F1A;&#x5413;&#x5F97;&#x5C41;&#x6EDA;&#x5C3F;&#x6D41;&#x3002;&#x6211;&#x5468;&#x56F4;&#x7684;&#x8C08;&#x8BDD;&#x90FD;&#x662F;&#x5173;&#x4E8E; Pieter &#xFF0C; Comet &#x4EE5;&#x53CA; Sketch &#x5C06;&#x5982;&#x4F55;&#x53CD;&#x51FB;&#x7684;&#x3002;&#x5F53;&#x65F6;&#xFF0C;&#x6211;&#x975E;&#x5E38;&#x4E25;&#x5389;&#x7684;&#x8DDF; Pieter &#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x4ED6;&#x60F3;&#x907F;&#x514D;&#x516C;&#x53F8;&#x7834;&#x4EA7;&#xFF0C;&#x4ED6;&#x5C31;&#x9700;&#x8981;&#x878D;&#x8D44;&#x5E76;&#x53D1;&#x5C55; Sketch &#x3002; David &#x548C; Goliath &#xFF0C;&#x4E5F;&#x8BB8;&#x73B0;&#x5728;&#x89D2;&#x8272;&#x8981;&#x5BF9;&#x6362;&#x4E00;&#x4E0B;&#x3002; &#x6211;&#x63A5;&#x7740;&#x8BF4;&#xFF0C;&#x5C3D;&#x7BA1; Sketch &#x4ECE;&#x53D1;&#x5E03;&#x4EE5;&#x6765;&#x5DF2;&#x7ECF;&#x8FDE;&#x7EED;4&#x5E74;&#x591A;&#x53D6;&#x5F97;&#x4E86;&#x826F;&#x597D;&#x53D1;&#x5C55;&#xFF1B;&#x4F46;&#x5B83;&#x6CA1;&#x6709;&#x5728;&#x539F;&#x8F68;&#x9053;&#x4E0A;&#x9AD8;&#x901F;&#x63D0;&#x5347;&#x6765;&#x7EF4;&#x6301;&#x5B83;&#x5E94;&#x6709;&#x7684;&#x5730;&#x4F4D;&#x3002; &#x6211;&#x610F;&#x8BC6;&#x5230; Pieter &#x4E0D;&#x7ECF;&#x5E38;&#x63A5;&#x53D7;&#x91C7;&#x8BBF;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4E0D;&#x786E;&#x5B9A;&#x4ED6;&#x548C;&#x6211;&#x804A;&#x5929;&#x8C08;&#x8BBA;&#x611F;&#x89C9;&#x5982;&#x4F55;&#xFF0C;&#x66F4;&#x4E0D;&#x7528;&#x8BF4;&#x8C08;&#x8BBA; Comet vs Sketch &#x4E86;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x5F53;&#x6211;&#x548C;&#x4ED6;&#x4EA4;&#x6D41;&#x7684;&#x65F6;&#x5019;&#xFF0C; Pieter &#x662F;&#x4EB2;&#x5207;&#x800C;&#x53C8;&#x5F00;&#x6717;&#x7684;&#x3002;&#x4E0B;&#x9762;&#x662F;&#x6211;&#x4EEC;&#x804A;&#x5929;&#x7684;&#x4E00;&#x4E9B;&#x4EAE;&#x70B9;&#x3002; &#x4F60;&#x600E;&#x4E48;&#x5411;&#x6211;&#x4EEC;&#x7684;&#x7236;&#x6BCD;&#x90A3;&#x4EE3;&#x4EBA;&#x63CF;&#x8FF0; Sketch &#xFF1F; &#x5411;&#x6211;&#x7684;&#x7236;&#x6BCD;&#x89E3;&#x91CA; Sketch &#x662F;&#x4EC0;&#x4E48;&#x662F;&#x975E;&#x5E38;&#x56F0;&#x96BE;&#x7684;&#x3002;&#x5C31;&#x6211;&#x6765;&#x8BF4;&#xFF0C;&#x4ECE;&#x6839;&#x672C;&#x4E0A;&#xFF0C;&#x5B83;&#x662F;&#x7528;&#x4E8E;&#x6570;&#x5B57;&#x5316;&#x8BBE;&#x8BA1;&#x7684;&#x7ED8;&#x56FE;&#x5E94;&#x7528;&#x3002;&#x5B83;&#x65E2;&#x4E0D; _&#x4EC5;&#x4EC5;_ &#x662F;&#x4E2A;&#x7ED8;&#x56FE;&#x5E94;&#x7528;&#xFF0C;&#x4E5F;&#x4E0D; _&#x4EC5;&#x4EC5;_ &#x662F;&#x4E2A;&#x56FE;&#x7247;&#x7F16;&#x8F91;&#x5668;&#x3002;&#x5B83;&#x4F7F;&#x7528;&#x8FD9;&#x4E9B;&#x4EE5;&#x53CA;&#x5176;&#x4ED6;&#x5F88;&#x591A;&#x5DE5;&#x5177;&#xFF0C;&#x8BA9;&#x4F60;&#x6269;&#x5C55;&#x548C;&#x7EC6;&#x5316;&#x4F60;&#x5E0C;&#x671B;&#x751F;&#x4EA7;&#x7684;&#x4EA7;&#x54C1;&#x2014;&#x6700;&#x80FD;&#x4EE3;&#x8868;&#x4F60;&#x827A;&#x672F;&#x6027;&#x548C;&#x521B;&#x9020;&#x6027;&#x7684;&#x4EA7;&#x54C1;&#x3002;&#x5B83;&#x540C;&#x65F6;&#x529B;&#x4E89;&#x8BA9;&#x4F60;&#x6446;&#x8131;&#x90A3;&#x4E9B;&#x53EF;&#x7528;&#x7684;&#x8BBE;&#x8BA1;&#x5DE5;&#x5177;&#x7684;&#x675F;&#x7F1A;&#x3002;&#x8FD9;&#x662F;&#x4E2A;&#x5F88;&#x68D2;&#x7684;&#x95EE;&#x9898;&#x3002;Geoff&#xFF0C;&#x4F60;&#x5982;&#x4F55;&#x53BB;&#x63CF;&#x8FF0;&#x5B83;&#x505A;&#x4E86;&#x4EC0;&#x4E48;&#xFF1F;&#x56E0;&#x4E3A;&#x8FD9;&#x4E48;&#x591A;&#x5E74;&#x8FC7;&#x53BB;&#x4E86;&#xFF0C;&#x6211;&#x8FD8;&#x771F;&#x6CA1;&#x6709;&#x4E00;&#x4E2A;&#x7B80;&#x6D01;&#x5168;&#x9762;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x63CF;&#x8FF0;&#x5B83;&#x3002; &#x54C8;&#xFF0C;&#x6211;&#x81EA;&#x5DF1;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x8FC7;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x7B54;&#x6848;&#x3002;&#x4F60;&#x8BA4;&#x4E3A;&#x53EF;&#x4EE5;&#x628A;&#x5B83;&#x63CF;&#x8FF0;&#x6210;&#x4E00;&#x4E2A;&#x5E2E;&#x52A9;&#x4F60;&#x8BBE;&#x8BA1;&#x5E94;&#x7528;&#x7684;&#x5E94;&#x7528;&#xFF1F; &#x662F;&#x7684;&#xFF01;&#x6700;&#x521D;&#x6211;&#x4EEC;&#x5C31;&#x662F;&#x4E3A;&#x4E86;&#x7F51;&#x7AD9;&#x548C;&#x56FE;&#x7247;&#x800C;&#x8BBE;&#x8BA1;&#x4E86; Sketch &#xFF0C;&#x4E4B;&#x540E;&#x968F;&#x7740;&#x8BBE;&#x8BA1;&#x5E94;&#x7528;&#x8D8A;&#x6765;&#x8D8A;&#x6D41;&#x884C;&#xFF0C;&#x5B83;&#x4E5F;&#x6D41;&#x884C;&#x8D77;&#x6765;&#x3002;&#x4E0D;&#x8FC7;&#x90A3;&#x662F;&#x521D;&#x8877;&#x3002; &#x5F53;&#x4F60;&#x7740;&#x624B;&#x8BBE;&#x8BA1;&#x5B83;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x73B0;&#x5728;&#x7684; Sketch &#x662F;&#x4F60;&#x6240;&#x5E0C;&#x671B;&#x7684;&#x6837;&#x5B50;&#x4E48;&#xFF1F; &#x662F;&#x7684;&#xFF0C;&#x4E3A;&#x4E86;&#x7F51;&#x7AD9;&#x3001;&#x5E94;&#x7528;&#x3001;&#x548C;&#x56FE;&#x6807;&#x3002;&#x90A3;&#x662F;&#x6700;&#x521D;&#x7684;&#x60F3;&#x6CD5;&#x3002; &#x4F60;&#x8BA4;&#x4E3A;&#x4F60;&#x5DF2;&#x7ECF;&#x6210;&#x529F;&#x4E86;&#x4E48;&#xFF1F; &#x6211;&#x60F3;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x6210;&#x529F;&#x4E86;&#x3002;&#x6211;&#x4EEC;&#x505A;&#x51FA;&#x6765;&#x80FD;&#x6EE1;&#x8DB3;&#x6211;&#x4EEC;&#x6700;&#x521D;&#x76EE;&#x6807;&#x7684;&#x5E94;&#x7528;&#xFF0C;&#x5BF9;&#x4E8E;&#x6211;&#x6765;&#x8BF4;&#x8FD9;&#x5DF2;&#x7ECF;&#x662F;&#x67D0;&#x79CD;&#x610F;&#x4E49;&#x4E0A;&#x7684;&#x6210;&#x529F;&#x4E86;&#x3002; &#x4F60;&#x73B0;&#x5728;&#x7684;&#x516C;&#x53F8;&#x662F;&#x4EC0;&#x4E48;&#x6837;&#x7684;&#xFF1F; &#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#x53EA;&#x6709;&#x6211;&#x559D;&#x6211;&#x7684;&#x670B;&#x53CB;&#xFF0C;&#x73B0;&#x5728;&#x5DF2;&#x7ECF;&#x6709;&#x4E86;13&#x4E2A;&#x4EBA;&#x3002;&#x6709;&#x4EBA;&#x8EAB;&#x517C;&#x591A;&#x804C;&#xFF0C;&#x4E0D;&#x8FC7;&#x6211;&#x53EF;&#x4EE5;&#x8BF4;&#x6709;6&#x4E2A;&#x5F00;&#x53D1;&#xFF0C;&#x4E00;&#x4E9B;&#x8BBE;&#x8BA1;&#x5E08;&#xFF0C;&#x652F;&#x6301;&#xFF0C;&#x6D4B;&#x8BD5;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x4E9B;&#x4EBA;&#x5904;&#x7406;&#x63D2;&#x4EF6;&#x548C;&#x811A;&#x672C;&#x3002; &#x4F60;&#x5BF9;&#x4F60;&#x7684;&#x5458;&#x5DE5;&#x6709;&#x4EC0;&#x4E48;&#x5E0C;&#x671B;&#xFF1F; &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x597D;&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x5E0C;&#x671B;&#x4ED6;&#x4EEC;&#x80FD;&#x4ECE;&#x6784;&#x5EFA;&#x8FD9;&#x4E2A;&#x4EA7;&#x54C1;&#x4E2D;&#x83B7;&#x5F97;&#x81EA;&#x8C6A;&#x611F;&#xFF0C;&#x53EF;&#x4EE5;&#x9A84;&#x50B2;&#x7684;&#x8BF4;&#x4ED6;&#x4EEC;&#x5728;&#x5F00;&#x53D1; Sketch&#x3002;&#x6BCF;&#x4E2A;&#x5458;&#x5DE5;&#x90FD;&#x76F8;&#x8DDD;&#x9065;&#x8FDC;&#x3002;&#x6211;&#x4EEC;&#x62DB;&#x8058;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x7801;&#x519C;&#x4F4F;&#x5728; Hebrides&#xFF0C;&#x82CF;&#x683C;&#x5170;&#x6D77;&#x5CB8;&#x7684;&#x4E00;&#x4E2A;&#x5C9B;&#x4E0A;&#x3002;&#x4E0D;&#x7528;&#x8BF4;&#xFF0C;&#x8FD9;&#x4E0D;&#x662F;&#x4F60;&#x6240;&#x8C13;&#x7684;&#x7D27;&#x5BC6;&#x5B9E;&#x9645;&#x7684;&#x529E;&#x516C;&#x5BA4;&#x6587;&#x5316;&#x3002;&#x6211;&#x4EEC;&#x65E2;&#x4E0D;&#x4F1A;&#x6BCF;&#x5929;&#x89C1;&#x9762;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x4E00;&#x8D77;&#x5403;&#x5348;&#x996D;&#x3002;&#x6070;&#x6070;&#x76F8;&#x53CD;&#xFF0C;&#x6211;&#x4EEC;&#x4E00;&#x5E74;&#x53EA;&#x4F1A;&#x89C1;&#x4E00;&#x5230;&#x4E24;&#x9762;&#x3002;&#x548C;&#x5176;&#x4ED6;&#x540C;&#x7C7B;&#x516C;&#x53F8;&#x6BD4;&#xFF0C;&#x6211;&#x4EEC;&#x8FD8;&#x662F;&#x6709;&#x70B9;&#x4E0D;&#x540C;&#x7684;&#x6D3B;&#x529B;&#x3002;&#x6700;&#x540E;&#xFF0C;&#x6211;&#x5E0C;&#x671B;&#x4ED6;&#x4EEC;&#x4EAB;&#x53D7;&#x73B0;&#x5728;&#x7684;&#x5DE5;&#x4F5C;&#x3002;&#x6211;&#x5E0C;&#x671B;&#x4ED6;&#x4EEC;&#x80FD;&#x591F;&#x5728;&#x89E3;&#x51B3;&#x5404;&#x79CD;&#x56F0;&#x96BE;&#x95EE;&#x9898;&#x65F6;&#x611F;&#x5230;&#x6311;&#x6218;&#x3002;&#x6211;&#x8BA4;&#x4E3A;&#x6709;&#x8BB8;&#x591A;&#x5145;&#x6EE1;&#x6311;&#x6218;&#x7684;&#x9886;&#x57DF;&#x6765;&#x4FDD;&#x6301;&#x4ED6;&#x4EEC;&#x7684;&#x5174;&#x8DA3;&#x3002;&#x6211;&#x7EDD;&#x4E0D;&#x60F3;&#x628A;&#x4ED6;&#x4EEC;&#x7D2F;&#x6B7B;&#xFF0C;&#x53EA;&#x60F3;&#x4ED6;&#x4EEC;&#x611F;&#x5230;&#x5DE5;&#x4F5C;&#x548C;&#x6311;&#x6218;&#x7684;&#x5E73;&#x8861;&#x3002; &#x516C;&#x53F8;&#x4E0D;&#x5728;&#x7845;&#x8C37;&#x6709;&#x4EC0;&#x4E48;&#x597D;&#x5904;&#xFF1F; &#x516C;&#x53F8;&#x9009;&#x5740;&#x5728;&#x7845;&#x8C37;&#x6709;&#x5F88;&#x591A;&#x597D;&#x5904;&#x3002;&#x62DC;&#x8BBF;&#x6295;&#x8D44;&#x4EBA;&#x66F4;&#x52A0;&#x5BB9;&#x6613;&#xFF0C;&#x5728;&#x8C37;&#x5916;&#x5C31;&#x6BD4;&#x8F83;&#x96BE;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x4E8B;&#x5B9E;&#x4E0A;&#x8DDD;&#x79BB;&#x4E0D;&#x662F;&#x95EE;&#x9898;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x559C;&#x6B22;&#x8FDC;&#x79BB;&#x6295;&#x8D44;&#x5708;&#x3002; &#x6211;&#x4E00;&#x76F4;&#x8BA4;&#x4E3A;&#x7845;&#x8C37;&#x6709;&#x70B9;&#x81EA;&#x6211;&#x9676;&#x9189;&#x4E86;&#x3002;&#x6211;&#x8BA4;&#x4E3A;&#x6709;&#x4E2A;&#x65C1;&#x89C2;&#x8005;&#x7684;&#x89C6;&#x89D2;&#x662F;&#x5F88;&#x6709;&#x7528;&#x7684;&#x3002;&#x6211;&#x5DF2;&#x7ECF;&#x53BB;&#x90A3;&#x91CC;&#x5F88;&#x591A;&#x6B21;&#x4E86;&#x3002;&#x6BCF;&#x4E2A;&#x4E0E;&#x4F60;&#x4EA4;&#x6D41;&#x7684;&#x4EBA;&#x770B;&#x4E0A;&#x53BB;&#x90FD;&#x505A;&#x7740;&#x8F6F;&#x4EF6;&#x6216;&#x8BBE;&#x8BA1;&#x5DE5;&#x4F5C;&#xFF0C;&#x8FD9;&#x8BA9;&#x6211;&#x611F;&#x6FC0;&#x6211;&#x5E73;&#x51E1;&#x53C8;&#x65E5;&#x590D;&#x4E00;&#x65E5;&#x7684;&#x751F;&#x6D3B;&#x3002;&#x7531;&#x4E8E;&#x4E0D;&#x5728;&#x90A3;&#x91CC;&#xFF0C;&#x6211;&#x514D;&#x4E8E;&#x6C89;&#x6D78;&#x5728;&#x81EA;&#x6211;&#x9676;&#x9189;&#x7684;&#x5BF9;&#x8BDD;&#x4E2D;&#x2014;&#x2014;&#x6211;&#x5904;&#x5728;&#x4E00;&#x4E2A;&#x5B8C;&#x5168;&#x4E0D;&#x540C;&#x7684;&#x4E16;&#x754C;&#x3002; &#x4E8B;&#x5B9E;&#x4E0A;&#x6211;&#x4E0D;&#x5728;&#x7845;&#x8C37;&#x8FD8;&#x610F;&#x5473;&#x7740;&#x6211;&#x4E0D;&#x7528;&#x652F;&#x4ED8;&#x9AD8;&#x989D;&#x7684;&#x79DF;&#x91D1;&#x548C;&#x5176;&#x4ED6;&#x989D;&#x5916;&#x7684;&#x751F;&#x6D3B;&#x652F;&#x51FA;&#x3002;&#x6211;&#x60F3;&#x53E6;&#x4E00;&#x4E2A;&#x4F18;&#x70B9;&#x662F;&#x6211;&#x548C;&#x5458;&#x5DE5;&#x4EEC;&#x4F4F;&#x7684;&#x8DDD;&#x79BB;&#x5F88;&#x8FDC;&#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x6211;&#x4EEC;&#x4E0D;&#x9700;&#x8981;&#x548C;&#x6211;&#x4EEC;&#x4F4F;&#x7684;&#x8FD1;&#x7684;&#x4EBA;&#x7ADE;&#x4E89;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x96C7;&#x4F63;&#x5E78;&#x798F;&#x7684;&#x5C45;&#x4F4F;&#x5728;&#x82CF;&#x683C;&#x5170;&#x6D77;&#x5CB8;&#x5916;&#x4E00;&#x4E2A;&#x5C0F;&#x5C9B;&#x4E0A;&#x7684;&#x4EBA;&#xFF0C;&#x5E76;&#x4E14;&#x96C7;&#x4F63;&#x4ED6;&#x4EEC;&#x4EC5;&#x4EC5;&#x662F;&#x56E0;&#x4E3A;&#x4ED6;&#x4EEC;&#x5F88;&#x4F18;&#x79C0;&#x800C;&#x4E0D;&#x9700;&#x8981;&#x4ED6;&#x4EEC;&#x642C;&#x5BB6;&#x5230;&#x65E7;&#x91D1;&#x5C71;&#x3001;&#x963F;&#x59C6;&#x65AF;&#x7279;&#x4E39;&#x3001;&#x6216;&#x5176;&#x5B83;&#x5730;&#x65B9;&#x3002; &#x8FC7;&#x53BB;&#x7684;&#x4E00;&#x5E74;&#x4F60;&#x5B66;&#x5230;&#x4E86;&#x4EC0;&#x4E48;&#x6765;&#x63A8;&#x52A8;&#x516C;&#x53F8;&#x4E0B;&#x4E00;&#x5E74;&#x7684;&#x53D1;&#x5C55;&#xFF1F; &#x8FC7;&#x53BB;&#x4E00;&#x5E74;&#x6211;&#x4EEC;&#x6269;&#x5927;&#x4E86;&#x516C;&#x53F8;&#x89C4;&#x6A21; - &#x53EF;&#x80FD;&#x662F;&#x4E4B;&#x524D;&#x7684;&#x4E24;&#x500D;&#x3002;&#x6240;&#x4EE5;&#x53BB;&#x5E74;&#x6211;&#x5B66;&#x4F1A;&#x4E86;&#x5982;&#x4F55;&#x7BA1;&#x7406;&#x66F4;&#x591A;&#x7684;&#x5458;&#x5DE5;&#xFF0C;&#x5982;&#x4F55;&#x52A0;&#x901F;&#x4ED6;&#x4EEC;&#x5904;&#x7406;&#x6211;&#x4EEC;&#x505A;&#x7684;&#x6BCF;&#x4EF6;&#x4E8B;&#x3002;&#x6211;&#x8BA4;&#x4E3A;&#x63A5;&#x4E0B;&#x6765;&#x7684;&#x4E00;&#x5E74;&#x6211;&#x4EEC;&#x5C06;&#x52B3;&#x6709;&#x6240;&#x5F97;&#x3002;&#x56E0;&#x4E3A;&#x4F60;&#x77E5;&#x9053;&#x6770;&#x592B;&#xFF0C;&#x5458;&#x5DE5;&#x9700;&#x8981;&#x82B1;&#x65F6;&#x95F4;&#x53BB;&#x4E86;&#x89E3;&#x4EE3;&#x7801;&#xFF0C;&#x516C;&#x53F8;&#x7684;&#x8FD0;&#x4F5C;&#x65B9;&#x5F0F;&#x548C;&#x5176;&#x4ED6;&#x4E00;&#x5207;&#x3002;&#x6211;&#x60F3;&#x7ECF;&#x8FC7;&#x4E86;&#x53BB;&#x5E74;&#x5927;&#x5BB6;&#x5DF2;&#x7ECF;&#x719F;&#x6089;&#x4E86;&#x6240;&#x6709;&#xFF0C;&#x8FD9;&#x5C06;&#x6709;&#x5229;&#x4E8E;&#x6211;&#x4EEC;&#x6211;&#x4EEC;&#x53D6;&#x5F97;&#x66F4;&#x591A;&#x7684;&#x6210;&#x679C;&#x3002;&#x8FD9;&#x4E5F;&#x610F;&#x5473;&#x7740;&#x6211;&#x73B0;&#x5728;&#x77E5;&#x9053;&#x5982;&#x4F55;&#x7BA1;&#x7406;&#x516C;&#x53F8;&#x7684;&#x6210;&#x957F;&#x3002; &#x5728;&#x516C;&#x53F8;&#x8FC7;&#x53BB;&#x53D1;&#x5C55;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F60;&#x9047;&#x5230;&#x4E86;&#x54EA;&#x4E9B;&#x6311;&#x6218;? &#x6211;&#x4EEC;&#x4E00;&#x76F4;&#x548C;&#x6709;&#x5F88;&#x591A;&#x94B1;&#x7684;&#x5927;&#x516C;&#x53F8;&#x4EEC;&#x7ADE;&#x4E89;&#xFF0C;&#x5E76;&#x4E14;&#x6211;&#x4EEC;&#x4E0D;&#x80FD;&#x548C;&#x4ED6;&#x4EEC;&#x6B63;&#x9762;&#x7ADE;&#x4E89;&#x3002;&#x800C;&#x4E14;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x7684;&#x6709;&#x4E13;&#x957F;&#x7684;&#x4EBA;&#x975E;&#x5E38;&#x7684;&#x5C11;&#x3002;&#x627E;&#x5230;&#x6EE1;&#x8DB3;&#x6211;&#x4EEC;&#x9700;&#x6C42;&#x7684;&#x4EBA;&#x5E76;&#x4E0D;&#x5BB9;&#x6613;&#xFF0C;&#x800C;&#x4E14;&#x8981;&#x6C42;&#x4ED6;&#x4EEC;&#x60F3;&#x8981;&#x8FDC;&#x7A0B;&#x5DE5;&#x4F5C;&#x5C31;&#x66F4;&#x96BE;&#x4E86;&#x3002;&#x6240;&#x4EE5;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x53EA;&#x62DB;&#x6536;&#x80FD;&#x591F;&#x7CBE;&#x786E;&#x5730;&#x6EE1;&#x8DB3;&#x6211;&#x4EEC;&#x9700;&#x6C42;&#x7684;&#x4EBA;&#xFF0C;&#x6311;&#x9009;&#x53EF;&#x5229;&#x7528;&#x7684;&#x5458;&#x5DE5;&#x6709;&#x70B9;&#x6311;&#x6218;&#x6027;&#x3002; &#x4F60;&#x62FF;&#x8FC7;&#x6295;&#x8D44;&#x4E48;&#xFF1F; &#x6CA1;&#x6709;&#xFF0C;&#x6211;&#x4EEC;&#x90FD;&#x662F;&#x5B8C;&#x5168;&#x7684;&#x81EA;&#x7B79;&#x8D44;&#x91D1;&#x3002;&#x6CA1;&#x6709;&#x5176;&#x4ED6;&#x7684;&#x6295;&#x8D44;&#x8005;&#x3002; &#x4F60;&#x66FE;&#x7ECF;&#x88AB;&#x5916;&#x9762;&#x7684;&#x6295;&#x8D44;&#x5438;&#x5F15;&#x8FC7;&#x4E48;&#xFF1F; &#x6CA1;&#x6709;&#xFF0C;&#x6211;&#x4ECE;&#x672A;&#x88AB;&#x5438;&#x5F15;&#x8FC7;&#x3002;&#x6211;&#x4EEC;&#x80FD;&#x81EA;&#x7ED9;&#x81EA;&#x8DB3;&#x5E76;&#x4E14;&#x83B7;&#x5229;&#x3002;&#x5982;&#x679C;&#x6211;&#x63A5;&#x53D7;&#x4E86;&#x4E00;&#x9879;&#x6295;&#x8D44;&#xFF0C;&#x8FD9;&#x5C06;&#x610F;&#x5473;&#x7740;&#x628A;&#x4E00;&#x4E2A;&#x76F8;&#x5F53;&#x5927;&#x7684;&#x4E00;&#x90E8;&#x5206;&#x516C;&#x53F8;&#x4EA4;&#x7ED9;&#x4E86;&#x4EC5;&#x4EC5;&#x53EF;&#x80FD;&#x662F;&#x901A;&#x8FC7;&#x67D0;&#x79CD;&#x6E20;&#x9053;&#x77E5;&#x9053;&#x6211;&#x4EEC;&#x80FD;&#x83B7;&#x5F97;&#x5F88;&#x5927;&#x5229;&#x6DA6;&#x7684;&#x5916;&#x90E8;&#x6295;&#x8D44;&#x8005;&#xFF0C;&#x51FA;&#x4E8E;&#x5BF9; Sketch &#x7684;&#x6781;&#x5927;&#x5174;&#x8DA3;&#x6211;&#x53EF;&#x80FD;&#x4E0D;&#x4F1A;&#x540C;&#x610F;&#x6295;&#x8D44;&#x3002;&#x6211;&#x60F3;&#x53BB;&#x4EE5;&#x4E00;&#x79CD;&#x6211;&#x8BA4;&#x4E3A;&#x5408;&#x9002;&#x7684;&#x65B9;&#x5F0F;&#x53BB;&#x53D1;&#x5C55;&#x516C;&#x53F8;&#xFF0C;&#x5E76;&#x4E14;&#x6211;&#x4E0D;&#x60F3;&#x53BB;&#x4ECE;&#x4E00;&#x4E2A;&#x6BD4;&#x6211;&#x671F;&#x5F85;&#x8FD8;&#x5927;&#x7684;&#x4EBA;&#x8EAB;&#x4E0A;&#x83B7;&#x5F97;&#x538B;&#x529B;&#x3002;&#x800C;&#x4E14;&#xFF0C;&#x62FF;&#x4E86;&#x90A3;&#x7B14;&#x94B1;&#xFF0C;&#x6211;&#x53EF;&#x80FD;&#x88AB;&#x8981;&#x6C42;&#x53BB;&#x4EE5;&#x4E00;&#x79CD;&#x957F;&#x8FDC;&#x6765;&#x770B;&#x6211;&#x4E0D;&#x8BA4;&#x4E3A;&#x662F;&#x6700;&#x597D;&#x7684;&#x901F;&#x5EA6;&#x6765;&#x5F00;&#x53D1;&#x8F6F;&#x4EF6;&#x3002;&#x4E0E;&#x4E4B;&#x76F8;&#x7C7B;&#xFF0C;&#x6211;&#x4E0D;&#x60F3;&#x8981;&#x53BB;&#x88AB;&#x5F3A;&#x8FEB;&#x53BB;&#x62DB;&#x5F88;&#x591A;&#x7684;&#x4EBA;&#x4EE5;&#x81F3;&#x4E8E;&#x6211;&#x4EEC;&#x65E0;&#x6CD5;&#x83B7;&#x5229;&#xFF0C;&#x4E4B;&#x540E;&#x53EA;&#x597D;&#x88AB;&#x5F3A;&#x8FEB;&#x53BB;&#x62FF;&#x66F4;&#x591A;&#x7684;&#x6295;&#x8D44;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x80FD;&#x4F1A;&#x5F88;&#x591A;&#x7684;&#x4ECE;6&#x4E2A;&#x5F00;&#x53D1;&#x8005;&#x53D1;&#x5C55;&#x5230;20&#x4E2A;&#x6216;&#x8005;30&#x4E2A;&#xFF0D;&#x5728;&#x8FD9;&#x4E2A;&#x65F6;&#x95F4;&#x70B9;&#x6211;&#x4E0D;&#x8BA4;&#x4E3A;&#x662F;&#x806A;&#x660E;&#x7684;&#x3002;&#x6240;&#x4EE5;&#x5728;&#x77ED;&#x671F;&#x5185;&#x6211;&#x76EE;&#x524D;&#x8FD8;&#x6CA1;&#x6709;&#x770B;&#x5230;&#x62FF;&#x5916;&#x90E8;&#x8D44;&#x91D1;&#x7684;&#x597D;&#x5904;&#x3002; &#x4F60;&#x5BF9;&#x5916;&#x90E8;&#x6295;&#x8D44;&#x6709;&#x8FD9;&#x6837;&#x7684;&#x770B;&#x6CD5;&#xFF0C;&#x4F60;&#x4E0D;&#x62C5;&#x5FC3;&#x5176;&#x4ED6;&#x4EBA;&#x4F1A;&#x8D85;&#x8FC7;&#x4F60;&#x4E48;&#xFF1F; &#x597D;&#x5427;&#xFF0C;&#x6211;&#x62C5;&#x5FC3;&#x4E5F;&#x4E0D;&#x62C5;&#x5FC3;&#x3002;&#x6211;&#x4F1A;&#x4E00;&#x76F4;&#x62C5;&#x5FC3;&#x5176;&#x4ED6;&#x4EBA;&#x5C06;&#x4F1A;&#x505A;&#x5230;&#x4F60;&#x505A;&#x4E0D;&#x5230;&#x7684;&#x4E1C;&#x897F;&#x3002;&#x4F46;&#x662F;&#x4E0E;&#x6B64;&#x540C;&#x65F6;&#x6211;&#x8BA4;&#x4E3A;&#x4E00;&#x610F;&#x5B64;&#x884C;&#x7684;&#x53D1;&#x5C55;&#x516C;&#x53F8;&#x4F1A;&#x803D;&#x8BEF;&#x516C;&#x53F8;&#x7684;&#x65F6;&#x95F4;&#xFF0C;&#x5305;&#x62EC;&#x62DB;&#x6536;&#x65B0;&#x7684;&#x804C;&#x5458;&#xFF0C;&#x8BA9;&#x4ED6;&#x4EEC;&#x5728;&#x6B63;&#x786E;&#x7684;&#x65B9;&#x5411;&#x524D;&#x8FDB;&#xFF0C;&#x7B49;&#x7B49;&#x3002;&#x6211;&#x8BA4;&#x4E3A;&#x6709;&#x4E00;&#x4E2A;&#x5C0F;&#x800C;&#x53C8;&#x4E13;&#x6CE8;&#x7684;&#x56E2;&#x961F;&#x4F60;&#x80FD;&#x591F;&#x505A;&#x7684;&#x66F4;&#x591A;&#x3002;&#x6211;&#x4E0D;&#x8BA4;&#x4E3A;&#x4EC5;&#x62E5;&#x6709;&#x66F4;&#x591A;&#x7684;&#x4EBA;&#x5C31;&#x610F;&#x5473;&#x7740;&#x4F60;&#x53EF;&#x4EE5;&#x524D;&#x8FDB;&#x7684;&#x66F4;&#x5FEB;&#x66F4;&#x8FDC;&#x3002; &#x4F60;&#x4EEC;&#x516C;&#x53F8;&#x6700;&#x5927;&#x7684;&#x5F31;&#x70B9;&#x662F;&#x4EC0;&#x4E48;&#xFF1F; &#x5371;&#x673A;&#x6765;&#x81EA;&#x6311;&#x6218;&#x8005;&#x3002; Adobe &#x51E0;&#x4E2A;&#x6708;&#x524D;&#x5BA3;&#x5E03;&#x4E86; Comet &#x3002;&#x8FD9;&#x5BF9;&#x6211;&#x4EEC;&#x65E0;&#x7591;&#x6784;&#x6210;&#x4E86;&#x4E25;&#x91CD;&#x5A01;&#x80C1;&#x3002;&#x50CF; Adobe &#x8FD9;&#x6837;&#x7684;&#x5DE8;&#x5934;&#xFF0C;&#x4E0E;&#x4ED6;&#x4EEC;&#x7ADE;&#x4E89;&#x7684;&#x98CE;&#x9669;&#x5C31;&#x662F;&#x4ED6;&#x4EEC;&#x4E0D;&#x6025;&#x4E8E;&#x6C42;&#x6210;&#x3002;&#x4ED6;&#x4EEC;&#x53EF;&#x4EE5;&#x8FB9;&#x4E8F;&#x94B1;&#x8FB9;&#x63D0;&#x6210; Comet &#x2014; &#x5E76;&#x4E14;&#x4ED6;&#x4EEC;&#x516C;&#x53F8;&#x6709;&#x8DB3;&#x591F;&#x591A;&#x7684;&#x5929;&#x624D;&#x5458;&#x5DE5;&#x6765;&#x8FD9;&#x6837;&#x505A;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x5219;&#x6D88;&#x606F;&#x7ED9;&#x6211;&#x5F88;&#x5927;&#x538B;&#x529B;&#x3002; &#x6211;&#x60F3;&#x5BF9;&#x4E8E;&#x6211;&#x4EEC;&#x7684;&#x4EA7;&#x54C1;&#x8FD8;&#x6709;&#x5F88;&#x591A;&#x7684;&#x4E1C;&#x897F;&#x53EF;&#x4EE5;&#x53BB;&#x505A;&#x3002;&#x4E5F;&#x8BB8;&#x5728;&#x8FC7;&#x53BB;&#x7684;&#x4E00;&#x5E74;&#xFF0C;&#x8FDB;&#x5C55;&#x5E76;&#x6CA1;&#x6709;&#x6211;&#x6599;&#x60F3;&#x7684;&#x5FEB;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x5C31;&#x50CF;&#x6211;&#x4EEC;&#x8BA8;&#x8BBA;&#x8FC7;&#x7684;&#xFF0C;&#x5F53;&#x4F60;&#x5E26;&#x6765;&#x65B0;&#x7684;&#x4EBA;&#x5E76;&#x4E14;&#x771F;&#x7684;&#x82B1;&#x65F6;&#x95F4;&#x8BA9;&#x4ED6;&#x4EEC;&#x6210;&#x4E3A;&#x4E00;&#x4F53;&#x3001;&#x63D0;&#x5347;&#x901F;&#x5EA6;&#x90A3;&#x662F;&#x5FC5;&#x7136;&#x8981;&#x505A;&#x7684;&#x3002;&#x800C;&#x4E14;&#x8F6F;&#x4EF6;&#x4E2D;&#x8FD8;&#x6709;&#x4E00;&#x4E9B;&#x5F88;&#x591A;&#x5E74;&#x524D;&#x6211;&#x5199;&#x7684;&#x90E8;&#x5206;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x73B0;&#x5728;&#x6269;&#x5927;&#x4E86;&#x539F;&#x6765;&#x7684;&#x8BBE;&#x8BA1;&#x8303;&#x56F4;&#x800C;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x3002;&#x8FD9;&#x9700;&#x8981;&#x65F6;&#x95F4;&#x53BB;&#x6E05;&#x7406;&#x5E76;&#x4E14;&#x5728;&#x8FC7;&#x53BB;&#x7684;&#x4E00;&#x5E74;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x6210;&#x529F;&#x7684;&#x6E05;&#x7406;&#x4E86;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#x4F46;&#x8FD8;&#x6709;&#x66F4;&#x591A;&#x7684;&#x5DE5;&#x4F5C;&#x8981;&#x505A;&#xFF0C;&#x5F53;&#x7136;&#xFF0C;&#x8FD9;&#x9700;&#x8981;&#x65F6;&#x95F4;&#x548C;&#x7CBE;&#x529B;&#x3002;&#x6211;&#x66F4;&#x5173;&#x6CE8;&#x4E8E;&#x5185;&#x90E8;&#x7684;&#x95EE;&#x9898;&#x800C;&#x4E0D;&#x662F;&#x5916;&#x90E8;&#x7684;&#x95EE;&#x9898;&#x3002; &#x6211;&#x53EF;&#x4EE5;&#x80AF;&#x5B9A;&#x5730;&#x8BF4; Sketch &#x6B63;&#x5728;&#x8695;&#x98DF; Photeshop &#x5F00;&#x521B;&#x5E76;&#x6301;&#x6709;&#x591A;&#x5E74;&#x7684;&#x5E02;&#x573A;&#x7A7A;&#x95F4;&#x3002;&#x4F60;&#x8BA4;&#x4E3A; Comet &#x4F1A;&#x8695;&#x98DF;&#x4F60;&#x4EEC;&#x7684;&#x4E48;&#xFF1F; &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x786E;&#x5B9E;&#x5730;&#x5728; Sketch &#x4E0A;&#x505A;&#x5F88;&#x591A;&#x4E8B;&#x60C5;&#x5C31;&#x50CF;&#x5EFA;&#x7ACB;&#x539F;&#x578B;&#x8BBE;&#x8BA1;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x4E0D;&#x8BA4;&#x4E3A; Comet &#x53EF;&#x4EE5;&#x5728;&#x529F;&#x80FD;&#x4E0A;&#x8D85;&#x8FC7;&#x6211;&#x4EEC;&#x3002;&#x6211;&#x8BA4;&#x4E3A;&#xFF0C;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x5EFA;&#x7ACB;&#x7684; Sketch &#x5468;&#x56F4;&#x7684;&#x751F;&#x6001;&#x7CFB;&#x7EDF;&#x662F;&#x4E00;&#x4E2A;&#x72EC;&#x7279;&#x7684;&#x7ADE;&#x4E89;&#x4F18;&#x52BF;&#xFF0C;&#x6211;&#x4EEC;&#x62E5;&#x6709;&#x4E86; Adobe &#x65E0;&#x6CD5;&#x8F7B;&#x677E;&#x5730;&#x590D;&#x5236;&#x7684;&#x4F18;&#x52BF;&#xFF0C;&#x5305;&#x62EC;&#x96C6;&#x6210;&#x7684;&#x63D2;&#x4EF6;&#x5DE5;&#x5177;&#xFF0C;&#x5BFC;&#x51FA;&#x5230; Framer&#x3001;Origami&#x3001;Principle &#x7B49;&#x7B49;&#x3002; &#x4F60;&#x770B;&#x5230;&#x8BBE;&#x8BA1;&#x548C;&#x539F;&#x578B;&#x7684;&#x878D;&#x5408;&#x4E86;&#x4E48;&#xFF1F;&#x53C8;&#x6216;&#x8005;&#x662F;&#x603B;&#x4F1A;&#x6709;&#x5BF9;&#x4E8E;&#x66F4;&#x52A0;&#x7A81;&#x51FA;&#x5173;&#x6CE8;&#x7684;&#x5DE5;&#x5177;&#x7684;&#x9700;&#x6C42;&#xFF1F; &#x6211;&#x8BA4;&#x4E3A;&#x539F;&#x578B;&#x8BBE;&#x8BA1;&#x6709;&#x5BBD;&#x5E7F;&#x7684;&#x53D1;&#x5C55;&#x3002;&#x4E00;&#x65B9;&#x9762;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x57FA;&#x672C;&#x7684;&#x5DE5;&#x5177;&#x50CF;&#x662F;&#x539F;&#x59CB;&#x7684; Flinto &#x6240;&#x63D0;&#x4F9B;&#x7684;&#x5C4F;&#x5E55;&#x53EF;&#x89C6;&#x5316;&#x6D41;&#x7A0B;&#x3002;&#x8FD9;&#x5341;&#x5206;&#x7684;&#x6709;&#x4EF7;&#x503C;&#x3002;&#x53E6;&#x4E00;&#x65B9;&#x9762;&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x50CF;&#x662F; Origami &#x548C; Framer &#x8FD9;&#x6837;&#x4F60;&#x53EF;&#x4EE5;&#x5B8C;&#x5168;&#x81EA;&#x5B9A;&#x4E49;&#x52A8;&#x753B;&#x7684;&#x5DE5;&#x5177;&#x3002;&#x4F60;&#x53EF;&#x4EE5;&#x505A;&#x975E;&#x5E38;&#x6709;&#x8DA3;&#x7684;&#x4E8B;&#x60C5;&#x3002;&#x7136;&#x800C;&#x6211;&#x8BA4;&#x4E3A;&#x8FD9;&#x4E0D;&#x662F;&#x6BCF;&#x4E2A;&#x8BBE;&#x8BA1;&#x8005;&#x90FD;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x4E8B;&#x3002;&#x6211;&#x62C5;&#x5FC3;&#x8FD9;&#x4E9B;&#x52A8;&#x753B;&#x4F1A;&#x50CF;&#x524D;&#x4E00;&#x9635;&#x51FA;&#x7684; iOS7 &#x7684; skeuomorphic stuff &#x4E00;&#x6837;&#x505A;&#x5F97;&#x8FC7;&#x5206;&#x3002;&#x6211;&#x5F88;&#x770B;&#x91CD;&#x52A8;&#x753B;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x8BA4;&#x4E3A;&#x8BBE;&#x8BA1;&#x5E08;&#x5E94;&#x8BE5;&#x6709;&#x70ED;&#x60C5;&#x8FCE;&#x63A5;&#x65B0;&#x4E8B;&#x7269;&#x7684;&#x503E;&#x5411;&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x53EA;&#x770B;&#x539F;&#x578B;&#x8BBE;&#x8BA1;&#x3002;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x5728;&#x4ED6;&#x4EEC;&#x4E4B;&#x95F4;&#x975E;&#x5E38;&#x590D;&#x6742;&#x7684;&#x5C4F;&#x5E55;&#x8FC7;&#x5EA6;&#x4E4B;&#x95F4;&#x8FDB;&#x884C;&#x975E;&#x5E38;&#x7B80;&#x5355;&#x7684;&#x539F;&#x578B;&#x8BBE;&#x8BA1;&#x3002;&#x66FE;&#x7ECF;&#x6709;&#x88AB;&#x96C6;&#x6210;&#x8FDB; Sketch &#x7684;&#x5DE5;&#x5177;&#xFF0C;&#x4F46;&#x662F;&#x5F00;&#x53D1;&#x50CF;&#x662F; Framer &#x6216;&#x662F; Origami &#x90A3;&#x6837;&#x7684;&#x5B9E;&#x7528;&#x7A0B;&#x5E8F;&#x5C06;&#x4F1A;&#x662F;&#x975E;&#x5E38;&#x96BE;&#x7684;&#x3002;&#x4F60;&#x53EF;&#x80FD;&#x4F1A;&#x50CF;&#x662F; Photoshop &#x90A3;&#x6837;&#x628A;&#x5E94;&#x7528;&#x81A8;&#x80C0;&#x5230;&#x5927;&#x591A;&#x6570;&#x7528;&#x6237;&#x53EA;&#x4F1A;&#x4F7F;&#x7528;&#x5176;&#x4E2D;&#x4E00;&#x5C0F;&#x90E8;&#x5206;&#x529F;&#x80FD;&#x7684;&#x6837;&#x5B50;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x8BA4;&#x4E3A;&#x72EC;&#x7ACB;&#x5E94;&#x7528;&#x505A;&#x72EC;&#x7ACB;&#x7684;&#x529F;&#x80FD;&#x662F;&#x975E;&#x5E38;&#x6709;&#x4EF7;&#x503C;&#x7684;&#x3002;&#x6211;&#x4E0D;&#x8BA4;&#x4E3A;&#x6211;&#x4EEC;&#x5E94;&#x8BE5;&#x8BD5;&#x56FE;&#x628A;&#x6BCF;&#x4E2A;&#x4E1C;&#x897F;&#x6DFB;&#x52A0;&#x5230;&#x5E94;&#x7528;&#x4E2D;&#x3002; &#x4F60;&#x662F;&#x600E;&#x4E48;&#x505A;&#x51FA;&#x50CF;&#x662F;&#x8BA9; Sketch &#x4FDD;&#x6301;&#x9759;&#x6001;&#x8BBE;&#x8BA1;&#x800C;&#x4E0D;&#x662F;&#x96C6;&#x6210;&#x878D;&#x5408;&#x8FD9;&#x4E48;&#x91CD;&#x5927;&#x7684;&#x51B3;&#x5B9A;&#x5462;&#xFF1F; &#x4F60;&#x4E0D;&#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x95EE;&#x6211;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x4EBA;&#x3002;&#x6211;&#x4EEC;&#x548C;&#x5F88;&#x591A;&#x516C;&#x53F8;&#x7684;&#x8BBE;&#x8BA1;&#x5E08;&#x4EA4;&#x6D41;&#x8FC7;&#x8FD9;&#x7C7B;&#x4E8B;&#x60C5;&#x3002;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x7ED3;&#x5408;&#x4E86;&#x53CD;&#x9988;&#x548C;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x7684;&#x60F3;&#x6CD5;&#x505A;&#x51FA;&#x8FD9;&#x4E9B;&#x51B3;&#x5B9A;&#x3002; &#x4F60;&#x8BA4;&#x4E3A;&#x4EBA;&#x4EEC;&#x77E5;&#x9053;&#x4ED6;&#x4EEC;&#x60F3;&#x8981;&#x4EC0;&#x4E48;&#x4E48;&#xFF1F; &#x4ED6;&#x4EEC;&#x5F53;&#x7136;&#x77E5;&#x9053;&#x3002;&#x53BB;&#x5E74;&#x6211;&#x4EEC;&#x66FE;&#x7ECF;&#x4E0E;&#x5F88;&#x591A;&#x516C;&#x53F8;&#x7684;&#x4EBA;&#x4EA4;&#x6D41;&#x8FC7;&#xFF0C;&#x6211;&#x7ECF;&#x5E38;&#x542C;&#x5230;&#x201C; Sketch &#x5DF2;&#x7ECF;&#x5F88;&#x5B8C;&#x7F8E;&#x4E86;&#xFF0C;&#x4F60;&#x53EA;&#x9700;&#x8981;&#x52A0;&#x5165;&#x8FD9;&#x4E2A;&#x4E1C;&#x897F;&#x5C31;&#x66F4;&#x597D;&#x4E86;&#x201D;&#x3002;&#x4E00;&#x4E9B;&#x4EBA;&#x5173;&#x6CE8;&#x81EA;&#x52A8;&#x5E03;&#x5C40;&#xFF0C;&#x4E00;&#x4E9B;&#x4EBA;&#x53EF;&#x80FD;&#x5173;&#x6CE8;&#x539F;&#x578B;&#x8BBE;&#x8BA1;&#xFF0C;&#x53E6;&#x4E00;&#x4E9B;&#x4EBA;&#x5173;&#x6CE8;&#x6570;&#x636E;&#x9A71;&#x52A8;&#x8BBE;&#x8BA1;&#x3002;&#x6240;&#x4EE5;&#x7ECF;&#x5E38;&#x8FD9;&#x4E9B;&#x5EFA;&#x8BAE;&#x5BF9;&#x4E8E;&#x8BF4;&#x8BDD;&#x7684;&#x4EBA;&#x542C;&#x8D77;&#x6765;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x4F46;&#x662F;&#x4ED6;&#x4EEC;&#x8BF4;&#x7684;&#x53EA;&#x662F;&#x91C7;&#x53D6;&#x8FD9;&#x4E9B;&#x57FA;&#x672C;&#x4E0A;&#x975E;&#x5E38;&#x590D;&#x6742;&#x7684;&#x60F3;&#x6CD5;&#xFF0C;&#x800C;&#x4E14;&#x4E4B;&#x540E;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x53EA;&#x5728; Sketch &#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x5C0F;&#x5C0F;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x90A3;&#x4E48;&#x5B83;&#x5C06;&#x4F1A;&#x975E;&#x5E38;&#x5B8C;&#x7F8E;&#x3002;&#x6BCF;&#x4E2A;&#x4EBA;&#x5EFA;&#x8BAE;&#x4E00;&#x4E9B;&#x4E8B;&#x60C5;&#xFF0C;&#x90FD;&#x6CA1;&#x6709;&#x770B;&#x8D77;&#x6765;&#x76F8;&#x4F3C;&#x7684;&#x8BF7;&#x6C42;&#x751A;&#x81F3;&#x662F;&#x4E3B;&#x9898;&#x3002;&#x5E76;&#x4E14;&#x5F88;&#x591A;&#x5EFA;&#x8BAE;&#x53EF;&#x80FD;&#x542C;&#x8D77;&#x6765;&#x662F;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x53D8;&#x5316;&#xFF0C;&#x4F46;&#x662F;&#x89E3;&#x51B3;&#x8D77;&#x6765;&#x90FD;&#x975E;&#x5E38;&#x590D;&#x6742;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x4E0D;&#x5F97;&#x4E0D;&#x9009;&#x62E9;&#x548C;&#x7406;&#x89E3;&#xFF0C;&#x6211;&#x4EEC;&#x4E0D;&#x80FD;&#x6EE1;&#x8DB3;&#x6BCF;&#x4E00;&#x4E2A;&#x4EBA;&#x3002; &#x6211;&#x4E0D;&#x60F3;&#x505A;&#x4E00;&#x4E2A;&#x5B8C;&#x5168;&#x7531;&#x7528;&#x6237;&#x8BF4;&#x4EC0;&#x4E48;&#x6216;&#x662F;&#x60F3;&#x8981;&#x4EC0;&#x4E48;&#x4E3B;&#x5BFC;&#x7684;&#x5E94;&#x7528;&#x3002;&#x4FDD;&#x7559;&#x4F60;&#x81EA;&#x5DF1;&#x7684;&#x60F3;&#x6CD5;&#x800C;&#x4E0D;&#x53EA;&#x662F;&#x7528;&#x6237;&#x60F3;&#x8981;&#x4EC0;&#x4E48;&#x5C31;&#x6DFB;&#x52A0;&#x4EC0;&#x4E48;&#x3002; &#x4F60;&#x6709;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x4EF7;&#x503C;&#x89C2;&#x53BB;&#x9A71;&#x52A8;&#x8FD9;&#x4E9B;&#x51B3;&#x5B9A;&#x4E48;&#xFF1F;&#x5B83;&#x4EEC;&#x968F;&#x7740;&#x65F6;&#x95F4;&#x53D8;&#x5316;&#x4E48;&#xFF1F; &#x6211;&#x60F3;&#x6211;&#x4EEC;&#x60F3;&#x8981;&#x4EC0;&#x4E48;&#x662F;&#x76F8;&#x5F53;&#x6E05;&#x695A;&#x7684;&#x3002;&#x6211;&#x4ECE;&#x6CA1;&#x6709;&#x771F;&#x7684;&#x53BB;&#x5C1D;&#x8BD5;&#x628A;&#x4ED6;&#x4EEC;&#x5199;&#x5728;&#x4E00;&#x4E2A;&#x5355;&#x5B50;&#x4E0A;&#x7136;&#x540E;&#x8BF4;&#x8FD9;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x7684;&#x6838;&#x5FC3;&#x4EF7;&#x503C;&#x89C2;&#x548C; Sketch &#x5E94;&#x8BE5;&#x662F;&#x4EC0;&#x4E48;&#x6837;&#x7684;&#x539F;&#x5219;&#x3002;&#x6211;&#x731C;&#x6211;&#x4EEC;&#x53EA;&#x662F;&#x7ECF;&#x5E38;&#x7528;&#x601D;&#x60F3;&#x91CC;&#x7684;&#x4EF7;&#x503C;&#x89C2;&#x505A;&#x51FA;&#x51B3;&#x5B9A;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4E0D;&#x80FD;&#x591F;&#x628A;&#x4ED6;&#x4EEC;&#x544A;&#x8BC9;&#x4F60;&#xFF0C;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x6211;&#x73B0;&#x5728;&#x5217;&#x51FA;&#x4E00;&#x4E2A;&#x5355;&#x5B50;&#xFF0C;&#x6211;&#x5C06;&#x6709;&#x53EF;&#x80FD;&#x56E0;&#x4E3A;&#x6211;&#x5FD8;&#x4E86;&#x53BB;&#x5173;&#x6CE8;&#x4E00;&#x4E9B;&#x4E8B;&#x60C5;&#x800C;&#x5728;&#x4E0B;&#x5468;&#x5217;&#x51FA;&#x53E6;&#x4E00;&#x4E2A;&#x5355;&#x5B50;&#x3002; &#x5728;&#x8FD9;&#x4E2A;&#x9886;&#x57DF;&#x8C01;&#x7684;&#x8FDB;&#x5C55;&#x6700;&#x5927;&#xFF1F; &#x6211;&#x77E5;&#x9053;&#x4E00;&#x4E9B;&#x878D;&#x5408;&#x4E86; Sketch &#x7684;&#x5E94;&#x7528;&#x50CF;&#x662F; Framer &#x3001; Principle &#x548C; Flinto &#xFF0C;&#x6700;&#x8FD1;&#x90FD;&#x6709;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x66F4;&#x65B0;&#x6216;&#x8005;&#x662F;&#x5236;&#x4F5C;&#x5168;&#x65B0;&#x7684;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#xFF0C;&#x8FD9;&#x4F7F;&#x6211;&#x5341;&#x5206;&#x611F;&#x52A8;&#x3002;&#x4F46;&#x53EF;&#x80FD;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x548C; Sketch &#x76F8;&#x5173;&#x5E76;&#x4E14;&#x6211;&#x4E00;&#x76F4;&#x5173;&#x6CE8;&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x624D;&#x4F1A;&#x6709;&#x8FD9;&#x6837;&#x7684;&#x60F3;&#x6CD5;&#x3002; &#x6211;&#x4E0D;&#x4F1A;&#x6D88;&#x8017;&#x5F88;&#x591A;&#x65F6;&#x95F4;&#x5728; Tech Crunch &#x6216; Product Hunt &#x4E0A;&#x53BB;&#x5BFB;&#x627E;&#x6211;&#x5E94;&#x8BE5;&#x5173;&#x6CE8;&#x7684;&#x6700;&#x65B0;&#x7684;&#x9879;&#x76EE;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x975E;&#x5E38;&#x7684;&#x5FD9;&#xFF0C;&#x5E76;&#x4E14;&#x5BF9; Sketch &#x975E;&#x5E38;&#x611F;&#x5174;&#x8DA3;&#x3002; &#x4F60;&#x600E;&#x4E48;&#x77E5;&#x9053;&#x4F60;&#x662F;&#x4E0D;&#x662F;&#x524D;&#x8FDB;&#x7684;&#x591F;&#x5FEB;&#xFF1F; &#x6211;&#x4E0D;&#x77E5;&#x9053;&#x3002;&#x6211;&#x5E0C;&#x671B;&#x90A3;&#x80FD;&#x7B80;&#x5355;&#x4E00;&#x70B9;&#x3002;&#x5C31;&#x50CF;&#x6211;&#x8BF4;&#x6700;&#x521D;&#xFF0C;&#x6211;&#x53EA;&#x77E5;&#x9053;&#x6709;&#x4E00;&#x4E9B;&#x4E8B;&#x60C5;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x53BB;&#x5F00;&#x53D1;&#xFF0D;&#x53EA;&#x9700;&#x8981;&#x53BB;&#x66F4;&#x65B0;&#x6269;&#x5927;&#x8FD8;&#x6CA1;&#x6709;&#x5B8C;&#x6210;&#x7684;&#x90E8;&#x5206;&#x5C31;&#x53EF;&#x4EE5;&#x3002;&#x8FD9;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x5DE5;&#x4F5C;&#x4ECE;&#x6765;&#x4E5F;&#x4E0D;&#x4F1A;&#x8D70;&#x7684;&#x8DB3;&#x591F;&#x7684;&#x5FEB;&#x3002;&#x4E0E;&#x6B64;&#x540C;&#x65F6;&#xFF0C;&#x5B83;&#x4E5F;&#x662F;&#x590D;&#x6742;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4E0D;&#x80FD;&#x671F;&#x5F85;&#x5B83;&#x5728;&#x51E0;&#x4E2A;&#x6708;&#x5185;&#x5B8C;&#x6210;&#x3002;&#x6240;&#x4EE5;&#x5982;&#x679C;&#x6211;&#x524D;&#x8FDB;&#x7684;&#x8FC7;&#x5FEB;&#xFF0C;&#x6211;&#x600E;&#x4E48;&#x77E5;&#x9053;&#xFF1F;&#x6CA1;&#x6709;&#x4EBA;&#x80FD;&#x5BF9;&#x8FD9;&#x4E9B;&#x4E8B;&#x60C5;&#x8FDB;&#x884C;&#x53EF;&#x9760;&#x7684;&#x9884;&#x8A00;&#x3002;&#x6211;&#x731C;&#x6211;&#x4EEC;&#x4EC5;&#x80FD;&#x4E8B;&#x540E;&#x56DE;&#x987E;&#x3002;&#x6B64;&#x523B;&#xFF0C;&#x6211;&#x8BA4;&#x4E3A;&#x6211;&#x4EEC;&#x524D;&#x8FDB;&#x7684;&#x6B65;&#x4F10;&#x6070;&#x5230;&#x597D;&#x5904;&#x3002; &#x4F60;&#x5982;&#x4F55;&#x5E73;&#x8861;&#x8D28;&#x91CF;&#x7B49;&#x7EA7;&#xFF1F; &#x6211;&#x975E;&#x5E38;&#x6050;&#x60E7;&#x7684;&#x4E8B;&#x60C5;&#x5176;&#x4E2D;&#x4E4B;&#x4E00;&#x5C31;&#x662F;&#x516C;&#x53F8;&#x53D1;&#x5C55;&#x8FC7;&#x5FEB;&#x3002;&#x6839;&#x636E; Medium &#x548C; Hackernews &#x4E4B;&#x524D;&#x7684;&#x4E00;&#x7BC7;&#x62A5;&#x9053;&#xFF1A;Facebook &#x7684; IOS &#x5E94;&#x7528;&#x6709;&#x591A;&#x8FBE;300&#x540D;&#x5F00;&#x53D1;&#x4EBA;&#x5458;&#xFF0C;&#x8FD9;&#x662F;&#x5F88;&#x5413;&#x4EBA;&#x7684;&#x3002;&#x5BF9;&#x4E8E;&#x6211;&#x4EEC;&#xFF0C;&#x6211;&#x4EEC;&#x73B0;&#x5728;&#x6709;&#x4E00;&#x4E2A;&#x5168;&#x804C;&#x7684;&#x6D4B;&#x8BD5;&#x4EBA;&#x5458;&#x800C;&#x4E14;&#x6211;&#x4EEC;&#x5728;&#x4EE3;&#x7801;&#x5BA1;&#x67E5;&#x65B9;&#x9762;&#x4E0B;&#x4E86;&#x5F88;&#x5927;&#x529F;&#x592B;&#xFF0C;&#x6211;&#x8BA4;&#x4E3A;&#x4E3A;&#x4E86;&#x8BA9;&#x6BCF;&#x4E00;&#x884C;&#x7684;&#x4EE3;&#x7801;&#x5BA1;&#x67E5;&#x90FD;&#x662F;&#x6709;&#x6548;&#x7684;&#xFF0C;&#x5F00;&#x53D1;&#x4EBA;&#x5458;&#x6E05;&#x695A;&#x5730;&#x77E5;&#x9053;&#x81EA;&#x5DF1;&#x5728;&#x505A;&#x4EC0;&#x4E48;&#x662F;&#x5F88;&#x91CD;&#x8981;&#x7684;&#xFF0C;&#x5E76;&#x4E14;&#x4ED6;&#x4EEC;&#x5E94;&#x8BE5;&#x6709;&#x7740;&#x826F;&#x597D;&#x7684;&#x4EA4;&#x6D41;&#xFF0C;&#x76F8;&#x4E92;&#x5341;&#x5206;&#x719F;&#x6089;&#xFF0C;&#x8FD9;&#x6837;&#x4ED6;&#x4EEC;&#x5728;&#x770B;&#x5BF9;&#x65B9;&#x7684;&#x4EE3;&#x7801;&#x7684;&#x65F6;&#x5019;&#x80FD;&#x6E05;&#x695A;&#x7684;&#x77E5;&#x9053;&#x5B83;&#x7684;&#x4F5C;&#x7528;&#x3002; &#x6D4B;&#x8BD5;&#x5DF2;&#x7ECF;&#x6210;&#x4E3A; Sketch &#x6700;&#x5927;&#x7684;&#x75DB;&#x70B9;&#x4E86;&#x5417;&#xFF1F; &#x516C;&#x6B63;&#x7684;&#x8BF4;&#xFF0C;&#x662F;&#x7684;&#x3002;&#x5BF9;&#x5E94;&#x7528;&#x589E;&#x52A0;&#x9700;&#x6C42;&#x5C31;&#x50CF;&#x5F00;&#x51FF;&#x4E00;&#x4E2A;&#x590D;&#x6742;&#x7684;&#x5927;&#x5C71;&#x3002;&#x6709;&#x4E9B;&#x7B80;&#x5355;&#x7684;&#x50CF;&#x590D;&#x5236;&#x9ECF;&#x8D34;&#x3002; &#x4F46;&#x662F;&#x4ED6;&#x4EEC;&#x6709;&#x5F88;&#x591A;&#x8FB9;&#x7F18;&#x7684;&#x5BB9;&#x6613;&#x88AB;&#x5FFD;&#x89C6;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5305;&#x62EC;&#xFF1A;&#x4F60;&#x4ECE;&#x54EA;&#x62F7;&#x8D1D;&#x7684;&#xFF1F;&#x4F60;&#x8981;&#x7C98;&#x8D34;&#x5230;&#x54EA;&#x91CC;&#xFF1F;&#x5B83;&#x5C06;&#x5728;&#x9875;&#x9762;&#x7684;&#x54EA;&#x91CC;&#x7ED3;&#x675F;&#xFF1F;&#x5B83;&#x5C5E;&#x4E8E;&#x54EA;&#x4E2A;&#x7EC4;&#xFF1F; &#x5BF9;&#x5F53;&#x524D;&#x7684;&#x9009;&#x62E9;&#x5728;&#x90A3;&#x91CC;&#x4F60;&#x6253;&#x7B97;&#x505A;&#x4EC0;&#x4E48;&#xFF1F;&#x7B49;&#x7B49;&#x3002;&#x50CF; Sketch &#x8FD9;&#x6837;&#x4F60;&#x57FA;&#x672C;&#x4E0A;&#x53EF;&#x4EE5;&#x5728;&#x4EFB;&#x4F55;&#x70B9;&#x505A;&#x4EFB;&#x4F55;&#x4E8B;&#x7684;&#x5E94;&#x7528;&#x5176;&#x4E2D;&#x4E00;&#x5B9A;&#x6709;&#x4E00;&#x5927;&#x5806;&#x590D;&#x6742;&#x7684;&#x4E1C;&#x897F;&#x3002;&#x8FD9;&#x80AF;&#x5B9A;&#x662F;&#x4E00;&#x4E2A;&#x6311;&#x6218;&#x3002; &#x4F60;&#x4F1A;&#x4E3A;&#x4ECA;&#x5929; Sketch &#x7684;&#x5730;&#x4F4D;&#x60CA;&#x8BB6;&#x4E48;&#xFF1F; &#x6211;&#x4ECE;&#x6765;&#x6CA1;&#x6709;&#x60F3;&#x8FC7; Sketch &#x80FD;&#x505A;&#x5230;&#x73B0;&#x5728;&#x8FD9;&#x4E48;&#x5927;&#xFF0C;&#x6211;&#x521A;&#x5F00;&#x59CB;&#x505A; Sketch &#x7B2C;&#x4E00;&#x4E2A;&#x7248;&#x672C;&#x7684;&#x65F6;&#x5019;&#xFF0C;iPhone &#x548C; App Store &#x8FD8;&#x6CA1;&#x6709;&#x8BDE;&#x751F;&#x5462;&#xFF0C;&#x6211;&#x77E5;&#x9053;&#x6709;&#x90A3;&#x4E48;&#x4E00;&#x5C0F;&#x90E8;&#x5206;&#x4EBA;&#x5728; Photoshop &#x7684;&#x5C0F;&#x89D2;&#x843D;&#x91CC;&#x5236;&#x4F5C;&#x56FE;&#x6807;&#x548C;&#x7528;&#x6237;&#x754C;&#x9762;&#xFF0C;&#x6211;&#x8BA4;&#x4E3A;&#x5E94;&#x8BE5;&#x6709;&#x8DB3;&#x591F;&#x7684;&#x7A7A;&#x95F4;&#x6765;&#x6EE1;&#x8DB3;&#x8FD9;&#x6837;&#x7684;&#x975E;&#x4E3B;&#x6D41;&#x9700;&#x6C42;&#xFF0C;&#x6211;&#x88AB;&#x8FD9;&#x4E48;&#x5927;&#x7684;&#x5E02;&#x573A;&#x60CA;&#x5230;&#x4E86;&#xFF0C;&#x6211;&#x60F3;&#x540C;&#x6837;&#x60CA;&#x5230;&#x7684;&#x8FD8;&#x6709; Adobe&#x3002; &#x4F60;&#x8BA4;&#x4E3A;&#x5C31;&#x516C;&#x53F8;&#x73B0;&#x5728;&#x7684;&#x53D1;&#x5C55;&#xFF0C;&#x4E00;&#x6B21;&#x6027;&#x7684;&#x6536;&#x8D39;&#x5BF9;&#x4F60;&#x5F00;&#x53D1; Sketch &#x662F;&#x53EF;&#x6301;&#x7EED;&#x6027;&#x7684;&#x4E48;&#xFF1F; &#x597D;&#x5427;&#xFF0C;&#x8FD9;&#x4E2A;&#x63CF;&#x8FF0;&#x4E0D;&#x662F;&#x975E;&#x5E38;&#x7CBE;&#x51C6;&#x3002;&#x6211;&#x4EEC;&#x5927;&#x6982;&#x5728;&#x4E24;&#x5E74;&#x524D;&#x53D1;&#x5E03;&#x9700;&#x8981;&#x6709;&#x5C1D;&#x5347;&#x7EA7;&#x7684;&#x7B2C;&#x4E09;&#x7248;&#x3002;&#x6240;&#x4EE5;&#x8FD9;&#x548C; Adobe &#x9009;&#x62E9;&#x4ED6;&#x4EEC;&#x7684; Creative Cloud &#x4E4B;&#x524D;&#x7684;&#x6A21;&#x5F0F;&#x4E00;&#x6837;&#x3002;&#x6211;&#x7EDD;&#x5BF9;&#x540C;&#x610F;&#x5E94;&#x7528;&#x7684;&#x4E00;&#x6B21;&#x6027;&#x6536;&#x8D39;&#x4E0D;&#x662F;&#x4E00;&#x79CD;&#x53EF;&#x6301;&#x7EED;&#x6027;&#x65B9;&#x5F0F;&#x3002;&#x6211;&#x540C;&#x6837;&#x77E5;&#x9053;&#x6211;&#x4EEC;&#x4E0D;&#x60F3;&#x8981;&#x7528;&#x8BA2;&#x8D2D;&#x7684;&#x6A21;&#x5F0F;&#x3002;&#x8BA2;&#x8D2D;&#x7684;&#x65B9;&#x6848;&#x5728;&#x516C;&#x53F8;&#x547C;&#x5401;&#x5F88;&#x9AD8;&#x3002;&#x4F60;&#x603B;&#x662F;&#x80FD;&#x62FF;&#x5230;&#x6536;&#x5165;&#x8FD9;&#x70B9;&#x975E;&#x5E38;&#x597D;&#xFF0D;&#x90A3;&#x4E48;&#x4F60;&#x4E0D;&#x5FC5;&#x62FF;&#x51FA;&#x8FD9;&#x4E9B;&#x5927;&#x7684;&#x7248;&#x672C;&#x6765;&#x8BF4;&#x670D;&#x8DB3;&#x591F;&#x591A;&#x7684;&#x4EBA;&#x518D;&#x6B21;&#x5347;&#x7EA7;&#xFF0C;&#x7B49;&#x7B49;&#x3002; &#x987E;&#x5BA2;&#x4E0D;&#x559C;&#x6B22;&#x8BA2;&#x8D2D;&#x8F6F;&#x4EF6;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x5F53; Adobe &#x7EC8;&#x6B62; Fireworks &#x7684;&#x65F6;&#x5019;&#xFF0C;&#x90A3;&#x662F;&#x6211;&#x4EEC;&#x5356;&#x7684;&#x6700;&#x591A;&#x7684;&#x65E5;&#x5B50;&#x4E4B;&#x4E00;&#x3002; Adobe &#x7684;&#x5B9A;&#x4F4D;&#x5341;&#x5206;&#x57FA;&#x7840;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x73B0;&#x5728;&#x9009;&#x62E9; Photoshop &#x3002;&#x800C;&#x4E14;&#x5F88;&#x591A;&#x4EBA;&#x8BF4;&#xFF0C;&#x6211;&#x771F;&#x7684;&#x4E0D;&#x662F;&#x559C;&#x6B22; Photoshop &#xFF0C;&#x800C;&#x4E14;&#x6211;&#x4E0D;&#x60F3;&#x6BCF;&#x4E2A;&#x6708;&#x652F;&#x4ED8;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x8BA9;&#x6211;&#x4E86;&#x89E3;&#x4E86;&#x5176;&#x4ED6;&#x7684;&#x6536;&#x8D39;&#x65B9;&#x5F0F;&#x3002;&#x5728;&#x6700;&#x5F00;&#x59CB;&#xFF0C; Adobe &#x5F15;&#x5165;&#x4E86;&#x8BA2;&#x8D2D;&#x7684;&#x65B9;&#x5F0F;&#x4F5C;&#x4E3A;&#x4E00;&#x79CD;&#x76F8;&#x5BF9;&#x4E8E;&#x4F20;&#x7EDF;&#x65B9;&#x5F0F;&#x7684;&#x53EF;&#x4F9B;&#x66FF;&#x4EE3;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x5728;&#x90A3;&#x51E0;&#x5E74;&#x4E4B;&#x540E;&#xFF0C;&#x4ED6;&#x4EEC;&#x9009;&#x62E9;&#x4E86;&#x4EC5;&#x652F;&#x6301;&#x8BA2;&#x8D2D;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x8FD9;&#x662F;&#x6211;&#x4EEC;&#x53C8;&#x4E00;&#x6B21;&#x5356;&#x7684;&#x6700;&#x591A;&#x7684;&#x65E5;&#x5B50;&#x3002;&#x5982;&#x679C;&#x4ED6;&#x4EEC;&#x4E0D;&#x4E86;&#x89E3;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x660E;&#x663E;&#x7684;&#x7406;&#x7531;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6E05;&#x695A;&#x7684;&#x53D1;&#x73B0;&#x4EBA;&#x4EEC;&#x4E0D;&#x559C;&#x6B22;&#x8BA2;&#x8D2D;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x3002; &#x5F53;&#x4F60;&#x5F00;&#x53D1;&#x4E00;&#x4E2A;&#x4EE5;&#x670D;&#x52A1;&#x5668;&#x4E3A;&#x57FA;&#x7840;&#x7684;&#x4EA7;&#x54C1;&#x65F6;&#xFF0C;&#x6BCF;&#x4E2A;&#x6708;&#x652F;&#x4ED8;&#x7684;&#x65B9;&#x5F0F;&#x66F4;&#x5BB9;&#x6613;&#x88AB;&#x63A5;&#x53D7;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x8FD9;&#x53EA;&#x662F;&#x4E00;&#x4E2A;&#x5E94;&#x7528;&#x4EC5;&#x4EC5;&#x7528;&#x5728;&#x4F60;&#x7684;Mac&#x4E0A;&#x800C;&#x4E0D;&#x548C;&#x670D;&#x52A1;&#x5668;&#x8FDB;&#x884C;&#x4EA4;&#x4E92;&#x76F4;&#x63A5;&#x505A;&#x4E00;&#x4E9B;&#x4E8B;&#x60C5;&#xFF0C;&#x4EBA;&#x4EEC;&#x5C31;&#x4E0D;&#x7406;&#x89E3;&#x4E3A;&#x4EC0;&#x4E48;&#x4ED6;&#x4EEC;&#x6BCF;&#x4E2A;&#x6708;&#x90FD;&#x8981;&#x4ED8;&#x8D39;&#x3002; Sketch &#x7684;&#x6210;&#x529F;&#x662F;&#x4EC0;&#x4E48;&#xFF1F; &#x6211;&#x771F;&#x7684;&#x559C;&#x6B22;&#x4E3A; Sketch &#x5DE5;&#x4F5C;&#xFF0C;&#x548C;&#x6211;&#x4EEC;&#x56E2;&#x961F;&#x7684;&#x4EBA;&#x4E00;&#x8D77;&#x5DE5;&#x4F5C;&#x3002;&#x5E76;&#x4E14;&#x6211;&#x8BA4;&#x4E3A;&#x6211;&#x81EA;&#x5DF1;&#x5C06;&#x4F1A;&#x5F88;&#x5F00;&#x5FC3;&#x7684;&#x505A;&#x8FD9;&#x4EF6;&#x4E8B;&#x5F88;&#x591A;&#x5E74;&#x3002;&#x5E76;&#x4E0D;&#x4F1A;&#x56E0;&#x4E3A;&#x6211;&#x6709;&#x8DB3;&#x591F;&#x7684;&#x94B1;&#x3001;&#x8DB3;&#x591F;&#x7684;&#x7528;&#x6237;&#x3001;&#x8DB3;&#x591F;&#x6210;&#x529F;&#x3001;&#x6216;&#x662F;&#x5BF9;&#x5E94;&#x7528;&#x611F;&#x5230;&#x538C;&#x5026;&#x3001;&#x6216;&#x662F;&#x628A;&#x5B83;&#x5356;&#x4E86;&#x4E4B;&#x7C7B;&#x7684;&#x4E8B;&#x60C5;&#x800C;&#x505C;&#x6B62;&#xFF0D;&#x4E0D;&#xFF0C;&#x6211;&#x4E0D;&#x80FD;&#x3002;&#x6211;&#x5E0C;&#x671B;&#x5728;&#x5C06;&#x6765;&#x5F88;&#x957F;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x6211;&#x8FD8;&#x80FD;&#x505A;&#x6211;&#x73B0;&#x5728;&#x505A;&#x7684;&#x4E8B;&#x60C5;&#x3002; Sketch &#x5C06;&#x4F1A;&#x53D1;&#x751F;&#x4EC0;&#x4E48;&#x6539;&#x53D8;&#xFF1F; &#x524D;&#x4E0D;&#x4E45;&#x6211;&#x4EEC;&#x79BB;&#x5F00;&#x4E86; Mac &#x7684; App Store &#xFF0C;&#x6211;&#x4EEC;&#x8BA4;&#x4E3A;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x66F4;&#x5FEB;&#x7684;&#x63A8;&#x9001;&#x66F4;&#x65B0;&#x3002;&#x6211;&#x662F;&#x771F;&#x7684;&#x6FC0;&#x52A8;&#x5730;&#x53BB;&#x80FD;&#x591F;&#x4EA4;&#x51FA;&#x6211;&#x4EEC;&#x539F;&#x6765;&#x5BF9;&#x4E8E;&#x65B0;&#x5E74;&#x7684;&#x8BA1;&#x5212;&#x7684;&#x4E1C;&#x897F;&#x3002;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x4E0A;&#x4E00;&#x4E2A;&#x5927;&#x66F4;&#x65B0;&#x7528;&#x4E86;&#x6211;&#x4EEC;&#x592A;&#x957F;&#x7684;&#x65F6;&#x95F4;&#xFF0C;&#x73B0;&#x5728;&#x6211;&#x4EEC;&#x6253;&#x7B97;&#x6301;&#x7EED;&#x7684;&#x63A8;&#x9001;&#x5C0F;&#x66F4;&#x65B0;&#x3002;&#x4F46;&#x662F;&#x6211;&#x4E0D;&#x6253;&#x7B97;&#x8BF4;&#x7684;&#x592A;&#x591A;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x90FD;&#x77E5;&#x9053;&#x8F6F;&#x4EF6;&#x884C;&#x4E1A;&#x7684;&#x4E00;&#x4E9B;&#x89C4;&#x5219;&#x3002; _&#x542C; Pieter &#x5BF9;&#x4E8E; Sketch &#x7684;&#x60F3;&#x6CD5;&#x548C;&#x5E0C;&#x671B;&#x662F;&#x6709;&#x8DA3;&#x548C;&#x5F15;&#x4EBA;&#x5165;&#x80DC;&#x7684;&#xFF0C;&#x5E76;&#x4E14;&#x4F1A;&#x957F;&#x5B58;&#x4E8E;&#x8FD9;&#x4E2A;&#x9886;&#x57DF;&#x3002;&#x4ED6;&#x5BF9; Sketch &#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x89C4;&#x6A21;&#x548C;&#x589E;&#x957F;&#x901F;&#x5EA6;&#x4ECD;&#x7136;&#x5341;&#x5206;&#x6EE1;&#x610F;&#x3002;&#x6211;&#x4E2A;&#x4EBA;&#x671F;&#x5F85;&#x66F4;&#x591A;&#x6765;&#x81EA; Pieter &#x548C;&#x4ED6;&#x7684;&#x56E2;&#x961F;&#x7684;&#x5206;&#x4EAB;&#x3002;&#x5C3D;&#x7BA1;&#x6211;&#x4E0D;&#x8BA4;&#x4E3A; Comet &#x5C06;&#x4F1A;&#x4E00;&#x591C;&#x6210;&#x540D;&#x51FB;&#x8D25; Sketch &#xFF0C;&#x4F46;&#x662F;&#x6211;&#x8BA4;&#x4E3A;&#x5B83;&#x53EF;&#x80FD;&#x4F1A;&#x62A2;&#x5360; Sketch &#x4E00;&#x5B9A;&#x7684;&#x5E02;&#x573A;&#x3002;&#x4F46;&#x662F;&#x4E00;&#x4EF6;&#x4E8B;&#x6211;&#x59CB;&#x7EC8;&#x575A;&#x4FE1;&#xFF0C; Pieter &#x656C;&#x4E1A;&#x800C;&#x4E14;&#x70ED;&#x7231; Sketch &#xFF0C;&#x65E0;&#x8BBA;&#x7ADE;&#x4E89;&#x8005;&#x505A;&#x4EC0;&#x4E48;&#xFF0C;&#x4ED6;&#x90FD;&#x4E0D;&#x4F1A;&#x803D;&#x6401;&#x5F88;&#x957F;&#x65F6;&#x95F4;&#x3002;_ _&#x6211;&#x5BF9;&#x4E8E; Pieter &#x80FD;&#x62BD;&#x51FA;&#x65F6;&#x95F4;&#x5E76;&#x4E14;&#x76F4;&#x7387;&#x7684;&#x8C08;&#x8BBA;&#x4ED6;&#x6240;&#x521B;&#x5EFA;&#x7684;&#x516C;&#x53F8;&#x800C;&#x611F;&#x5230;&#x611F;&#x6FC0;&#xFF0C;&#x56E0;&#x4E3A;&#x4ED6;&#x660E;&#x786E;&#x7684;&#x770B;&#x5230;&#x4E86;&#x672A;&#x6765;&#x7684;&#x9700;&#x6C42;&#x3002;&#x6211;&#x61C2;&#x5F97;&#x4E86;&#x53D1;&#x5C55;&#x4E00;&#x4E2A;&#x516C;&#x53F8;&#x7684;&#x5229;&#x5F0A;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x4F60;&#x521B;&#x5EFA;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x4E86;&#x89E3; Pieter &#x5728;&#x8FD0;&#x8425;&#x4E00;&#x5BB6;&#x7CBE;&#x76CA;&#x3001;&#x5B8C;&#x5168;&#x8FDC;&#x7A0B;&#x7684;&#x516C;&#x53F8;&#x65F6;&#x4E0D;&#x540C;&#x65B9;&#x9762;&#x7684;&#x8868;&#x73B0;&#x8FD8;&#x6709;&#x4ED6;&#x5BF9; Sketch &#x7684;&#x672A;&#x6765;&#x9884;&#x6D4B;&#x662F;&#x975E;&#x5E38;&#x6709;&#x8DA3;&#x7684;&#x3002;_ _&#x591A;&#x8C22; Pieter &#xFF0C;&#x795D;&#x597D;&#x8FD0; ~Geoff_","categories":[],"tags":[{"name":"翻译","slug":"翻译","permalink":"https://lfkdsk.github.io/tags/翻译/"}]},{"title":"选择使用正确的 Markdown Parser","slug":"translate-md","date":"2017-02-24T13:40:55.000Z","updated":"2017-02-24T13:41:32.000Z","comments":true,"path":"2017/02/24/translate-md/","link":"","permalink":"https://lfkdsk.github.io/2017/02/24/translate-md/","excerpt":"","text":"&#x539F;&#x6587;&#x94FE;&#x63A5; : Choosing the Right Markdown Parser &#x539F;&#x6587;&#x4F5C;&#x8005; : CSS-TRICKS &#x8BD1;&#x6587;&#x51FA;&#x81EA; : &#x6398;&#x91D1;&#x7FFB;&#x8BD1;&#x8BA1;&#x5212; &#x8BD1;&#x8005; : lfkdsk &#x6821;&#x5BF9;&#x8005;: brucezz lekenny _&#x4EE5;&#x4E0B;&#x5BA2;&#x5EA7;&#x6587;&#x7AE0;&#x7531;Ray Villalobos&#x63D0;&#x4F9B;&#x3002;&#x5728;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x4E2D;Ray&#x5C06;&#x8981;&#x53BB;&#x63A2;&#x7D22;&#x5F88;&#x591A;&#x79CD;&#x4E0D;&#x540C;&#x7684;Markdown&#x8BED;&#x6CD5;&#x3002;&#x6240;&#x6709;&#x7684;&#x8FD9;&#x4E9B;MarkDown&#x53D8;&#x79CD;&#x5747;&#x63D0;&#x4F9B;&#x4E86;&#x4E0D;&#x540C;&#x7684;&#x7279;&#x6027;&#xFF0C;&#x90FD;&#x8D85;&#x8D8A;&#x4F20;&#x7EDF;&#x7684;Markdown&#x8BED;&#x6CD5;&#xFF0C;&#x5374;&#x53C8;&#x76F8;&#x4E92;&#x4E4B;&#x95F4;&#x53C8;&#x5404;&#x6709;&#x4E0D;&#x540C;&#x3002;&#x5982;&#x679C;&#x4F60;&#x6B63;&#x5728;&#x6311;&#x9009;&#x4E00;&#x95E8;Markdown&#x8BED;&#x8A00;&#x4F7F;&#x7528;&#xFF08;&#x6216;&#x662F;&#x63D0;&#x4F9B;&#x7ED9;&#x4F60;&#x7684;Web&#x4EA7;&#x54C1;&#x7684;&#x7528;&#x6237;&#x4F7F;&#x7528;&#xFF09;&#xFF0C;&#x90A3;&#x4F60;&#x5C31;&#x503C;&#x5F97;&#x7684;&#x53BB;&#x4E86;&#x89E3;&#x5B83;&#x4EEC;&#xFF0C;&#x4E00;&#x65E6;&#x9009;&#x5B9A;&#x5C31;&#x5F88;&#x96BE;&#x518D;&#x5207;&#x6362;&#x5230;&#x522B;&#x7684;Markdown&#x7248;&#x672C;&#x800C;&#x4E14;&#x6311;&#x9009;&#x7684;&#x7ED3;&#x679C;&#x4F9D;&#x8D56;&#x4E8E;&#x4F60;&#x9700;&#x8981;&#x54EA;&#x4E9B;&#x7279;&#x6027;&#x3002;Ray&#x63D0;&#x4F9B;&#x7684;&#x4E00;&#x95E8;&#x5173;&#x4E8E;MarkDown&#x8BFE;&#x7A0B;&#x5C06;&#x4F1A;&#x5206;&#x4EAB;&#x8FD9;&#x4E9B;&#x4E0D;&#x540C;&#x7684;&#x7248;&#x672C;&#x90FD;&#x62E5;&#x6709;&#x54EA;&#x4E9B;&#x7279;&#x6027;&#x53BB;&#x5E2E;&#x52A9;&#x4F60;&#x505A;&#x51FA;&#x660E;&#x667A;&#x7684;&#x9009;&#x62E9;&#x3002;_ Markdown&#x6539;&#x53D8;&#x4E86;&#x5F88;&#x591A;&#x4E13;&#x4E1A;&#x9886;&#x57DF;&#x7684;&#x4E66;&#x5199;&#x65B9;&#x5F0F;&#x3002;&#x8FD9;&#x79CD;&#x8BED;&#x8A00;&#x4F7F;&#x7528;&#x7B80;&#x5355;&#x7684;&#x6587;&#x672C;&#x548C;&#x6781;&#x5C11;&#x7684;&#x6807;&#x8BB0;&#x5C31;&#x80FD;&#x591F;&#x5C06;&#x5176;&#x8F6C;&#x6362;&#x4E3A;&#x8D8A;&#x6765;&#x8D8A;&#x591A;&#x7684;&#x683C;&#x5F0F;&#x3002;&#x7136;&#x800C;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x7684;Markdown&#x89E3;&#x6790;&#x5668;&#x88AB;&#x521B;&#x9020;&#x51FA;&#x6765;&#x90FD;&#x662F;&#x4E00;&#x6837;&#x7684;&#x3002;&#x56E0;&#x4E3A;&#x539F;&#x6765;&#x7684;&#x89C4;&#x8303;&#x6CA1;&#x6709;&#x4E0E;&#x65F6;&#x4FF1;&#x8FDB;&#xFF0C;&#x66FF;&#x4EE3;&#x7248;&#x672C;&#x50CF;&#x662F; Multi-Markdown&#x3001;GFM(Github Flavored Markdown)&#x3001;Markdown Extra&#x548C;&#x5176;&#x4ED6;&#x7684;&#x7248;&#x672C;&#x6269;&#x5145;&#x4E86;&#x8FD9;&#x95E8;&#x8BED;&#x8A00;&#x3002; Markdown&#x7684;&#x539F;&#x59CB;&#x89E3;&#x6790;&#x5668;&#x662F;&#x7528;Perl&#x7F16;&#x5199;&#x7684;&#x3002;&#x6838;&#x5FC3;&#x7684;&#x7279;&#x6027;&#x5305;&#x62EC;&#x89E3;&#x6790;&#x5757;&#x5143;&#x7D20;&#xFF08;&#x4F8B;&#x5982;&#x6BB5;&#x843D;&#xFF0C;&#x6362;&#x884C;&#xFF0C;&#x6807;&#x5934;&#xFF0C;&#x5757;&#x5F15;&#x7528;&#xFF0C;&#x5217;&#x8868;&#xFF0C;&#x4EE3;&#x7801;&#x5757;&#x548C;&#x6C34;&#x5E73;&#x7EBF;&#xFF09;&#x548C;&#x884C;&#x5185;&#x5143;&#x7D20;&#xFF08;&#x94FE;&#x63A5;&#xFF0C;&#x52A0;&#x91CD;&#xFF0C;&#x4EE3;&#x7801;&#x6BB5;&#x548C;&#x56FE;&#x7247;&#xFF09;&#x3002;&#x4ECE;&#x90A3;&#x4EE5;&#x540E;&#xFF0C;&#x8BE5;&#x89E3;&#x6790;&#x5668;&#x7684;&#x4F5C;&#x8005;John Gruber&#x518D;&#x4E5F;&#x6CA1;&#x6709;&#x6269;&#x5145;&#x8FC7;&#x8BED;&#x6CD5;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x5F88;&#x591A;&#x7684;&#x65B0;&#x589E;&#x548C;&#x5B9E;&#x73B0;&#x4F34;&#x968F;&#x7740;&#x4E0D;&#x540C;&#x7684;&#x4ED6;&#x4EEC;&#x8BA4;&#x4E3A;&#x5408;&#x9002;&#x7684;&#x3001;&#x6216;&#x662F;&#x652F;&#x6301;&#x89E3;&#x91CA;&#x67D0;&#x4E9B;&#x5143;&#x7D20;&#x7684;&#x89E3;&#x6790;&#x5668;&#x652F;&#x6301;&#x6D6E;&#x51FA;&#x6C34;&#x9762;&#x3002; &#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x7248;&#x672C;&#x5728;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x91CC;&#x5B9E;&#x73B0;Markdown&#x529F;&#x80FD;&#x9700;&#x8981;&#x8003;&#x8651;&#x5F88;&#x591A;&#xFF0C;&#x5305;&#x62EC;&#x4F60;&#x5C06;&#x8981;&#x4F7F;&#x7528;&#x7684;&#x5F00;&#x53D1;&#x8BED;&#x8A00;&#x548C;&#x4F60;&#x60F3;&#x8981;&#x652F;&#x6301;&#x7684;&#x7279;&#x6027;&#x3002;&#x539F;&#x59CB;&#x7684;&#x7248;&#x672C;&#x662F;&#x7531;Perl&#x7F16;&#x5199;&#x7684;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x9879;&#x76EE;&#x6765;&#x8BF4;&#xFF0C;&#x8FD9;&#x5E76;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x5B9E;&#x7528;&#x7684;&#x9009;&#x62E9;&#x3002;&#x6700;&#x6D41;&#x884C;&#x7684;&#x5B9E;&#x73B0;&#x7248;&#x672C;&#x5305;&#x62EC;&#xFF1A;PHP&#x3001;Ruby&#x548C;JavaScript&#x3002;&#x4F60;&#x9009;&#x62E9;&#x4E86;&#x54EA;&#x79CD;&#x8BED;&#x8A00;&#x5C06;&#x4F1A;&#x95F4;&#x63A5;&#x5F71;&#x54CD;&#x4F60;&#x80FD;&#x652F;&#x6301;&#x54EA;&#x4E9B;&#x7279;&#x6027;&#x548C;&#x80FD;&#x4F7F;&#x7528;&#x54EA;&#x4E9B;&#x5E93;&#x3002;&#x8BA9;&#x6211;&#x4EEC;&#x6765;&#x770B;&#x770B;&#x4E00;&#x4E9B;&#x9009;&#x62E9;&#xFF1A; &#x8BED;&#x8A00; &#x5E93; (&#x4E0B;&#x8F7D;&#x9879;&#x76EE;) Perl Original version JavaScript CommonMark&#x3001;Marked&#x3001;Markdown-it&#x3001;Remarkable&#x3001;Showdown Ruby Github Flavored Markup&#x3001;Kramdown&#x3001;Maruku&#x3001;Redcarpet PHP Cebe Markdown&#x3001;Ciconia&#x3001;Parsedown&#x3001;PHP Markdown Extended Python Python Markdown &#x4EE5;&#x9632;&#x4E07;&#x4E00;&#x4F60;&#x60F3;&#x7528;&#x522B;&#x7684;&#x8BED;&#x8A00;&#x53BB;&#x5B9E;&#x73B0;Markdown&#xFF0C;&#x8FD9;&#x91CC;&#x8FD8;&#x6709;&#x8BB8;&#x591A;&#x989D;&#x5916;&#x7684;&#x5176;&#x4ED6;&#x7684;&#x8BED;&#x8A00;&#x5B9E;&#x73B0;&#x7684;&#x7248;&#x672C;&#x3002; &#x6838;&#x5FC3;&#x7279;&#x6027;&#x6838;&#x5FC3;Markdown&#x8BED;&#x8A00;&#x652F;&#x6301;&#x8BB8;&#x591A;&#x975E;&#x5E38;&#x6709;&#x7528;&#x7684;&#x9ED8;&#x8BA4;&#x529F;&#x80FD;&#x3002;&#x867D;&#x7136;&#x4E0D;&#x540C;&#x7684;&#x5B9E;&#x73B0;&#x652F;&#x6301;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x6269;&#x5C55;&#x529F;&#x80FD;&#xFF0C;&#x4ED6;&#x4EEC;&#x90FD;&#x5E94;&#x8BE5;&#x81F3;&#x5C11;&#x652F;&#x6301;&#x4EE5;&#x4E0B;&#x6838;&#x5FC3;&#x8BED;&#x6CD5;&#xFF1A;&#x884C;&#x5185;html&#x3001;&#x81EA;&#x52A8;&#x5206;&#x6BB5;&#x3001;&#x6807;&#x5934;&#x3001;&#x5757;&#x5F15;&#x7528;&#x3001;&#x5217;&#x8868;&#x3001;&#x4EE3;&#x7801;&#x5757;&#x3001;&#x6C34;&#x5E73;&#x7EBF;&#x3001;&#x94FE;&#x63A5;&#x3001;&#x52A0;&#x91CD;&#x3001;&#x884C;&#x5185;&#x4EE3;&#x7801; &#x548C; &#x56FE;&#x7247;. &#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x7248;&#x672C;&#x53EF;&#x7528;Markdown&#x7684;&#x7248;&#x672C;&#x6709;&#x5F88;&#x591A;&#xFF0C;&#x6709;&#x51E0;&#x4E2A;&#x5DF2;&#x7ECF;&#x5BF9;&#x5176;&#x5B83;&#x7248;&#x672C;&#x6709;&#x5F88;&#x5927;&#x7684;&#x5F71;&#x54CD;&#x3002;&#x6B63;&#x56E0;&#x5982;&#x6B64;&#xFF0C;&#x4F60;&#x4F1A;&#x7ECF;&#x5E38;&#x770B;&#x5230;&#x4ED6;&#x4EEC;&#x88AB;&#x5176;&#x4ED6;&#x7248;&#x672C;&#x5F15;&#x8FF0;&#x4F5C;&#x4E3A;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x90E8;&#x5206;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x5E93;&#x4F1A;&#x63D0;&#x5230;&#x652F;&#x6301;CommonMark&#xFF0C;GFM&#x6216;&#x662F;Multi-Markdown&#x3002;&#x8BA9;&#x6211;&#x4EEC;&#x6765;&#x770B;&#x770B;&#x90A3;&#x610F;&#x5473;&#x7740;&#x4EC0;&#x4E48;&#x3002; GFMGithub&#x662F;&#x4F7F;Markdown&#x5728;&#x5F00;&#x53D1;&#x8005;&#x4E2D;&#x6D41;&#x884C;&#x7684;&#x539F;&#x56E0;&#x4E4B;&#x4E00;&#xFF0C;&#x5F00;&#x6E90;&#x5171;&#x4EAB;&#x5E73;&#x53F0;&#x63A5;&#x53D7;&#x5E76;&#x6269;&#x5C55;&#x4E86;&#x4E00;&#x4E2A;&#x53EB;Github Flavored Markup&#x7684;&#x7248;&#x672C;&#xFF0C;&#xFF08;GFM&#xFF09;&#x5305;&#x62EC;&#x56F4;&#x680F;&#x4EE3;&#x7801;&#x5757;&#xFF0C;URL&#x81EA;&#x52A8;&#x94FE;&#x63A5;&#xFF0C;&#x5220;&#x9664;&#x7EBF;&#xFF0C;&#x8868;&#x683C;&#x751A;&#x81F3;&#x80FD;&#x591F;&#x521B;&#x5EFA;&#x5E26;&#x6709;&#x52FE;&#x9009;&#x6846;&#x7684;&#x4EFB;&#x52A1;&#x5217;&#x8868;&#x3002;&#x6240;&#x4EE5;&#xFF0C;&#x5F53;&#x4E00;&#x4E2A;&#x7248;&#x672C;&#x652F;&#x6301;&#x63D0;&#x53CA;&#x7684;GFM&#xFF0C;&#x5C31;&#x662F;&#x5B9E;&#x73B0;&#x4E86;&#x8FD9;&#x4E9B;&#x6269;&#x5C55;&#x3002; &#x652F;&#x6301;&#x529F;&#x80FD;&#xFF1A;[&#x56F4;&#x680F;&#x4EE3;&#x7801;&#x5757;]&#x3001;[&#x8BED;&#x6CD5;&#x9AD8;&#x4EAE;]&#x3001;[&#x8868;&#x683C;]&#x3001;[URL &#x81EA;&#x52A8;&#x8865;&#x5168;&#x94FE;&#x63A5;]&#x3001;[&#x5220;&#x9664;&#x7EBF;] CommonMark&#x6700;&#x8FD1;&#x6709;&#x4E00;&#x4E2A;&#x884C;&#x52A8;&#x53BB;&#x89C4;&#x8303;Markdown&#x8BED;&#x6CD5;&#x3002;&#x4E00;&#x7EC4;Markdown&#x5F00;&#x53D1;&#x8005;&#x52A0;&#x5165;&#x53BB;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7248;&#x672C;&#xFF0C;&#x6D4B;&#x8BD5;&#x548C;&#x6587;&#x6863;&#xFF0C;&#x6700;&#x7EC8;&#x7684;&#x7ED3;&#x679C;&#x5C31;&#x662F;&#x540D;&#x4E3A;CommonMark&#x7684;&#x66F4;&#x5F3A;&#x5927;&#x7684;&#x89C4;&#x8303;&#x8BED;&#x8A00;&#x3002;&#x6B64;&#x65F6;&#xFF0C;&#x8FD9;&#x4E2A;&#x5B9E;&#x73B0;&#x6DFB;&#x52A0;&#x4E86;&#x56F4;&#x680F;&#x4EE3;&#x7801;&#x5757;&#xFF0C;&#x4F46;&#x662F;&#x66F4;&#x591A;&#x7684;&#x662F;&#x67D0;&#x4E9B;&#x7279;&#x5F81;&#x662F;&#x5982;&#x4F55;&#x83B7;&#x5F97;&#x4E00;&#x81F4;&#x7684;&#x8F93;&#x51FA;&#x548C;&#x8F6C;&#x6362;&#x8981;&#x5B9E;&#x73B0;&#x7684;&#x5177;&#x4F53;&#x7EC6;&#x8282;&#x3002;&#x5F88;&#x591A;&#x7684;&#x62D3;&#x5C55;&#x5C06;&#x4F1A;&#x5E26;&#x6765;&#x66F4;&#x52A0;&#x7B26;&#x5408;&#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x5DF2;&#x7ECF;&#x63D0;&#x51FA;&#x7684;&#x7279;&#x6027;. &#x8FD9;&#x79CD;&#x683C;&#x5F0F;&#x662F;&#x8F83;&#x65B0;&#x7684;&#xFF0C;&#x4E0D;&#x652F;&#x6301;&#x5F88;&#x591A;&#x529F;&#x80FD;&#xFF0C;&#x4F46;&#x5B83;&#x6B63;&#x5728;&#x79EF;&#x6781;&#x5F00;&#x53D1;&#x5E76;&#x6709;&#x8BA1;&#x5212;&#x5730;&#x589E;&#x52A0;&#x4E86;&#x8BB8;&#x591A;Multi-Markdown&#x7684;&#x7279;&#x6027;&#x3002; &#x652F;&#x6301;&#x529F;&#x80FD;: [&#x56F4;&#x680F;&#x4EE3;&#x7801;&#x5757;]&#x3001;[URL &#x81EA;&#x52A8;&#x8865;&#x5168;&#x94FE;&#x63A5;]&#x3001;[&#x5220;&#x9664;&#x7EBF;] Multi-markdown&#x7B2C;&#x4E00;&#x4E2A;&#x62D3;&#x5C55;&#x4E86;&#x8FD9;&#x95E8;&#x8BED;&#x8A00;&#x7684;&#x91CD;&#x5927;&#x7684;&#x9879;&#x76EE;&#x662F;Multi-Markdown&#x3002;&#x5B83;&#x589E;&#x52A0;&#x4E86;&#x5F88;&#x591A;&#x5176;&#x4ED6;&#x7248;&#x672C;&#x5DF2;&#x7ECF;&#x652F;&#x6301;&#x7684;&#x7279;&#x6027;&#x3002;&#x5B83;&#x6700;&#x521D;&#x548C;Markdown&#x4E00;&#x6837;&#x662F;&#x7528;Perl&#x7F16;&#x5199;&#x7684;&#xFF0C;&#x4E0D;&#x8FC7;&#x540E;&#x6765;&#x8F6C;&#x7528;C&#x6765;&#x5199;&#x3002;&#x6240;&#x4EE5;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x770B;&#x5230;&#x4E00;&#x4E2A;&#x9879;&#x76EE;&#x652F;&#x6301;Multi-Markdown&#xFF0C;&#x90A3;&#x4E48;&#x5B83;&#x5F88;&#x53EF;&#x80FD;&#x5177;&#x6709;&#x8FD9;&#x4E9B;&#x529F;&#x80FD;&#x5927;&#x90E8;&#x5206;&#x3002; &#x53EF;&#x9009;&#x62E9;&#x7279;&#x6027;&#x8BA9;&#x6211;&#x4EEC;&#x6765;&#x770B;&#x770B;&#x8FD9;&#x4E9B;&#x4E0D;&#x540C;&#x5B9E;&#x73B0;&#x7248;&#x672C;&#x90FD;&#x652F;&#x6301;&#x7684;&#x7279;&#x6027;&#x3002; &#x56F4;&#x680F;&#x4EE3;&#x7801;&#x5757;&#x80FD;&#x591F;&#x7B80;&#x5355;&#x5730;&#x5728;Markdown&#x4E2D;&#x6DFB;&#x52A0;&#x4EE3;&#x7801;&#x662F;&#x5F00;&#x53D1;&#x8005;&#x6DFB;&#x52A0;&#x7684;&#x6700;&#x597D;&#x7684;&#x529F;&#x80FD;&#x4E4B;&#x4E00;&#x3002;&#x539F;&#x59CB;&#x7684;&#x5B9E;&#x73B0;&#x4F1A;&#x5C06;&#x56DB;&#x4E2A;&#x7A7A;&#x683C;&#x6216;&#x662F;&#x4E00;&#x4E2A;&#x5236;&#x8868;&#x7B26;&#x5F00;&#x5934;&#x7684;&#x884C;&#x81EA;&#x52A8;&#x5C06;&#x6587;&#x672C;&#x4F5C;&#x4E3A;&#x4EE3;&#x7801;&#x5757;&#x3002;&#x6709;&#x51E0;&#x4E2A;Markdown&#x7248;&#x672C;&#x628A;&#x4EE3;&#x7801;&#x5757;&#x5408;&#x5E76;&#x8D77;&#x6765;&#xFF0C;&#x5141;&#x8BB8;&#x4F60;&#x5728;&#x6587;&#x672C;&#x5F00;&#x5934;&#x4F7F;&#x7528;&#x4E09;&#x4E2A;&#x523B;&#x5EA6;&#x6807;&#x8BB0;&#xFF08;`&#xFF09;&#xFF0C;&#x6216;&#x5728;&#x67D0;&#x4E9B;&#x60C5;&#x51B5;&#x4E0B;&#x4E09;&#x4E2A;&#x6CE2;&#x6D6A;&#x5B57;&#x7B26;&#xFF08;&#x301C;&#xFF09;&#xFF0C;&#x4EE5;&#x6B64;&#x628A;&#x6587;&#x672C;&#x6807;&#x8BB0;&#x4E3A;&#x4EE3;&#x7801;&#x5757;&#xFF1A; &#x200B;``` body { margin: 0; padding: 0; color: #222; background-color: white; font-family: sans-serif; font-size: 1.8rem; line-height: 160%; font-weight: 400; } &#x200B;``` &#x652F;&#x6301;&#x7684;&#x7248;&#x672C;&#x6709;: CommonMark&#x3001;Github Flavored Markdown&#x3001;Kramdown&#x3001;Markdown-it&#x3001;Marked&#x3001;Maruku&#x3001;Multi-Markdown&#x3001;PHP Markdown Extended&#x3001;Python Markdown&#x3001;Redcarpet&#x3001;Remarkable&#x3001;Showdown &#x8BED;&#x6CD5;&#x9AD8;&#x4EAE;&#x6DFB;&#x52A0;&#x4EE3;&#x7801;&#x5757;&#x662F;&#x5F88;&#x68D2;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x9ED8;&#x8BA4;Markdown&#x7684;&#x89E3;&#x91CA;&#x5668;&#x5C06;&#x4F1A;&#x5C06;&#x4EE3;&#x7801;&#x4F7F;&#x7528;&lt;code&gt; &#x548C; &lt;pre&gt;&lt;/pre&gt; &#x6807;&#x8BB0;&#x7B80;&#x5355;&#x7684;&#x5305;&#x88F9;&#x8D77;&#x6765;&#xFF0C;&#x8FD9;&#x5C06;&#x4F7F;&#x6587;&#x672C;&#x4EE5;&#x4E00;&#x79CD;&#x9884;&#x5B9A;&#x683C;&#x5F0F;&#x548C;&#x56FA;&#x5B9A;&#x5BBD;&#x5EA6;&#x5B57;&#x4F53;&#x683C;&#x5F0F;&#x663E;&#x793A;&#x3002;&#x4E00;&#x4E9B;&#x5B9E;&#x73B0;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5141;&#x8BB8;&#x60A8;&#x6307;&#x5B9A;&#x65C1;&#x8FB9;&#x7684;&#x523B;&#x5EA6;&#x6807;&#x8BB0;&#x8BED;&#x8A00;&#x6539;&#x5584;&#x8FD9;&#x4E00;&#x70B9;&#xFF0C;&#x5E76;&#x53EF;&#x80FD;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x5206;&#x6790;&#x5668;&#xFF0C;&#x53EF;&#x4EE5;&#x81EA;&#x52A8;&#x8BA9;&#x4F60;&#x9009;&#x62E9;&#x4E0D;&#x540C;&#x7684;&#x8272;&#x5F69;&#x6B3E;&#x5F0F;&#xFF0C;&#x5E76;&#x6307;&#x5B9A;&#x8BED;&#x8A00;&#x4EE3;&#x7801;&#x7F16;&#x5199;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x989C;&#x8272;&#x662F;&#x66F4;&#x6709;&#x610F;&#x4E49;&#x7684;&#x3002; &#x200B;```css body { margin: 0; padding: 0; color: #222; background-color: white; font-family: sans-serif; font-size: 1.8rem; line-height: 160%; font-weight: 400; } &#x200B;``` &#x652F;&#x6301;&#x7684;&#x7248;&#x672C;&#x6709;: Github Flavored Markdown&#x3001;Kramdown*&#x3001;Marked&#x3001;Maruku&#x3001;Multi-Markdown&#x3001;PHP Markdown Extended&#x3001;Python Markdown&#x3001;Redcarpet&#x3001;Remarkable&#x3001;Showdown *&#x6709;&#x4E9B;&#x652F;&#x6301;&#x4E0D;&#x5D4C;&#x5165;&#x5230;&#x89E3;&#x6790;&#x5668;&#xFF0C;&#x800C;&#x662F;&#x4F9D;&#x8D56;&#x4E8E;&#x5176;&#x5B83;&#x7684;&#x5E93;&#x5982;[highlight.js]&#xFF08;https://highlightjs.org/&#xFF09;&#x3002; &#x8868;&#x683C;&#x5728;HTML&#x7F16;&#x5199;&#x8868;&#x683C;&#x5F88;&#x7B28;&#x62D9;&#x3002; markdown&#x7684;&#x67D0;&#x4E9B;&#x7248;&#x672C;&#x53EF;&#x4EE5;&#x8BA9;&#x4F60;&#x6DFB;&#x52A0;&#x8868;&#x4EE5;&#x4E00;&#x4E2A;&#x76F8;&#x5F53;&#x7B80;&#x5355;&#x7684;&#x8BED;&#x6CD5;&#x3002; Dimensions | Megapixels ---|--- 1,920 x 1,080 | 2.1MP 3,264 x 2,448 | 8MP 4,288 x 3,216 | 14MP &#x6E32;&#x67D3;&#x7684;&#x6548;&#x679C;&#x5982;&#x4E0B;&#xFF1A; &#x5C3A;&#x5BF8; &#x767E;&#x4E07;&#x50CF;&#x7D20; 1,920 x 1,080 2.1MP 3,264 x 2,448 8MP 4,288 x 3,216 14MP &#x53EA;&#x9700;&#x8981;&#x51E0;&#x5206;&#x949F;&#x5C31;&#x80FD;&#x591F;&#x505A;&#x51FA;&#x50CF;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x4E2A;&#x8868;&#x683C;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x4F60;&#x505A;&#x8FC7;&#x51E0;&#x6B21;&#x540E;&#xFF0C;&#x4F60;&#x4F1A;&#x8BA4;&#x4E3A;&#x4F7F;&#x7528;HTML&#x6709;&#x4E00;&#x4E9B;&#x9EBB;&#x70E6;&#x3002;&#x5982;&#x679C;&#x4F60;&#x521B;&#x5EFA;&#x8868;&#x683C;&#x9700;&#x8981;&#x5E2E;&#x52A9;&#xFF0C;&#x9605;&#x8BFB;&#x8FD9;&#x7BC7;&#x6307;&#x5357;Markdown Tables Generator. &#x652F;&#x6301;&#x7248;&#x672C;&#x6709;&#xFF1A; Github Flavored Markdown&#x3001;Kramdown&#x3001;Markdown-it&#x3001;Marked&#x3001;Maruku&#x3001;Multi-Markdown&#x3001;PHP Markdown Extended&#x3001;Python Markdown&#x3001;Redcarpet&#x3001;Remarkable&#x3001;Showdown &#x5143;&#x6570;&#x636E;&#x4E00;&#x4E9B;&#x62D3;&#x5C55;&#x5C06;&#x4F1A;&#x8BA9;&#x4F60;&#x6DFB;&#x52A0;&#x5143;&#x6570;&#x636E;&#x4EE5;&#x4FBF;&#x6DFB;&#x52A0;&#x4E00;&#x4E9B;&#x4FE1;&#x606F;&#xFF0C;&#x4F8B;&#x5982;&#x4F60;&#x7684;&#x5E94;&#x7528;&#x53EF;&#x4EE5;&#x89E3;&#x6790;&#x7684;&#x50CF;&#x662F;&#x9009;&#x62E9;&#x6A21;&#x7248;&#x6216;&#x662F;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x6587;&#x7AE0;&#x6807;&#x9898;&#x3002;&#x4E00;&#x4E9B;&#x4EBA;&#x4F7F;&#x7528;Multi-Markdown structure&#x4E3A;&#x4E86;&#x5143;&#x6570;&#x636E;&#xFF0C;&#x5176;&#x4ED6;&#x4EBA;&#x559C;&#x6B22;Jekyll parser&#x7684;&#x4F7F;&#x7528;YAML&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x8BA9;&#x4F60;&#x8868;&#x8FBE;&#x8FD9;&#x79CD;&#x5143;&#x6570;&#x636E;&#x90E8;&#x5206;&#x4E2D;&#x590D;&#x6742;&#x7684;&#x6570;&#x636E;&#x3002;&#x8FD9;&#x5BF9;&#x4E8E;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x5F00;&#x53D1;&#x4EBA;&#x5458;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x6709;&#x7528;&#x7684;&#x65B9;&#x4FBF;&#x7684;&#x529F;&#x80FD;&#x3002; --- Title: SVG Article Author: Ray Villalobos Date: January 6&#x3001;2016 heroimage: &quot; http://i.imgur.com/rBX9z0k.png&quot; tags: - data visualization - bitmap - raster graphics - navigation --- &#x652F;&#x6301;&#x7684;&#x7248;&#x672C;&#x6709;&#xFF1A; Markdown-it&#x3001;Maruku&#x3001;Multi-Markdown&#x3001;PHP Markdown Extended&#x3001;Python Markdown&#x3001;Redcarpet&#x3001;Remarkable&#x3001;Showdown URL &#x81EA;&#x52A8;&#x94FE;&#x63A5;&#x8FD9;&#x4E9B;&#x7B80;&#x5355;&#x7684;&#x6269;&#x5C55;&#x8BA9;&#x4F60;&#x7684;&#x6587;&#x5B57;&#x4E2D;&#x51FA;&#x73B0;&#x7684;URL&#x901A;&#x8FC7;&#x5206;&#x6790;&#x5668;&#x4F1A;&#x81EA;&#x52A8;&#x8F6C;&#x6362;&#x4E3A;&#x94FE;&#x63A5;&#x3002;&#x8FD9;&#x79CD;&#x529F;&#x80FD;&#x7684;&#x786E;&#x5F88;&#x65B9;&#x4FBF;&#x5B9E;&#x7528;&#xFF0C;&#x50CF;GFM&#x8FD9;&#x6837;&#x7684;&#x5B9E;&#x73B0;&#x7248;&#x672C;&#xFF0C;&#x65E0;&#x9700;&#x989D;&#x5916;&#x7684;&#x5DE5;&#x4F5C;&#x5373;&#x53EF;&#x4F7F;&#x94FE;&#x63A5;&#x53EF;&#x4EE5;&#x70B9;&#x51FB;&#xFF0C;&#x4F7F;&#x5F97;&#x5199;&#x6587;&#x6863;&#x66F4;&#x7B80;&#x5355;&#x3002; &#x652F;&#x6301;&#x7684;&#x7248;&#x672C;&#x6709;&#xFF1A; CommonMark&#x3001;Github Flavored Markdown&#x3001;Kramdown&#x3001;Markdown-it&#x3001;Marked&#x3001;Maruku&#x3001;Multi-Markdown&#x3001;PHP Markdown Extended&#x3001;Python Markdown&#x3001;Redcarpet&#x3001;Remarkable&#x3001;Showdown &#x811A;&#x6CE8;&#x548C;&#x5176;&#x4ED6;&#x94FE;&#x63A5;&#x7C7B;&#x578B;&#x811A;&#x6CE8;&#x5141;&#x8BB8;&#x4F60;&#x628A;&#x4F60;&#x6587;&#x6863;&#x7684;&#x53C2;&#x8003;&#x6587;&#x732E;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x94FE;&#x63A5;&#x653E;&#x7F6E;&#x5728;Markdown&#x9875;&#x9762;&#x5E95;&#x90E8;&#x3002;&#x8FD9;&#x4E0D;&#x540C;&#x4E8E;&#x653E;&#x7F6E;&#x5728;&#x6587;&#x7AE0;&#x5185;&#x5BB9;&#x4E2D;&#x7684;&#x666E;&#x901A;&#x94FE;&#x63A5;&#x3002;&#x8FD9;&#x5141;&#x8BB8;&#x7528;&#x6237;&#x5728;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x7684;&#x90E8;&#x5206;&#xFF0C;&#x6D4F;&#x89C8;&#x6240;&#x6709;&#x7684;&#x76F8;&#x5173;&#x94FE;&#x63A5;&#xFF0C;&#x6709;&#x65F6;&#x4F1A;&#x5F88;&#x6709;&#x5E2E;&#x52A9;&#x3002; &#x4F60;&#x53EF;&#x4EE5;&#x5728;&#x6211;&#x4EEC;&#x7684;&#x6CE8;&#x811A;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x7528;PostCSS&#x642D;&#x5EFA;&#x7684;&#x7AD9;&#x70B9;&#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x6216;&#x8005;&#x5728;Github Repo&#x67E5;&#x770B;&#x8FD9;&#x4E2A;&#x9879;&#x76EE;&#x3002; #### Footnotes [Demo](http://iviewsource.com/exercises/postcsslayouts) [Github Repo](https://github.com/planetoftheweb/postcsslayouts) &#x5728;Multi-Markdown&#x4E2D;&#x8FD8;&#x6709;&#x5F88;&#x591A;&#x5176;&#x4ED6;&#x7684;&#x4EA4;&#x4E92;&#x94FE;&#x63A5;&#x65B9;&#x5F0F;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x4EEC;&#x5728;&#x89C4;&#x8303;&#x4E4B;&#x5916;&#x51E0;&#x4E4E;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x652F;&#x6301;&#x3002;&#x5305;&#x62EC;&#x4EA4;&#x53C9;&#x5F15;&#x7528;&#x548C;&#x5F15;&#x6587;.&#x5F88;&#x6709;&#x53EF;&#x80FD;&#x4E2A;&#x4EBA;&#x89E3;&#x6790;&#x5668;&#x5904;&#x7406;&#x94FE;&#x63A5;&#x7684;&#x65B9;&#x5F0F;&#x5C31;&#x662F;&#x4F60;&#x5C06;&#x8981;&#x53D1;&#x6398;&#x7684;&#x4E1C;&#x897F;&#x3002; &#x652F;&#x6301;&#x7684;&#x7248;&#x672C;&#x6709;&#xFF1A; Kramdown&#x3001;Markdown-it&#x3001;Maruku&#x3001;Multi-Markdown&#x3001;PHP Markdown Extended&#x3001;Python Markdown&#x3001;Redcarpet&#x3001;Remarkable&#x3001;Showdown &#x4EFB;&#x52A1;&#x5217;&#x8868;&#x8FD9;&#x662F;GFM&#x7684;&#x7279;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x5DF2;&#x7ECF;&#x88AB;&#x90E8;&#x5206;&#x7684;&#x5B9E;&#x73B0;&#x3002;&#x5B83;&#x589E;&#x52A0;&#x4E86;&#x4EFB;&#x52A1;&#x5217;&#x8868;&#x6807;&#x8BB0;&#x4F7F;&#x60A8;&#x53EF;&#x4EE5;&#x521B;&#x5EFA;&#x590D;&#x9009;&#x6846;&#x65C1;&#x8FB9;&#x7684;&#x5185;&#x5BB9;&#x6765;&#x6A21;&#x62DF;&#x4E00;&#x4E2A;&#x4EFB;&#x52A1;&#x5217;&#x8868;&#x6E05;&#x5355;&#x3002; - [ ] &#x8FD0;&#x884C; `&gt; npm-install` &#x5B89;&#x88C5;&#x9879;&#x76EE;&#x4F9D;&#x8D56; - [X] &#x901A;&#x8FC7;Mac&#x7684;terminal&#x6216;&#x662F;PC&#x4E0A;&#x7684;Gitbash&#x5B89;&#x88C5; gulp.js &#x8FD0;&#x884C;Gulp&#x547D;&#x4EE4; `&gt; npm install -g gulp` - [ ] &#x8FD0;&#x884C;Gulp&#x547D;&#x4EE4;&#x884C;`&gt; gulp` &#x652F;&#x6301;&#x7684;&#x7248;&#x672C;&#x6709;&#xFF1A; Github Flavored Markdown&#x3001;Markdown-it&#x3001;Marked&#x3001;Python Markdown&#x3001;Redcarpet&#x3001;Showdown &#x5B9A;&#x4E49;&#x5217;&#x8868;&#x867D;&#x7136;&#x5B9A;&#x4E49;&#x5217;&#x8868;&#x4E0D;&#x4E3A;&#x5176;&#x4ED6;&#x7C7B;&#x578B;&#x7684;&#x5217;&#x8868;&#x4E3A;&#x5E38;&#x89C1;&#xFF0C;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x4F1F;&#x5927;&#x7684;&#x65B9;&#x5F0F;&#x7F16;&#x7801;&#x7528;HTML&#x4E2D;&#x7684;&#x67D0;&#x4E9B;&#x7C7B;&#x578B;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x6709;&#x4E9B;&#x5B9E;&#x73B0;&#x521B;&#x5EFA;&#x4E86;&#x66F4;&#x7B80;&#x5355;&#x7684;&#x6DFB;&#x52A0;&#x65B9;&#x5F0F;&#x53BB;&#x6DFB;&#x52A0;&#x8FD9;&#x4E9B;&#x3002;&#x4ED6;&#x4EEC;&#x7684;&#x5B9A;&#x4E49;&#x6709;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#xFF0C;&#x6839;&#x636E;&#x4E0D;&#x540C;&#x7684;&#x8BED;&#x8A00;&#xFF0C;&#x7528;&#x5192;&#x53F7;&#xFF08;&#xFF1A;&#xFF09;&#x6216;&#x7B26;&#x53F7;&#xFF08;~&#xFF09;&#xFF0C;&#x4E0D;&#x8FC7;&#x7528;&#x5192;&#x53F7;&#x7684;&#x5B9E;&#x73B0;&#x7248;&#x672C;&#x66F4;&#x4E3A;&#x5E38;&#x89C1;&#x4E00;&#x4E9B;&#x3002; ES6/ES2015 : &#x6D41;&#x884C;JavaScript&#x7684;&#x65B0;&#x7248;&#x672C; TypeScript ~ TypeScript&#x662F;&#x4E00;&#x4E2A;&#x80FD;&#x591F;&#x8F6C;&#x6362;&#x4E3A;JavaScript&#x7684;&#x3001;&#x5DE5;&#x4F5C;&#x5728;&#x5927;&#x591A;&#x6570;&#x6D4F;&#x89C8;&#x5668;&#x4E0A;&#x7684; &#x652F;&#x6301;&#x7684;&#x7248;&#x672C;&#x6709;&#xFF1A; Kramdown&#x3001;Markdown-it*&#x3001;Maruku&#x3001;Multi-Markdown&#x3001;PHP Markdown Extended&#x3001;Python Markdown&#x3001;Remarkable &#x9700;&#x8981;&#x62D3;&#x5C55; &#x6570;&#x5B66;&#x5BF9;&#x4E8E;&#x4E00;&#x4E9B;&#x7528;&#x6237;&#x6765;&#x8BF4;&#x521B;&#x5EFA;&#x6570;&#x5B66;&#x516C;&#x5F0F;&#x662F;&#x975E;&#x5E38;&#x6709;&#x7528;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x521B;&#x5EFA;&#x8FD9;&#x4E9B;&#x7684;&#x8BED;&#x8A00;&#x5DF2;&#x7ECF;&#x5728;&#x4E00;&#x4E9B;markdown&#x7684;&#x5B9E;&#x73B0;&#x4E2D;&#x51FA;&#x73B0;&#xFF0C;&#x5373;Multi-Markdown&#x3002;&#x5728;&#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x7684;&#x652F;&#x6301;&#x662F;&#x53EF;&#x7528;&#x7684;&#xFF0C;&#x6709;&#x65F6;&#x901A;&#x8FC7;&#x6269;&#x5C55;&#x3002; &#x652F;&#x6301;&#x7684;&#x7248;&#x672C;&#x6709;&#xFF1A; Kramdown&#x3001;Maruku&#x3001;Multi-Markdown&#x3001;Markdown-it&#x3001;Python Markdown &#x9700;&#x8981;&#x62D3;&#x5C55; &#x54E6; &#x4EB2;&#x7231;&#x7684; I/O&#x6709;&#x4E00;&#x4EF6;&#x4E8B;&#x662F;&#x4F60;&#x5FC5;&#x987B;&#x8981;&#x5C0F;&#x5FC3;&#x7684;&#x662F;&#x4E0D;&#x540C;&#x7248;&#x672C;&#x662F;&#x5982;&#x4F55;&#x5904;&#x7406;&#x8F93;&#x5165;&#x8F93;&#x51FA;&#x7684;&#x3002;&#x53EA;&#x662F;&#x56E0;&#x4E3A;&#x4E00;&#x4E2A;&#x7248;&#x672C;&#x8BF4;&#x5B83;&#x652F;&#x6301;&#x8868;&#xFF0C;&#x5E76;&#x4E0D;&#x610F;&#x5473;&#x7740;&#x5B9A;&#x4E49;&#x8868;&#x7684;&#x6807;&#x51C6;&#x65B9;&#x5F0F;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x4E00;&#x4E9B;&#x7248;&#x672C;&#x5C06;&#x751F;&#x6210;HTML&#xFF0C;&#x6709;&#x4E9B;&#x6781;&#x5176;&#x5197;&#x957F;&#xFF0C;&#x6709;&#x4E9B;&#x4F1A;&#x5F88;&#x7B80;&#x3002;&#x8FD8;&#x6709;&#x4E00;&#x5927;&#x53D8;&#x5316;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x5982;&#x7A7A;&#x767D;&#x95F4;&#x9694;&#x5904;&#x7406;&#x3002;&#x6709;&#x4E9B;&#x7248;&#x672C;&#x5C06;&#x5728;&#x6BCF;&#x4E2A;&#x6807;&#x9898;&#x8BBE;&#x7F6E;ID&#x4F46;&#x5176;&#x4ED6;&#x4E00;&#x4E9B;&#x4E0D;&#x4F1A;&#x3002;&#x8FD9;&#x5DF2;&#x7ECF;&#x662F;OpenMark&#x4E4B;&#x540E;&#x5173;&#x6CE8;&#x70B9;&#x4E4B;&#x4E00;&#x3002;&#x6700;&#x597D;&#x8FA8;&#x8BC6;&#x4F60;&#x9009;&#x62E9;&#x7684;&#x7248;&#x672C;&#x652F;&#x6301;&#x54EA;&#x4E9B;&#x65B9;&#x5F0F;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x4F7F;&#x7528;Babelmark 2 test. &#x7C98;&#x8D34;&#x4E00;&#x4E9B;&#x4EE3;&#x7801;&#xFF0C;&#x5B83;&#x5C06;&#x4F1A;&#x5411;&#x4F60;&#x5C55;&#x793A;&#x4E0D;&#x540C;&#x7684;&#x89E3;&#x6790;&#x5668;&#x7684;&#x8F93;&#x51FA;&#x4F5C;&#x4E3A;&#x9884;&#x89C8;","categories":[],"tags":[{"name":"翻译","slug":"翻译","permalink":"https://lfkdsk.github.io/tags/翻译/"}]},{"title":"0x00：SICP 的魔法 - Scheme 基础和黑盒抽象","slug":"learn-sicp-0","date":"2017-02-21T14:22:14.000Z","updated":"2017-02-27T04:03:35.000Z","comments":true,"path":"2017/02/21/learn-sicp-0/","link":"","permalink":"https://lfkdsk.github.io/2017/02/21/learn-sicp-0/","excerpt":"","text":"&#x4F5C;&#x8005; &#xFF1A;&#x5218;&#x4E30;&#x607A; &#x4F5C;&#x8005;&#x535A;&#x5BA2;&#xFF1A;&#x82E5;&#x68A6;&#x6D6E;&#x751F; &#x8F6C;&#x8F7D;&#x9700;&#x5F81;&#x5F97;&#x4F5C;&#x8005;&#x672C;&#x4EBA;&#x540C;&#x610F; &#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x7684;&#x5185;&#x5BB9;&#x5305;&#x7F57;&#x4E07;&#x8C61;&#xFF0C;&#x5176;&#x4E2D;&#x7684;&#x7ECF;&#x5178;&#x7684;&#x8BFE;&#x7A0B;&#x4E5F;&#x662F;&#x4E0D;&#x80DC;&#x679A;&#x4E3E;&#x3002;&#x4F46;&#x662F;&#x5728;&#x8FD9;&#x5176;&#x4E2D;SICP(Structure and Interpretation of Computer Programs)&#x7EDD;&#x5BF9;&#x662F;&#x5176;&#x4E2D;&#x7684;&#x7ECF;&#x5178;&#x548C;&#x7FD8;&#x695A;&#xFF0C;&#x5728;2008&#x5E74;&#x4EE5;&#x524D;SICP&#x7684;MIT6.001&#x8BFE;&#x7A0B;&#x5386;&#x6765;&#x662F;CS&#x76F8;&#x5173;&#x4E13;&#x4E1A;&#x5FC5;&#x4FEE;&#x5165;&#x95E8;&#x8BFE;&#x7A0B;&#x3002; SICP&#x7684;&#x6838;&#x5FC3;&#x5185;&#x5BB9;&#x662F;&#x4EC0;&#x4E48;&#x5462;&#xFF1F;&#x4F17;&#x8BF4;&#x7EB7;&#x4E91;&#xFF0C;&#x6709;&#x4EBA;&#x8BF4;&#x662F;&#x4E00;&#x672C;&#x6709;&#x5173;Lisp&#xFF0F;Scheme&#x7684;&#x4E66;&#x4E3B;&#x8981;&#x8BB2;&#x51FD;&#x6570;&#x5F0F;&#x7F16;&#x7A0B;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x6709;&#x7684;&#x8BF4;&#x662F;&#x4E00;&#x672C;&#x6709;&#x5173;&#x89E3;&#x91CA;&#x5668;&#x6784;&#x9020;&#x7684;&#x5165;&#x95E8;&#x4E66;&#x7C4D;&#xFF0C;&#x548C;&#x6211;&#x4EEC;&#x5B66;&#x8FC7;&#x7684;&#x9F99;&#x4E66;&#x6302;&#x94A9;&#xFF0C;&#x4F46;&#x5C31;&#x6211;&#x4E2A;&#x4EBA;&#x800C;&#x8A00;&#xFF0C;SICP&#x4F5C;&#x4E3A;&#x4E00;&#x672C;&#x5165;&#x95E8;&#x4E66;&#x66F4;&#x591A;&#x7684;&#x4E0D;&#x662F;&#x62C5;&#x8D1F;&#x8D77;&#x4ECB;&#x7ECD;&#x67D0;&#x4E00;&#x65B9;&#x9762;&#x5177;&#x4F53;&#x7684;&#x77E5;&#x8BC6;&#x7684;&#x91CD;&#x4EFB;&#xFF0C;&#x800C;&#x662F;&#x4ECE;&#x591A;&#x4E2A;&#x89D2;&#x5EA6;&#x53BB;&#x6559;&#x4E00;&#x4E2A;&#x521D;&#x5B66;&#x8005;&#x4ECE;&#x7A0B;&#x5E8F;&#x62BD;&#x8C61;&#x3001;&#x7406;&#x89E3;&#x5DE5;&#x7A0B;&#x67B6;&#x6784;&#x3001;&#x5B66;&#x4E60;DSL&#x7684;&#x6784;&#x5EFA;&#x65B9;&#x6CD5;&#x2026;&#x2026;&#xFF0C;&#x4E0D;&#x5355;&#x7EAF;&#x4ECB;&#x7ECD;&#x4E00;&#x65B9;&#x9762;&#x7684;&#x77E5;&#x8BC6;&#x800C;&#x662F;&#x5B8C;&#x5907;&#x7684;&#x5F62;&#x6210;&#x4E00;&#x4E2A;&#x95ED;&#x73AF;&#x7684;&#x53BB;&#x50CF;&#x4F60;&#x4ECB;&#x7ECD;&#x4EC0;&#x4E48;&#x662F;Computer Science&#x3002;&#x76F8;&#x6BD4;&#x4E8E;&#x8FD9;&#x4E9B;&#x5F53;&#x521D;&#x9009;&#x7528;MIT Scheme&#x73B0;&#x5728;&#x4F7F;&#x7528;Python&#xFF0C;&#x4E0D;&#x8FC7;&#x662F;&#x6700;&#x5927;&#x7A0B;&#x5EA6;&#x4E0A;&#x51CF;&#x5C0F;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x672C;&#x8EAB;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x5BF9;&#x5B66;&#x751F;&#x7406;&#x89E3;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x4E2A;&#x4EBA;&#x89C9;&#x5F97;&#x65E0;&#x8DB3;&#x6302;&#x6000;&#x3002; SICP&#x7684;&#x5404;&#x4E2A;&#x7248;&#x672C;&#x7684;&#x5C01;&#x9762;&#xFF0C;&#x90FD;&#x9009;&#x62E9;&#x4E86;&#x9B54;&#x6CD5;&#x5E08;&#x4F5C;&#x4E3A;&#x5176;&#x4E2D;&#x7684;&#x4E3B;&#x8981;&#x7D20;&#x6750;&#xFF0C;&#x8FD9;&#x91CC;&#x4E5F;&#x4F5C;&#x4E3A;&#x6211;&#x8FD9;&#x4E2A;&#x7CFB;&#x5217;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x8BA9;&#x6211;&#x4EEC;&#x4E00;&#x8D77;&#x9886;&#x7565;SICP&#x7684;&#x9B54;&#x6CD5;&#x3002; &#x5B66;&#x4E60;&#x4E4B;&#x524D;&#x5728;&#x6B63;&#x5F0F;&#x5F00;&#x59CB;&#x4E4B;&#x524D;&#xFF0C;&#x6211;&#x4EEC;&#x5148;&#x7B80;&#x5355;&#x7684;&#x4E86;&#x89E3;&#x51E0;&#x4E2A;&#x95EE;&#x9898;&#x3002; &#x6211;&#x4EEC;&#x5982;&#x4F55;&#x770B;&#x5F85;Computer Science&#xFF1F; &#x5F88;&#x60CA;&#x4EBA;&#x5BF9;&#x5427;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x770B;&#x5230;&#x8FD9;&#x4E2A;NO COMPUTER NO SCIENCE&#x7684;&#x65F6;&#x5019;&#x6211;&#x4E5F;&#x662F;&#x88AB;&#x8FD9;&#x79CD;&#x8BF4;&#x6CD5;&#x5413;&#x5230;&#x4E86;&#x3002;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x8BF4;&#x6CD5;&#x7684;&#x8BB2;&#x89E3;&#x5012;&#x4E5F;&#x662F;&#x80FD;&#x81EA;&#x5706;&#x5176;&#x8BF4;&#x3002; &#x9996;&#x5148;&#x662F;NO SCIENCE&#xFF0C;&#x4F5C;&#x8005;&#x5728;&#x8BFE;&#x4E0A;&#x8BF4;CS&#x4E0D;&#x50CF;&#x662F;&#x4E00;&#x95E8;&#x79D1;&#x5B66;&#x66F4;&#x50CF;&#x662F;&#x4E00;&#x95E8;&#x827A;&#x672F;&#x6216;&#x8005;&#x662F;&#x5DE5;&#x7A0B;&#x3002;&#x5DE5;&#x7A0B;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x4F46;&#x662F;&#x827A;&#x672F;&#x542C;&#x8D77;&#x6765;&#x5C31;&#x5F88;&#x7384;&#x4E4B;&#x53C8;&#x7384;&#x7684;&#x611F;&#x89C9;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x91CC;&#x7B14;&#x8005;&#x60F3;&#x8C08;&#x8C08;&#x81EA;&#x5DF1;&#x7684;&#x611F;&#x53D7;&#xFF0C;&#x5BF9;&#x4E8E;&#x7B14;&#x8005;&#x4E2A;&#x4EBA;&#x800C;&#x8A00;&#xFF0C;&#x7F16;&#x7A0B;&#x50CF;&#x662F;&#x4E00;&#x79CD;&#x5199;&#x4F5C;&#xFF0C;&#x5C31;&#x60F3;&#x5199;&#x4F5C;&#x5F53;&#x524D;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x7684;&#x611F;&#x89C9;&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x4EE3;&#x7801;&#xFF0F;&#x6587;&#x5B57;&#x4ECE;&#x624B;&#x4E2D;&#x6D41;&#x6DCC;&#x51FA;&#x6765;&#xFF0C;&#x5F62;&#x6210;&#x7A0B;&#x5E8F;&#xFF0F;&#x6587;&#x7AE0;&#xFF0C;&#x4E24;&#x8005;&#x53EF;&#x4EE5;&#x8BF4;&#x662F;&#x8FD1;&#x4E4E;&#x76F8;&#x540C;&#x7684;&#x3002; &#x518D;&#x8BF4;&#x8FD9;&#x4E2A;NO COMPUTER&#xFF0C;&#x4F5C;&#x8005;&#x8BA4;&#x4E3A;&#x8FD9;&#x95E8;&#x5B66;&#x79D1;&#x4E5F;&#x4E0D;&#x662F;&#x5B8C;&#x5168;&#x548C;&#x8BA1;&#x7B97;&#x673A;&#x6709;&#x5173;&#xFF0C;&#x5C31;&#x50CF;&#x51E0;&#x4F55;&#x5B66;&#x4E0D;&#x4E00;&#x5B9A;&#x5408;&#x5706;&#x89C4;&#x548C;&#x91CF;&#x89D2;&#x5668;&#x6709;&#x5173;&#x7CFB;&#x4E00;&#x6837;&#xFF0C;&#x6587;&#x4EE5;&#x8F7D;&#x9053;&#xFF0C;&#x8BA1;&#x7B97;&#x673A;&#x53EA;&#x662F;&#x5E2E;&#x52A9;&#x6211;&#x4EEC;&#x5B9E;&#x73B0;&#x8FD9;&#x4E9B;&#x529F;&#x80FD;&#x7684;&#x5DE5;&#x5177;&#x800C;&#x5DF2;&#xFF0C;&#x8FD9;&#x4E5F;&#x5C31;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x53D8;&#x6210;&#x4F1A;&#x88AB;&#x79F0;&#x4F5C;&#x548C;&#x9B54;&#x6CD5;&#x76F8;&#x540C;&#xFF0C;&#x7F16;&#x5199;&#x4EE3;&#x7801;&#xFF0F;&#x7F16;&#x5199;&#x5492;&#x8BED;&#xFF0C;&#x5373;&#x4F7F;&#x6211;&#x4EEC;&#x751F;&#x6D3B;&#x5728;&#x4E00;&#x4E2A;&#x6CA1;&#x6709;&#x8BA1;&#x7B97;&#x673A;&#x7684;&#x9B54;&#x6CD5;&#x4E16;&#x754C;&#xFF0C;&#x6211;&#x4EEC;&#x4ECD;&#x7136;&#x80FD;&#x5B66;&#x4E60;&#x8FD9;&#x95E8;&#x8BFE;&#x7A0B;&#xFF08;&#x5F53;&#x7136;&#x4E0D;&#x4F1A;&#x518D;&#x88AB;&#x79F0;&#x4E4B;&#x4E3A;CS&#x4E86;&#xFF09;&#x3002; &#x5B9A;&#x4E49;&#x548C;&#x8FC7;&#x7A0B;&#x7684;&#x7406;&#x89E3; &#x6211;&#x4EEC;&#x9996;&#x5148;&#x6765;&#x770B;&#x8FD9;&#x4E2A;&#x516C;&#x5F0F;&#xFF0C;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5BF9;&#x4E8E;&#x5E73;&#x65B9;&#x6839;&#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x548C;&#x6211;&#x4EEC;&#x5728;&#x6570;&#x5B66;&#x4E66;&#x4E0A;&#x5B66;&#x5230;&#x7684;&#x4E00;&#x6837;&#x3002;&#x7ED9;&#x6211;&#x4EEC;&#x4E00;&#x4E2A;y&#x7684;&#x503C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F88;&#x65B9;&#x4FBF;&#x7684;&#x786E;&#x5B9A;&#x662F;&#x4E0D;&#x662F;x&#x7684;&#x5E73;&#x65B9;&#x6839;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x516C;&#x5F0F;&#x5E76;&#x4E0D;&#x80FD;&#x544A;&#x8BC9;&#x6211;&#x4EEC;&#x5E73;&#x65B9;&#x6839;&#x5230;&#x5E95;&#x662F;&#x600E;&#x4E48;&#x6C42;&#x7684;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x4E0A;&#x6587;&#x53EA;&#x662F;&#x5728;&#x544A;&#x8BC9;&#x6211;&#x4EEC;&#x5E73;&#x65B9;&#x6839;&#x5230;&#x5E95;&#x662F;&#x4EC0;&#x4E48;&#x3002; &#x4F46;&#x662F;&#x5982;&#x679C;&#x8981;&#x6D89;&#x53CA;&#x600E;&#x4E48;&#x6C42;&#x5E73;&#x65B9;&#x6839;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x9700;&#x8981;&#x501F;&#x52A9;&#x725B;&#x987F;&#x8FED;&#x4EE3;&#x6CD5;&#x4E86;&#xFF0C;&#x901A;&#x8FC7;&#x731C;&#x6D4B;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x518D;&#x6839;&#x636E;&#x6C42;&#x51FA;&#x5546;&#xFF0C;&#x4E24;&#x8005;&#x76F8;&#x52A0;&#x6C42;&#x5E73;&#x5747;&#x503C;&#x4F5C;&#x4E3A;&#x4E0B;&#x4E00;&#x6B21;&#x7684;&#x5E73;&#x65B9;&#x6839;&#x731C;&#x6D4B;&#x91CF;&#xFF0C;&#x8FD9;&#x6837;&#x9010;&#x6B65;&#x903C;&#x8FD1;&#x5230;&#x8FBE;&#x4E00;&#x4E2A;&#x6700;&#x63A5;&#x8FD1;&#x7684;&#x6570;&#x503C;&#x5C31;&#x662F;x&#x7684;&#x5E73;&#x65B9;&#x6839;&#x3002; &#x5982;&#x4E0B;&#x6C42; 2 &#x7684;&#x5E73;&#x65B9;&#x6839; &#x731C;&#x6D4B;&#x91CF; &#x5546; &#x5E73;&#x5747;&#x503C; 1 2/1 = 2 (2 + 1) / 2 = 1.5 1.5 2 / 1.5 = 1.3333 (1.5 + 1.3333) / 2 = 1.4167 1.4167 2 / 1.4167 = 1.4118 (1.4167 + 1.4118 ) / 2 = 1.4142 1.4142 &#x2026; &#x8FD9;&#x4E2A;&#x4F7F;&#x7528;&#x725B;&#x987F;&#x8FED;&#x4EE3;&#x6CD5;&#x7684;&#x6B65;&#x9AA4;&#x5C31;&#x53EF;&#x4EE5;&#x79F0;&#x4F5C;&#x4E3A;&#x662F;&#x8FC7;&#x7A0B;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x89E3;&#x51B3;&#x4E86;&#x6211;&#x4EEC;&#x5982;&#x4F55;&#x6C42;&#x89E3;&#x5E73;&#x65B9;&#x6839;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x544A;&#x8BC9;&#x4E86;&#x6211;&#x4EEC;&#x600E;&#x4E48;&#x505A;&#x3002; Scheme &#x57FA;&#x7840;&#x4E4B;&#x524D;&#x6211;&#x4EEC;&#x8BF4;&#x8FC7;&#xFF0C;&#x9009;&#x62E9; Scheme &#x770B;&#x91CD;&#x7684;&#x662F;&#x5B83;&#x7684;&#x51FD;&#x6570;&#x6027;&#x7279;&#x6027;&#xFF0C;&#x4F46;&#x662F;&#x66F4;&#x91CD;&#x8981;&#x7684;&#x662F;&#x5B83;&#x7684;&#x7B80;&#x6D01;&#x6613;&#x7528;&#x80FD;&#x51CF;&#x5C11;&#x5B66;&#x4E60;&#x8BED;&#x8A00;&#x7684;&#x8D1F;&#x62C5;&#x3002; Scheme &#x662F;&#x4E00;&#x95E8;&#x89E3;&#x91CA;&#x5668;&#x8BED;&#x8A00;&#xFF0C;&#x5176;&#x5B9E;&#x4E5F;&#x6709;&#x7F16;&#x8BD1;&#x5668;&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x4E0D;&#x8FC7;&#x8FD9;&#x90FD;&#x4E0D;&#x91CD;&#x8981;&#x3002;&#x89E3;&#x91CA;&#x5668;&#x8BED;&#x8A00;&#x662F;&#x4E00;&#x4E2A;&#x63A5;&#x53D7;&#x8F93;&#x5165;&#x8FD4;&#x56DE;&#x6570;&#x636E;&#x7684;&#x5927;&#x5FAA;&#x73AF;(Read-Evaluate-Print Loop)&#xFF0C;&#x5C31;&#x50CF;&#x662F;&#x804A;&#x5929;&#x7684;&#x4EA4;&#x4E92;&#x4E00;&#x6837;&#xFF0C;&#x6BCF;&#x63A5;&#x53D7;&#x4E00;&#x6BB5;&#x8F93;&#x5165;&#xFF0C;&#x5C31;&#x8FD4;&#x56DE;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x7684;&#x6267;&#x884C;&#x7ED3;&#x679C;&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x4E66;&#x5C01;&#x9762;&#x56FE;&#x7684;&#x7531;&#x6765;&#xFF1A; &#x200B; (&#x4E00;&#x4E2A;Eval&#x548C;Apply&#x4E92;&#x751F;&#x7684;&#x7403;) &#x6784;&#x9020;&#x8BED;&#x8A00;&#x7684;&#x4E09;&#x4E2A;&#x57FA;&#x672C;&#x8981;&#x7D20; &#x57FA;&#x672C;&#x8868;&#x8FBE;&#x5F0F;&#x5F62;&#x5F0F;&#xFF1A;&#x6784;&#x9020;&#x5404;&#x79CD;&#x7A0B;&#x5E8F;&#x7684;&#x57FA;&#x7840; &#x7EC4;&#x5408;&#x673A;&#x5236;&#xFF1A;&#x7B80;&#x5355;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x6784;&#x9020;&#x66F4;&#x590D;&#x6742;&#x7684;&#x8868;&#x8FBE;&#x5F0F; &#x62BD;&#x8C61;&#x673A;&#x5236;&#xFF1A;&#x4E3A;&#x590D;&#x6742;&#x7684;&#x7ED3;&#x6784;&#x547D;&#x540D;&#xFF0C;&#x901A;&#x8FC7;&#x7B80;&#x5355;&#x65B9;&#x5F0F;&#x4F7F;&#x7528; &#x8FD9;&#x4E09;&#x8005;&#x7684;&#x610F;&#x4E49;&#x90FD;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x8FD9;&#x91CC;&#x8FD8;&#x8981;&#x9488;&#x5BF9; Scheme &#x7684;&#x8BED;&#x6CD5;&#x7279;&#x6027;&#x53BB;&#x5206;&#x522B;&#x7406;&#x89E3;&#xFF0C;&#x6682;&#x4E14;&#x6309;&#x4E0B;&#x4E0D;&#x8868;&#x3002; &#x8BED;&#x8A00;&#x5904;&#x7406;&#x7684;&#x4E24;&#x79CD;&#x8981;&#x7D20;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;&#x5305;&#x542B;&#x4E24;&#x7C7B;&#x5904;&#x7406;&#x8981;&#x7D20;&#xFF1A; &#x8FC7;&#x7A0B; &#x6570;&#x636E; &#x8FD9;&#x4E24;&#x8005;&#x6211;&#x4EEC;&#x4E5F;&#x90FD;&#x719F;&#x6089;&#xFF0C;&#x5728;&#x6211;&#x4EEC;&#x5B66;&#x8FC7;&#x7684;&#x5927;&#x90E8;&#x5206;&#x9759;&#x6001;&#x8BED;&#x8A00;&#x4E2D;&#x5982;&#xFF1A;C(&#x8FD9;&#x4E2A;&#x8D8A;&#x6765;&#x8D8A;&#x96BE;&#x4E3E;&#x4F8B;&#x5B50;&#x4E86;&#xFF0C;Cpp&#xFF0F;Java&#x90FD;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x51FD;&#x6570;&#x5F0F;&#x5B9E;&#x73B0;)&#x4E2D;&#xFF0C;&#x8FC7;&#x7A0B;&#x5C31;&#x662F;&#x4EE3;&#x7801;&#x7A0B;&#x5E8F;&#xFF0C;&#x6570;&#x636E;&#x5462;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x4E24;&#x8005;&#x695A;&#x6CB3;&#x6C49;&#x754C;&#x3001;&#x6CFE;&#x6E2D;&#x5206;&#x660E;&#x3002; &#x4F46;&#x662F;&#x5728; Scheme &#x4E2D;&#x5C31;&#x50CF;&#x90A3;&#x4E2A;&#x592A;&#x6781;&#x56FE;&#x4E00;&#x6837;&#xFF0C;&#x8FC7;&#x7A0B;&#x548C;&#x6570;&#x636E;&#x7684;&#x754C;&#x9650;&#x8D8A;&#x6765;&#x8D8A;&#x6A21;&#x7CCA;&#xFF0C;&#x6570;&#x636E;&#x53EF;&#x4F5C;&#x4E3A;&#x88AB;&#x6267;&#x884C;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x4EE3;&#x7801;&#x53EF;&#x4F5C;&#x4E3A;&#x88AB;&#x5904;&#x7406;&#x7684;&#x6570;&#x636E;&#x3002; &#x7B80;&#x5355;&#x7684;&#x8BED;&#x6CD5;&#x77E5;&#x8BC6;&#x8FD9;&#x91CC;&#x4ECB;&#x7ECD;&#x4E00;&#x4E9B;&#x7B80;&#x5355;&#x7684;&#x8BED;&#x6CD5;&#x77E5;&#x8BC6;&#x7528;&#x6765;&#x5B66;&#x4E60;&#x66F4;&#x591A;&#x7684;&#x76F8;&#x5173;&#x77E5;&#x8BC6;&#x3002; &#x8868;&#x8FBE;&#x5F0F;&#x5728; Scheme &#x4E2D; &#x8868;&#x8FBE;&#x5F0F;&#x4E2D;&#x6700;&#x57FA;&#x672C;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF1A; 12&gt; 486 ; &#x8F93;&#x5165;486 &#x7B80;&#x5355;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x4F7F;&#x7528;&#x524D;&#x7F00;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x62EC;&#x53F7;&#x91CC;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x8868;&#x793A;&#x64CD;&#x4F5C;&#xFF08;&#x8FD0;&#x7B97;&#xFF09;&#xFF0C;&#x540E;&#x9762;&#x662F;&#x53C2;&#x6570;&#xFF08;&#x8FD0;&#x7B97;&#x5BF9;&#x8C61;&#xFF09;&#x8FD0;&#x7B97;&#x7B26;&#x548C;&#x53C2;&#x6570;&#x4E4B;&#x95F4;&#x3001;&#x4E0D;&#x540C;&#x53C2;&#x6570;&#x4E4B;&#x95F4;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x9694;&#xFF1A; 1234&gt; (+ 34 5)39&gt; (* 3 4)12 &#x7EC4;&#x5408;&#x5B50;&#x8868;&#x8FBE;&#x5F0F;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x5D4C;&#x5957;&#x548C;&#x7EC4;&#x5408;&#xFF1A; 12&gt; (+ 1 (* 3 4))13 &#x6CE8;&#x610F;&#x4F7F;&#x7528;&#x5408;&#x7406;&#x7684;&#x4EE3;&#x7801;&#x4E66;&#x5199;&#x89C4;&#x8303; &#x547D;&#x540D;&#x548C;&#x73AF;&#x5883;&#x5BF9;&#x53D8;&#x91CF;&#x548C;&#x8FC7;&#x7A0B;&#x8FDB;&#x884C;&#x547D;&#x540D;&#xFF1A; 1234567&gt; (define size 15) ; &#x5B9A;&#x4E49;&#x53D8;&#x91CF;size&gt; (define (getSize x) ; &#x5B9A;&#x4E49;&#x8FC7;&#x7A0B; (* x 3))getSize&gt; (getSize 12)36 &#x5C0F;&#x6807;&#x9898;&#x91CC;&#x9762;&#x63D0;&#x5230;&#x4E86;&#x73AF;&#x5883;(environment)&#x8FD9;&#x4E2A;&#x610F;&#x4E49;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x4ECB;&#x7ECD;&#x4E00;&#x4E0B;&#xFF0C;&#x5176;&#x5B9E;&#x8FD9;&#x4E2A;&#x73AF;&#x5883;&#x548C;&#x4F5C;&#x7528;&#x57DF;&#x548C;&#x53EF;&#x89C1;&#x6027;&#x90FD;&#x662F;&#x76F8;&#x5173;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x7A0B;&#x5E8F;&#x6709;&#x4E00;&#x4E2A;&#x5168;&#x5C40;&#x7684;Map&#x5B58;&#x50A8;&#x4E86;&#x5F88;&#x591A;&#x7684;&#x952E;&#x503C;&#x5BF9;&#xFF0C;Key&#x662F;&#x540D;&#x5B57;&#xFF0C;Value&#x662F;&#x6570;&#x636E;&#x8FD8;&#x662F;&#x8FC7;&#x7A0B;&#x90FD;&#x53EF;&#x4EE5;&#x3002;&#x9664;&#x6B64;&#x4EE5;&#x5916;&#xFF0C;&#x7A0B;&#x5E8F;&#x7684;&#x6BCF;&#x4E00;&#x5C42;block&#xFF08;&#x4EE3;&#x7801;&#x5757;&#xFF09;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x81EA;&#x5DF1;&#x7684;Map&#x5B58;&#x50A8;&#x5F53;&#x524D;&#x73AF;&#x5883;&#x4E0B;&#x7684;&#x952E;&#x503C;&#x5BF9;&#xFF0C;&#x8FD9;&#x4E2A;&#x5B58;&#x50A8;&#x7684;Map&#x5C31;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x7406;&#x89E3;&#x4E3A;&#x5F53;&#x524D;&#x7684;&#x73AF;&#x5883;&#x3002; Tips: &#x4E0E;C&#x8BED;&#x8A00;&#x5BF9;&#x6BD4;&#xFF1A; C&#x91CC;&#x9762;&#x6CA1;&#x6709;&#x660E;&#x663E;&#x7684;&#x73AF;&#x5883;&#x5B9A;&#x4E49;&#xFF0C;&#x4F46;&#x662F;&#x4ECE;&#x53D8;&#x91CF;&#x7684;&#x53EF;&#x89C1;&#x6027;&#xFF0F;&#x8986;&#x76D6;&#xFF0F;&#x4E0A;&#x80FD;&#x770B;&#x51FA;&#x73AF;&#x5883;&#x3002; C&#x4E2D;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x5728;&#x5F53;&#x524D;&#x73AF;&#x5883;&#x4E2D;&#x6C42;&#x503C;&#xFF0C;&#x8BED;&#x53E5;&#x53EF;&#x80FD;&#x4FEE;&#x6539;&#x5F53;&#x524D;&#x73AF;&#x5883;&#x4E2D;&#x6709;&#x6548;&#x5B9A;&#x4E49;&#x7684;&#x53D8;&#x91CF;&#xFF08;Scheme&#x7684;&#x533A;&#x522B;&#x4E4B;&#x540E;&#x4F1A;&#x8BE6;&#x89E3;&#xFF09;&#x3002; C&#x4E2D;&#x6709;&#x660E;&#x786E;&#x7684;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#xFF0C;Scheme &#x8FDE;&#x6570;&#x636E;&#x548C;&#x8FC7;&#x7A0B;&#x90FD;&#x6A21;&#x7CCA;&#x4E86;&#xFF0C;&#x8FD9;&#x4E2A;&#x81EA;&#x7136;&#x4E5F;&#x4E0D;&#x4F1A;&#x6709;&#x3002; &#x5C0F;&#x7ED3;&#x4F7F;&#x7528;&#x4E0A;&#x9762;&#x4E09;&#x4E2A;&#x5C0F;&#x8282;&#x7684;&#x7B80;&#x5355;&#x7684; Lisp &#x77E5;&#x8BC6;&#xFF0C;&#x6211;&#x4EEC;&#x51E0;&#x4E4E;&#x5C31;&#x53EF;&#x4EE5;&#x5F00;&#x59CB;&#x7F16;&#x5199;&#x4EE3;&#x7801;&#x4E86;&#xFF0C;&#x867D;&#x7136;&#x6211;&#x4EEC;&#x8FD8;&#x6CA1;&#x6709;&#x4ECB;&#x7ECD;&#x5206;&#x679D;&#x7ED3;&#x6784;&#xFF0C;&#x5FAA;&#x73AF;&#x7ED3;&#x6784;&#xFF0C;&#x4E0A;&#x9762;&#x7684;&#x4E09;&#x4E2A;&#x5C0F;&#x8282;&#x5DF2;&#x7ECF;&#x8986;&#x76D6;&#x4E86;&#x6784;&#x6210;&#x4E00;&#x4E2A;&#x8BED;&#x8A00;&#x7684;&#x4E09;&#x8981;&#x7D20;&#xFF1A; &#x57FA;&#x672C;&#x8868;&#x8FBE;&#x5F0F;&#x5F62;&#x5F0F;&#xFF1A;&#x6784;&#x9020;&#x5404;&#x79CD;&#x7A0B;&#x5E8F;&#x7684;&#x57FA;&#x7840; * / + - &#x7EC4;&#x5408;&#x673A;&#x5236;&#xFF1A;&#x7B80;&#x5355;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x6784;&#x9020;&#x66F4;&#x590D;&#x6742;&#x7684;&#x8868;&#x8FBE;&#x5F0F; ( ) &#x62BD;&#x8C61;&#x673A;&#x5236;&#xFF1A;&#x4E3A;&#x590D;&#x6742;&#x7684;&#x7ED3;&#x6784;&#x547D;&#x540D;&#xFF0C;&#x901A;&#x8FC7;&#x7B80;&#x5355;&#x65B9;&#x5F0F;&#x4F7F;&#x7528; define &#x9ED1;&#x7BB1; Tips: &#x5176;&#x4F59;&#x6709;&#x7528;&#x7684;&#x7B80;&#x5355;&#x8BED;&#x6CD5;&#x77E5;&#x8BC6; &#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F; 1234567891011&gt; ; &#x7C7B;&#x4F3C;switch&#x8BED;&#x6CD5;&#x7ED3;&#x6784;&#x7684;cond&#x5B50;&#x53E5;&gt; (define (abs x)&gt; (cond ((&gt; x 0) x)&gt; ((= x 0) x)&gt; ((&lt; x 0) -x)))&gt; ; if&#x5B50;&#x53E5;&gt; (define (abs x)&gt; (if (&lt; x 0)&gt; (-x)&gt; x))&gt; &#x590D;&#x5408;&#x8C13;&#x8BCD; 1234567&gt; ; and &gt; (and expr1 expr2...)&gt; ; or &gt; (or expr1 expr2...)&gt; ; not&gt; (not expr1)&gt; &#x518D;&#x770B;&#x5E73;&#x65B9;&#x6839;&#x4E4B;&#x524D;&#x6211;&#x4EEC;&#x63D0;&#x5230;&#x4E86;&#x7528;&#x725B;&#x987F;&#x8FED;&#x4EE3;&#x6CD5;&#x6C42;&#x5E73;&#x65B9;&#x6839;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x6574;&#x4E2A;&#x8FC7;&#x7A0B;&#x5C31;&#x50CF;&#x662F;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x4E2A;&#x9ED1;&#x7BB1;&#x4E00;&#x6837;&#xFF0C;&#x6211;&#x4EEC;&#x4E0D;&#x9700;&#x8981;&#x77E5;&#x9053;&#x8FC7;&#x7A0B;&#x5B9E;&#x73B0;&#x7684;&#x7EC6;&#x8282;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#xFF1A; &#x518D;&#x4ECE;&#x5206;&#x89E3;&#x7684;&#x89D2;&#x5EA6;&#x4E0A;&#x770B;&#x7ED3;&#x5408;&#x6211;&#x4EEC;&#x5728;&#x7B2C;&#x4E00;&#x8282;&#x91CC;&#x9762;&#x7684;&#x8BA8;&#x8BBA;&#xFF0C;&#x518D;&#x52A0;&#x4E0A;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x5B66;&#x8FC7;&#x4E86;&#x4E00;&#x4E9B; Scheme &#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x6211;&#x4EEC;&#x80FD;&#x5F97;&#x51FA;&#x8FD9;&#x6837;&#x7684;&#x8BA1;&#x7B97;&#x5E73;&#x65B9;&#x6839;&#x7684;&#x4EE3;&#x7801;&#xFF1A; 12345(define (sqrt-iter guess x) (if (good-enough? guess x) guess (sqrt-iter (improve guess x) x))) &#x200B; &#x6C42;&#x503C;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x88AB;&#x5206;&#x89E3;&#x6210;&#x4E86;&#x51E0;&#x4E2A;&#x5B50;&#x51FD;&#x6570;&#x6765;&#x8BA1;&#x7B97;&#xFF0C;good-enough?&#x662F;&#x4E00;&#x4E2A;&#x5224;&#x65AD;&#x5BF9;&#x7CBE;&#x5EA6;&#x7684;&#x5224;&#x65AD;&#xFF0C;improve&#x662F;&#x6C42;&#x5E73;&#x5747;&#x503C;&#xFF0C;&#x603B;&#x800C;&#x8A00;&#x4E4B;&#xFF0C;&#x7565;&#x53BB;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x8FD9;&#x4E2A;&#x7B97;&#x6CD5;&#x5176;&#x5B9E;&#x76F8;&#x5F53;&#x7684;&#x8F7B;&#x4FBF;&#x548C;&#x6613;&#x61C2;&#x3002; &#x200B; &#x7B97;&#x6CD5;&#x7684;&#x5206;&#x89E3;&#x56FE;&#x5982;&#x4E0B;&#xFF1A; &#x8FD9;&#x4E5F;&#x662F;&#x9ED1;&#x7BB1;&#x7684;&#x53E6;&#x4E00;&#x79CD;&#x89D2;&#x5EA6;&#xFF0C;&#x4ECE;&#x7ED3;&#x6784;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x4E0D;&#x4F46;&#x8FC7;&#x7A0B;&#x662F;&#x7528;&#x6237;&#x7684;&#x9ED1;&#x7BB1;&#xFF0C;&#x8FC7;&#x7A0B;&#x548C;&#x8FC7;&#x7A0B;&#x4E4B;&#x95F4;&#x4E5F;&#x662F;&#x5B58;&#x5728;&#x7740;&#x62A4;&#x536B;&#x9ED1;&#x7BB1;&#x7684;&#x5173;&#x7CFB;&#x7684;&#xFF0C;&#x6BD4;&#x5982;sqare&#x662F;good-enough&#x7684;&#x9ED1;&#x7BB1;&#xFF0C;good-enough&#x53C8;&#x662F;sqrt-iter&#x7684;&#x9ED1;&#x7BB1;&#x3002; &#x6240;&#x4EE5;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x80FD;&#x5F97;&#x5230;&#x8FD9;&#x6837;&#x7684;&#x7ED3;&#x8BBA;&#xFF1A; &#x5E94;&#x8BE5;&#x628A;&#x88AB;&#x7528;&#x7684;&#x8FC7;&#x7A0B;&#x770B;&#x4F5C;&#x9ED1;&#x7BB1;&#xFF0C;&#x5173;&#x6CE8;&#x529F;&#x80FD;&#xFF0C;&#x4E0D;&#x5173;&#x6CE8;&#x5176;&#x5B9E;&#x73B0; &#x8FC7;&#x7A0B;&#x62BD;&#x8C61;&#x7684;&#x672C;&#x8D28;&#x662F;&#x4E00;&#x79CD;&#x529F;&#x80FD;&#x5206;&#x89E3;&#xFF0C;&#x5404;&#x4E2A;&#x5B50;&#x8FC7;&#x7A0B;&#x4E4B;&#x95F4;&#x4E5F;&#x4E92;&#x4E3A;&#x9ED1;&#x7BB1; &#x8FC7;&#x7A0B;&#x62BD;&#x8C61;&#x7684;&#x5B9E;&#x73B0;&#x624B;&#x6BB5; &#x5C40;&#x90E8;&#x540D;&#xFF1A; 12(define (square x) (* x x))(define (square y) (* y y)) &#x8FD9;&#x4E1C;&#x897F;&#x5176;&#x5B9E;&#x5F88;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x4E0A;&#x9762;&#x7684;&#x4E24;&#x4E2A;&#x5B9A;&#x4E49;&#x672C;&#x8EAB;&#x4E0D;&#x56E0;&#x5F62;&#x53C2;&#x540D;&#x5B57;&#x7684;&#x6539;&#x53D8;&#x800C;&#x6539;&#x53D8;&#xFF0C;x&#x662F;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x7684;&#x7EA6;&#x675F;&#x6BD4;&#x53D8;&#x91CF;&#xFF0C;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x4F5C;&#x7528;&#x57DF;&#x9003;&#x4E0D;&#x51FA;&#x5F53;&#x5C42;&#x73AF;&#x5883;&#xFF0C;&#x53EA;&#x662F;&#x4E00;&#x4E2A;&#x5360;&#x4F4D;&#x7B26;&#x3002; &#x8FD9;&#x5176;&#x4E2D;&#x5982;&#x679C;&#x81EA;&#x7531;&#x53D8;&#x91CF;&#xFF08;&#x7C7B;&#x6BD4;&#x53EF;&#x89C1;&#x6027;&#x5F3A;&#x7684;&#x53D8;&#x91CF;&#xFF09;&#x548C;&#x7EA6;&#x675F;&#x53D8;&#x91CF;&#x540D;&#x540C;&#x5C31;&#x4F1A;&#x88AB;&#x7EA6;&#x675F;&#x53D8;&#x91CF;&#x66FF;&#x6362;&#xFF0C;&#x8BE5;&#x73AF;&#x5883;&#x4E0B;&#x62FF;&#x5230;&#x7684;&#x53D8;&#x91CF;&#x5C31;&#x662F;&#x5F53;&#x524D;&#x73AF;&#x5883;x&#xFF0C;&#x800C;&#x975E;&#x5168;&#x5C40;&#x7684;x&#x4E86;&#x3002; &#x5185;&#x90E8;&#x5B9A;&#x4E49;&#x548C;&#x5757;&#x7ED3;&#x6784;&#xFF1A; Scheme &#x652F;&#x6301;&#x5728;&#x8FC7;&#x7A0B;&#x5185;&#x5B9A;&#x4E49;&#x8FC7;&#x7A0B;&#xFF0C;&#x8FD9;&#x5176;&#x5B9E;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x4E5F;&#x662F;&#x4E00;&#x79CD;&#x9690;&#x853D;&#x7EC6;&#x8282;&#x7684;&#x624B;&#x6BB5;&#xFF0C;&#x901A;&#x8FC7;&#x5185;&#x90E8;&#x5B9A;&#x4E49;&#x51CF;&#x5C11;&#x5168;&#x5C40;&#x73AF;&#x5883;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x6765;&#x907F;&#x514D;&#x5E72;&#x6270;&#xFF0C;&#x53EF;&#x4EE5;&#x7C7B;&#x6BD4;&#x5B9A;&#x4E49;&#x7C7B;&#x7684;&#x79C1;&#x6709;&#x51FD;&#x6570;&#x3002; &#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x73AF;&#x5883;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7279;&#x522B;&#x7B80;&#x5355;&#x7684;&#x6A21;&#x578B;&#x53BB;&#x8003;&#x8651;: &#x5C42;&#x5C42;&#x76F8;&#x8FDE;&#xFF0C;&#x6BCF;&#x5C42;&#x90FD;&#x662F;&#x952E;&#x503C;&#x5BF9;&#xFF0C;&#x5F53;&#x89E3;&#x91CA;&#x5668;&#x9047;&#x5230;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4ECE;&#x6700;&#x5185;&#x5C42;&#x7684;&#x73AF;&#x5883;&#x53BB;&#x627E;&#xFF0C;&#x627E;&#x5230;&#x4E86;&#x5C31;&#x8FD4;&#x56DE;&#xFF0C;&#x6CA1;&#x627E;&#x5230;&#x5C31;&#x7EE7;&#x7EED;&#x5411;&#x4E0A;&#x5C42;&#x627E;&#xFF0C;&#x8FD9;&#x4E5F;&#x5C31;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x4F1A;&#x51FA;&#x73B0;&#x53D8;&#x91CF;&#x6355;&#x83B7;&#x7684;&#x60C5;&#x51B5;&#x51FA;&#x73B0;&#x3002; &#x5C0F;&#x7ED3;&#x9690;&#x853D;&#x7EC6;&#x8282;&#x7684;&#x9ED1;&#x7BB1;&#x64CD;&#x4F5C;&#x80FD;&#x591F;&#x4E3A;&#x7EC4;&#x7EC7;&#x4EE3;&#x7801;&#x5E26;&#x6765;&#x5F88;&#x591A;&#x4F18;&#x52BF;&#xFF0C;&#x4ECE;&#x4E2D;&#x80FD;&#x5F97;&#x51FA;&#x5F88;&#x591A;&#x542F;&#x793A;&#xFF1A; &#x63A7;&#x5236;&#x540D;&#x5B57;&#x7684;&#x4F5C;&#x7528;&#x8303;&#x56F4;&#xFF0C;&#x9632;&#x6B62;&#x4E0D;&#x540C;&#x73AF;&#x5883;&#x4E4B;&#x95F4;&#x7684;&#x540D;&#x5B57;&#x51B2;&#x7A81; &#x4FE1;&#x606F;&#x5C3D;&#x53EF;&#x80FD;&#x505A;&#x5230;&#x5C40;&#x90E8;&#x5316; &#x5757;&#x7ED3;&#x6784;&#x5BF9;&#x63A7;&#x5236;&#x7A0B;&#x5E8F;&#x7684;&#x590D;&#x6742;&#x6027;&#x5F88;&#x6709;&#x4EF7;&#x503C;","categories":[],"tags":[{"name":"SICP","slug":"SICP","permalink":"https://lfkdsk.github.io/tags/SICP/"}]},{"title":"学伴中 Tinker 简单配置","slug":"tinker-simple-use","date":"2017-02-12T17:05:27.000Z","updated":"2017-02-21T16:36:33.000Z","comments":true,"path":"2017/02/13/tinker-simple-use/","link":"","permalink":"https://lfkdsk.github.io/2017/02/13/tinker-simple-use/","excerpt":"","text":"&#x5B66;&#x4F34;&#x7684;&#x6700;&#x65B0;&#x7248;&#x4E2D;&#x4E3A;&#x4E86;&#x51CF;&#x5C11;&#x56E0;&#x4E3A;Bug&#x5BFC;&#x81F4;&#x7684;&#x5E94;&#x7528;&#x5D29;&#x6E83;&#xFF0C;&#x4E5F;&#x8DDF;&#x968F;&#x6F6E;&#x6D41;&#x4F7F;&#x7528;&#x4E86;Tinker&#x4F5C;&#x4E3A;&#x7A0B;&#x5E8F;&#x70ED;&#x4FEE;&#x590D;&#x7684;&#x5DE5;&#x5177;&#x5E93;&#x3002; &#x8FD9;&#x91CC;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x4F7F;&#x7528;Tinker&#x7B2C;&#x4E09;&#x65B9;&#x5E94;&#x7528;&#x5E73;&#x53F0;&#x7684;&#x7B80;&#x5355;&#x914D;&#x7F6E;&#xFF0C;&#x4EE5;&#x98E8;&#x540E;&#x4EBA;&#x3002; Project Gradle123456789buildscript { repositories { jcenter() } dependencies { // TinkerPatch &#x63D2;&#x4EF6; classpath &quot;com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:1.1.3&quot; }} Module Gradle12345dependencies { // &#x82E5;&#x4F7F;&#x7528;annotation&#x9700;&#x8981;&#x5355;&#x72EC;&#x5F15;&#x7528;,&#x5BF9;&#x4E8E;tinker&#x7684;&#x5176;&#x4ED6;&#x5E93;&#x90FD;&#x65E0;&#x9700;&#x518D;&#x5F15;&#x7528; provided(&quot;com.tencent.tinker:tinker-android-anno:1.7.7&quot;) compile(&quot;com.tinkerpatch.sdk:tinkerpatch-android-sdk:1.1.3&quot;)} Tinker Gradle123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107apply plugin: &apos;tinkerpatch-support&apos;/** * TODO: &#x8BF7;&#x6309;&#x81EA;&#x5DF1;&#x7684;&#x9700;&#x6C42;&#x4FEE;&#x6539;&#x4E3A;&#x9002;&#x5E94;&#x81EA;&#x5DF1;&#x5DE5;&#x7A0B;&#x7684;&#x53C2;&#x6570; */def bakPath = file(&quot;${buildDir}/bakApk/&quot;)// &#x5F53;&#x524D;&#x7248;&#x672C;&#x53F7; &#x548C; build.gradle &#x76F8;&#x540C;def version = &quot;3.0.4&quot;// &#x5177;&#x4F53;&#x7684;&#x53D1;&#x5E03;&#x65F6;&#x95F4;def baseInfo = &quot;app-&quot; + version + &quot;-0213-01-55-20&quot;// &#x7248;&#x672C;def variantName = &quot;release&quot;/** * SDK &#x4F4D;&#x7F6E; * http://tinkerpatch.com/Docs/SDK */tinkerpatchSupport { /** &#x53EF;&#x4EE5;&#x5728;debug&#x7684;&#x65F6;&#x5019;&#x5173;&#x95ED; tinkerPatch **/ tinkerEnable = true reflectApplication = true autoBackupApkPath = &quot;${bakPath}&quot; appKey = &quot;***&quot; appVersion = version def pathPrefix = &quot;${bakPath}/${baseInfo}/${variantName}&quot; def name = &quot;${project.name}-${variantName}&quot; baseApkFile = &quot;${pathPrefix}/${name}.apk&quot; baseProguardMappingFile = &quot;${pathPrefix}/${name}-mapping.txt&quot; baseResourceRFile = &quot;${pathPrefix}/${name}-R.txt&quot; /** &#x82E5;&#x6709;&#x7F16;&#x8BD1;&#x591A;flavors&#x9700;&#x6C42;,&#x53EF;&#x5728;flavors&#x4E2D;&#x8986;&#x76D6;&#x4EE5;&#x4E0B;&#x53C2;&#x6570; * &#x4F60;&#x4E5F;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x901A;&#x8FC7;tinkerPatchAllFlavorDebug/tinkerPatchAllFlavorRelease, &#x4E00;&#x6B21;&#x7F16;&#x8BD1;&#x6240;&#x6709;&#x7684;flavor&#x8865;&#x4E01;&#x5305; * &#x6CE8;&#x610F;&#x7684;&#x662F;:&#x9664;&#x975E;&#x4F60;&#x4E0D;&#x540C;&#x7684;flavor&#x4EE3;&#x7801;&#x662F;&#x4E0D;&#x4E00;&#x6837;&#x7684;,&#x4E0D;&#x7136;&#x5EFA;&#x8BAE;&#x91C7;&#x7528;zip comment&#x6216;&#x8005;&#x6587;&#x4EF6;&#x65B9;&#x5F0F;&#x751F;&#x6210;&#x6E20;&#x9053;&#x4FE1;&#x606F; **/// productFlavors {// flavor {// flavorName = &quot;flavor1&quot;// appVersion = &quot;${tinkerpatchSupport.appVersion}_${flavorName}&quot;//// pathPrefix = &quot;${bakPath}/${baseInfo}/${flavorName}${variantName}/&quot;// name = &quot;${project.name}-${flavorName}${variantName}&quot;//// baseApkFile = &quot;${pathPrefix}/${name}.apk&quot;// baseProguardMappingFile = &quot;${pathPrefix}/${name}-mapping.txt&quot;// baseResourceRFile = &quot;${pathPrefix}/${name}-R.txt&quot;// }//// flavor {// flavorName = &quot;flavor2&quot;// appVersion = &quot;${tinkerpatchSupport.appVersion}_${flavorName}&quot;//// pathPrefix = &quot;${bakPath}/${baseInfo}/${flavorName}${variantName}/&quot;// name = &quot;${project.name}-${flavorName}${variantName}&quot;//// baseApkFile = &quot;${pathPrefix}/${name}.apk&quot;// baseProguardMappingFile = &quot;${pathPrefix}/${name}-mapping.txt&quot;// baseResourceRFile = &quot;${pathPrefix}/${name}-R.txt&quot;// }// }}/** * &#x7528;&#x4E8E;&#x7528;&#x6237;&#x5728;&#x4EE3;&#x7801;&#x4E2D;&#x5224;&#x65AD;tinkerPatch&#x662F;&#x5426;&#x88AB;&#x4F7F;&#x80FD; */android { defaultConfig { buildConfigField &quot;boolean&quot;, &quot;TINKER_ENABLE&quot;, &quot;${tinkerpatchSupport.tinkerEnable}&quot; }}/** * &#x4E00;&#x822C;&#x6765;&#x8BF4;,&#x6211;&#x4EEC;&#x65E0;&#x9700;&#x5BF9;&#x4E0B;&#x9762;&#x7684;&#x53C2;&#x6570;&#x505A;&#x4EFB;&#x4F55;&#x7684;&#x4FEE;&#x6539; * &#x5BF9;&#x4E8E;&#x5404;&#x53C2;&#x6570;&#x7684;&#x8BE6;&#x7EC6;&#x4ECB;&#x7ECD;&#x8BF7;&#x53C2;&#x8003;: * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97 */tinkerPatch { ignoreWarning = false useSign = true dex { dexMode = &quot;jar&quot; pattern = [&quot;classes*.dex&quot;] loader = [] } lib { pattern = [&quot;lib/*/*.so&quot;] } res { pattern = [&quot;res/*&quot;, &quot;r/*&quot;, &quot;assets/*&quot;, &quot;resources.arsc&quot;, &quot;AndroidManifest.xml&quot;] ignoreChange = [] largeModSize = 100 } packageConfig { } sevenZip { zipArtifact = &quot;com.tencent.mm:SevenZip:1.1.10&quot;// path = &quot;/usr/local/bin/7za&quot; } buildConfig { keepDexApply = false }} &#x5728;Module Gradle&#x91CC;&#x9762;&#x5F15;&#x5165;: 1apply from: &apos;tinkerpatch.gradle&apos; Build &#x5728;&#x547D;&#x4EE4;&#x884C;&#x4E2D;&#x4F7F;&#x7528;&#xFF1A; 1$ gradle assembleRelease &#x6216;&#x8005;&#x662F;: &#x4E4B;&#x540E;&#x5728;moduleName/build/baKApk&#x4E2D;&#x5C31;&#x4F1A;&#x751F;&#x6210;&#x5BF9;&#x5E94;&#x7684;Release&#x7248;&#x7684;apk/map/R&#x6587;&#x4EF6;&#xFF0C;&#x7528;&#x6765;&#x505A;&#x5DEE;&#x5206;&#x6BD4;&#x8F83;&#x3002; &#x5DEE;&#x5206;&#x6BD4;&#x8F83;&#x7684;&#x65F6;&#x5019;&#xFF1A; &#x5728;tinkerpatch.gradle&#x5148;&#x586B;&#x5199;&#x8981;&#x6BD4;&#x8F83;&#x7684;&#x7248;&#x672C;&#x53F7;&#x548C;&#x65F6;&#x95F4;&#xFF0C;&#x62FC;&#x51FA;&#x5B8C;&#x6574;&#x8DEF;&#x5F84;&#x3002; &#x518D;&#x4F7F;&#x7528;&#xFF1A; 1$ gradle tinkerPatchRelease &#x4F1A;&#x751F;&#x6210;&#x4E00;&#x4EFD;&#x65B0;&#x7684;Release&#xFF0C;moduleName/build/outputs/tinkerpatch&#x2D9;&#x4E2D;&#x5C31;&#x4F1A;&#x751F;&#x6210;&#x4E24;&#x4EFD;&#x65B0;&#x7684;release&#x5E76;&#x4E14;&#x751F;&#x6210;&#x5DEE;&#x5206;&#x5305;&#xFF0C;&#x4E0A;&#x4F20;&#x5E73;&#x53F0;&#x5C31;&#x884C;&#x4E86;&#x3002; &#x5176;&#x4ED6;tinkerpatch&#x5E73;&#x53F0;&#x8FD8;&#x8981;&#x94B1;&#xFF0C;&#x5BF9;&#x4E8E;&#x6211;&#x8FD9;&#x79CD;&#x7528;&#x6237;&#x91CF;&#x6CA1;&#x6709;10w&#x7684;&#x4EBA;&#x5F53;&#x7136;&#x6CA1;&#x95EE;&#x9898;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x60F3;&#x81EA;&#x5DF1;&#x638C;&#x63A7;&#x4E5F;&#x6CA1;&#x6709;&#x95EE;&#x9898;&#xFF0C;&#x5DEE;&#x5206;&#x5305;&#x7684;&#x539F;&#x7406;&#x6587;&#x7AE0;&#x90FD;&#x6709;&#x4E86;&#xFF0C;&#x81EA;&#x5DF1;&#x5199;&#x4E00;&#x4E2A;&#x5E73;&#x53F0;&#x4E5F;&#x4E0D;&#x8FC7;&#x662F;&#x65F6;&#x95F4;&#x7684;&#x95EE;&#x9898;&#x4E86;&#x3002; &#x5F53;&#x7136;&#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x73B0;&#x6210;&#x7684;&#x4E1C;&#x897F;&#xFF1A; tinker&#x7B2C;&#x4E09;&#x5C01;&#x5E73;&#x53F0;","categories":[],"tags":[{"name":"tinker","slug":"tinker","permalink":"https://lfkdsk.github.io/tags/tinker/"}]},{"title":"在OJ中使用模版的小测试","slug":"a-template-test","date":"2017-01-24T16:48:05.000Z","updated":"2017-01-24T16:55:48.000Z","comments":true,"path":"2017/01/25/a-template-test/","link":"","permalink":"https://lfkdsk.github.io/2017/01/25/a-template-test/","excerpt":"","text":"&#x4E4B;&#x524D;&#x770B;&#x4E86;&#x4E00;&#x70B9;&#x300A;C++&#x6A21;&#x7248;&#x5143;&#x7F16;&#x7A0B;&#x300B;&#xFF0C;&#x4ECA;&#x5929;&#x7A81;&#x7136;&#x60F3;&#x8D77;&#x6765;&#xFF0C;&#x6253;&#x7B97;&#x8BD5;&#x4E00;&#x4E0B;&#x5143;&#x7F16;&#x7A0B;&#x6280;&#x5DE7;&#x80FD;&#x4E0D;&#x80FD;&#x5728;OJ&#x4E2D;&#x4F7F;&#x7528;&#x3002; &#x9009;&#x62E9;&#x4E86;&#x4E00;&#x9053;&#x7B80;&#x5355;&#x7684;&#x6709;&#x56FA;&#x5B9A;&#x8303;&#x56F4;&#x7684;&#x9898;&#xFF0C;&#x6BD4;&#x8F83;&#x4FBF;&#x4E8E;&#x7528;&#x5143;&#x7F16;&#x7A0B;&#x7B97;&#x51FA;&#x6240;&#x6709;&#x7684;&#x89E3;&#xFF1A; 123456789101112&#x9898;&#x76EE;&#x63CF;&#x8FF0; Description&#x6709;&#x4E00;&#x4E2A;&#x6570;n&#xFF0C;&#x6C42;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#x5B83;&#x7684;&#x6240;&#x6709;&#x8D28;&#x6570;&#x8F93;&#x5165;&#x63CF;&#x8FF0; Input Descriptionn&#x8F93;&#x51FA;&#x63CF;&#x8FF0; Output Description&#x4E00;&#x884C;&#xFF0C;&#x6BCF;&#x4E24;&#x4E2A;&#x8D28;&#x6570;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#x6837;&#x4F8B;&#x8F93;&#x5165; Sample Input5&#x6837;&#x4F8B;&#x8F93;&#x51FA; Sample Output2 3 5&#x6570;&#x636E;&#x8303;&#x56F4;&#x53CA;&#x63D0;&#x793A; Data Size &amp; Hint&#x6570;&#x636E;&#x5F88;&#x5C0F;(&#x8BA1;&#x7B97;&#x5BA2;&#x7684;&#x7B97;&#x7D20;&#x6570;&#x7684;&#x9898;&#x7684;&#x8303;&#x56F4;&#x662F;1000) &#x7531;&#x4E8E;&#x9012;&#x5F52;&#x6B21;&#x6570;&#x4E0D;&#x80FD;&#x8D85;&#x8FC7;256&#x6211;&#x5728;&#x4E2D;&#x95F4;&#x6309;&#x7167;200&#x4E3A;&#x4E00;&#x4E2A;&#x754C;&#x8FDB;&#x884C;&#x7279;&#x5316;&#x3002; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127/*&#x4F5C;&#x8005;:lfkdsk&#x9898;&#x76EE;:p2741 n&#x91CC;&#x7684;&#x8D28;&#x6570;*/#include &lt;iostream&gt;template&lt;int n, int m&gt;struct Test_N { const static int r = ((n % m != 0) * n);};template&lt;int n, int m&gt;struct Test_M { const static int r = (m * m &lt;= n ? (m + 1) : 0);};template&lt;int n, int m&gt;struct TEST { const static int r = TEST&lt;Test_N&lt;n, m&gt;::r, Test_M&lt;n, m&gt;::r&gt;::r;};template&lt;int m&gt;struct TEST&lt;0, m&gt; { const static int r = 0;};template&lt;int n&gt;struct TEST&lt;n, 0&gt; { const static int r = 1;};template&lt;int n&gt;struct ISPRIME { const static int r = TEST&lt;n, 2&gt;::r;};template&lt;&gt;struct ISPRIME&lt;1&gt; { const static int r = 0;};template&lt;&gt;struct ISPRIME&lt;2&gt; { const static int r = 1;};#define MAX_SIZE 1000int primeList[MAX_SIZE] = {0};template&lt;int maxNumber&gt;struct FINDPRIME { static inline int getPrime() { int next = ISPRIME&lt;maxNumber&gt;::r; primeList[maxNumber] = next; return FINDPRIME&lt;maxNumber - 1&gt;::getPrime(); }};template&lt;&gt;struct FINDPRIME&lt;800&gt; { static inline int getPrime() { return ISPRIME&lt;800&gt;::r; }};template&lt;&gt;struct FINDPRIME&lt;600&gt; { static inline int getPrime() { return ISPRIME&lt;600&gt;::r; }};template&lt;&gt;struct FINDPRIME&lt;400&gt; { static inline int getPrime() { return ISPRIME&lt;400&gt;::r; }};template&lt;&gt;struct FINDPRIME&lt;200&gt; { static inline int getPrime() { return ISPRIME&lt;200&gt;::r; }};template&lt;&gt;struct FINDPRIME&lt;2&gt; { static inline int getPrime() { primeList[2] = 1; return 1; }};template&lt;&gt;struct FINDPRIME&lt;0&gt; { static inline int getPrime() { primeList[0] = 0; return 0; }};int main() { FINDPRIME&lt;1000&gt;::getPrime(); FINDPRIME&lt;799&gt;::getPrime(); FINDPRIME&lt;599&gt;::getPrime(); FINDPRIME&lt;399&gt;::getPrime(); FINDPRIME&lt;199&gt;::getPrime(); int a; std::cin &gt;&gt; a; for (int i = 0; i &lt; a; ++i) { if (primeList[i] == 1) std::cout &lt;&lt; i &lt;&lt; &quot; &quot;; }// int a;// std::cin &gt;&gt; a;// if (primeList[a] == 1) {// std::cout &lt;&lt; &quot;YES&quot; &lt;&lt; std::endl;// } else {// std::cout &lt;&lt; &quot;NO&quot; &lt;&lt; std::endl;// }} &#x6700;&#x540E;&#x7684;&#x7ED3;&#x679C;&#x5927;&#x6982;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF0C;&#x6D4B;&#x8BD5;&#x65F6;&#x95F4;&#x4ECE;0ms-5ms&#x4E0D;&#x7B49;&#xFF0C;&#x5F88;&#x96BE;&#x8BF4;&#x7F16;&#x8BD1;&#x65F6;&#x662F;&#x4E0D;&#x662F;&#x771F;&#x7684;&#x5FEB;&#x4E86;&#x3002;","categories":[],"tags":[{"name":"OJ","slug":"OJ","permalink":"https://lfkdsk.github.io/tags/OJ/"}]},{"title":"AppCode 管联 CocoaPods 的Bug","slug":"fix-bug-appcode","date":"2017-01-18T07:27:51.000Z","updated":"2017-01-18T09:13:09.000Z","comments":true,"path":"2017/01/18/fix-bug-appcode/","link":"","permalink":"https://lfkdsk.github.io/2017/01/18/fix-bug-appcode/","excerpt":"","text":"AppCode &#x4E2D;&#x6DFB;&#x52A0;&#x4E86;&#x76F4;&#x63A5;&#x5BF9;CocoaPods&#x7684;&#x5173;&#x8054;&#xFF1A; &#x4F46;&#x662F;&#x76F4;&#x63A5;&#x5173;&#x8054; Ruby SDK &#x548C; CocoaPods &#x7684;&#x65F6;&#x5019;&#x4F1A;&#x53D1;&#x73B0;&#x63D0;&#x793A;&#x9519;&#x8BEF;&#xFF1A; 1Usage of the constant `Pod::SourcesManager` is deprecated, use `Pod::Config.instance.sources_manager` instead (called from /Applications/AppCode.app/Contents/bin/cocoapods_common.rb:4:in `init_master_repo&apos;) Usage of the constant `Pod::SourcesManager` is deprecated, use `Pod::Config.instance.sources_manager` instead (called from cocoapods_list.rb:9:in `&lt;main&gt;&apos;) &#x7167;&#x7740;&#x9519;&#x8BEF;&#x63D0;&#x793A;&#x4FEE;&#x6539; AppCode &#x91CC;&#x9762; cocoapods_common.rb &#x548C; cocoapods_list,rb &#x91CC;&#x7684;Pod::SourcesManager &#x90FD;&#x5207;&#x6362;&#x4E3A; Pod::Config.instance.sources_manager &#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; AppCode &#x91CC;&#x9762;&#x7684; Bug &#x5176;&#x5B9E;&#x8FD8;&#x771F;&#x7684;&#x4E0D;&#x5C11;&#xFF0C;&#x81EA;&#x52A8;&#x586B;&#x5145;&#x4EE3;&#x7801;&#x7684;&#x529F;&#x80FD;&#x4E00;&#x76F4;&#x6CA1;&#x4FEE;&#x597D;&#xFF0C;&#x8FD9;&#x4E2A;&#x5E94;&#x8BE5;&#x7B97;&#x662F;CocoaPods&#x7684;&#x9505;&#xFF0C;&#x5F00;&#x6E90;&#x7684;&#x4E1C;&#x897F;&#x81EA;&#x5DF1;&#x6CA1;&#x4E8B;&#x778E;&#x6539;&#x3002;","categories":[],"tags":[{"name":"FixBug","slug":"FixBug","permalink":"https://lfkdsk.github.io/tags/FixBug/"}]},{"title":"读《村上村树·猫》","slug":"read-cat","date":"2017-01-14T10:07:47.000Z","updated":"2017-01-18T09:00:23.000Z","comments":true,"path":"2017/01/14/read-cat/","link":"","permalink":"https://lfkdsk.github.io/2017/01/14/read-cat/","excerpt":"","text":"","categories":[],"tags":[{"name":"阅读","slug":"阅读","permalink":"https://lfkdsk.github.io/tags/阅读/"}]},{"title":"Learn iOS With Swift 1","slug":"learn-ios-with-swift-1","date":"2017-01-10T06:14:48.000Z","updated":"2017-02-12T14:51:11.000Z","comments":true,"path":"2017/01/10/learn-ios-with-swift-1/","link":"","permalink":"https://lfkdsk.github.io/2017/01/10/learn-ios-with-swift-1/","excerpt":"","text":"The Basics &#x5E38;&#x91CF; let &#xFF0F; &#x53D8;&#x91CF; var &#x6CE8;&#x91CA;&#xFF1A; &#x5355;&#x884C; // &#x591A;&#x884C; / / &#x4E14;&#x53EF;&#x4EE5;&#x5D4C;&#x5957; &#x5206;&#x53F7;&#x53EF;&#x7528;&#x5728;&#x591A;&#x884C;&#x8BED;&#x53E5;&#x5199;&#x5728;&#x4E00;&#x884C;&#x7684;&#x60C5;&#x51B5;&#x4E0B; &#x6574;&#x578B;&#xFF1A;uint8&#xFF0C;16&#xFF0C;32&#xFF0C;int&#x7167;&#x65E7; &#x6D6E;&#x70B9;&#x578B;&#xFF1A;Float , Double &#x5206;&#x522B;&#x662F;6&#x4F4D;&#x548C;15&#x4F4D; &#x5B57;&#x9762;&#x91CF;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF1A;&#x6D6E;&#x70B9;&#x6570;&#x4F18;&#x5148;&#x63A8;&#x65AD;Double &#x6574;&#x6570;&#x5B57;&#x9762;&#x91CF;&#x53EF;&#x4EE5;&#x88AB;&#x5199;&#x4F5C;&#xFF1A; &#x4E00;&#x4E2A;&#x5341;&#x8FDB;&#x5236;&#x6570;&#xFF0C;&#x6CA1;&#x6709;&#x524D;&#x7F00;&#x4E00;&#x4E2A;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#xFF0C;&#x524D;&#x7F00;&#x662F;0b&#x4E00;&#x4E2A;&#x516B;&#x8FDB;&#x5236;&#x6570;&#xFF0C;&#x524D;&#x7F00;&#x662F;0o&#x4E00;&#x4E2A;&#x5341;&#x516D;&#x8FDB;&#x5236;&#x6570;&#xFF0C;&#x524D;&#x7F00;&#x662F;0x typealias&#x7C7B;&#x578B;&#x522B;&#x540D; &#x4F7F;&#x7528;(...,...)&#x5305;&#x88C5;&#x5143;&#x7EC4;&#xFF0C;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x5206;&#x89E3;&#xFF0C;&#x4F5C;&#x4E3A;&#x8FD4;&#x56DE;&#x503C;&#x3002; &#x53EF;&#x9009;&#x7C7B;&#x578B;&#xFF1A; &#x5F88;&#x591A;&#x7684;&#x73B0;&#x4EE3;&#x8BED;&#x8A00;&#x90FD;&#x4F7F;&#x7528;&#x4E86;&#x53EF;&#x9009;&#x7C7B;&#x578B;&#x7684;&#x8BBE;&#x8BA1;&#xFF0C;&#x53EF;&#x9009;&#x7C7B;&#x578B;&#x4E2D;&#x7684;nil&#x5E76;&#x975E;&#x4F20;&#x7EDF;&#x610F;&#x4E49;&#x7684;&#x7A7A;&#x6307;&#x9488;&#xFF0C;&#x800C;&#x662F;&#x6307;&#x8FD9;&#x4E2A;&#x5B57;&#x6BB5;&#x53EF;&#x80FD;&#x4E3A;&#x7A7A;&#xFF0C;&#x4E3A;&#x7A7A;&#x5C31;&#x662F;nil&#x3002; !&#x8868;&#x793A;&#x53EF;&#x4EE5;&#x5F3A;&#x5236;&#x89E3;&#x6790;&#xFF0C;&#x6B64;&#x65F6;&#x9700;&#x8981;&#x901A;&#x8FC7;&#x975E;&#x7A7A;&#x5224;&#x5B9A;&#x3002; &#x53EF;&#x9009;&#x7ED1;&#x5B9A;&#xFF1A; 12345678if let firstNumber = Int(&quot;4&quot;) { if let secondNumber = Int(&quot;42&quot;) { if firstNumber &lt; secondNumber &amp;&amp; secondNumber &lt; 100 { print(&quot;\\(firstNumber) &lt; \\(secondNumber) &lt; 100&quot;) } }}// Prints &quot;4 &lt; 42 &lt; 100&#x201D; &#x9690;&#x5F0F;&#x89E3;&#x6790;&#x7684;&#x53EF;&#x9009;&#x7C7B;&#x578B;&#xFF1A; &#x53EF;&#x901A;&#x8FC7;&#x5982;var lfkdsk:String!&#x6765;&#x58F0;&#x660E;&#xFF0C;&#x5177;&#x6709;&#x53EF;&#x9009;&#x7C7B;&#x578B;&#x7684;&#x7279;&#x70B9;&#xFF0C;&#x4F46;&#x5728;&#x7B2C;&#x4E00;&#x6B21;&#x8D4B;&#x503C;&#x4E4B;&#x540E;&#xFF0C;&#x53EF;&#x6B63;&#x5E38;&#x89E3;&#x6790; &#x9519;&#x8BEF;&#x5904;&#x7406;&#xFF1A; &#x4F7F;&#x7528;throws&#x5728;func&#x5C3E;&#x7F00;&#x4E2D;&#x8868;&#x793A;&#x53EF;&#x4EE5;&#x629B;&#x51FA;&#x9519;&#x8BEF;&#x3002; 123456789101112131415func lfkdsk() throws {}do { try lfkdsk()} catch { }do { try makeASandwich() eatASandwich()} catch SandwichError.outOfCleanDishes { washDishes()} catch SandwichError.missingIngredients(let ingredients) { buyGroceries(ingredients)} &#x65AD;&#x8A00;&#x5F0F;&#xFF1A;&#x4F7F;&#x7528;assert&#x51FD;&#x6570; Basic Operators &#x6BD4;&#x8F83;&#x8FD0;&#x7B97;&#x7B26;:=== !== &#x6052;&#x7B49;&#x548C;&#x4E0D;&#x6052;&#x7B49;&#x7528;&#x6765;&#x5224;&#x65AD;&#x662F;&#x5426;&#x56E0;&#x7528;&#x540C;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x3002; &#x5143;&#x7EC4;&#x6BD4;&#x8F83;&#xFF0C;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#xFF0C;&#x9010;&#x503C;&#x6BD4;&#x8F83;&#x3002; &#x533A;&#x95F4;&#x8FD0;&#x7B97;&#x7B26;&#xFF1A; 1&#x2026;5 1..&lt;5 Strings &amp; Characters &#x8FED;&#x4EE3;&#x5B57;&#x7B26;&#x4E32;&#xFF1A; 123for character in &quot;Dog!&#x1F436;&quot;.characters { print(character)} String Interporation: 12let multiplier = 3let message = &quot;\\(multiplier) times 2.5 is \\(Double(multiplier)&quot; insert &amp; delete: 123let range = welcome.index(welcome.endIndex, offsetBy: -6)..&lt;welcome.endIndexwelcome.removeSubrange(range)// welcome &#x73B0;&#x5728;&#x7B49;&#x4E8E; hello &#x76F8;&#x7B49;&#x5224;&#x65AD;&#xFF1A; &#x524D;&#x7F00;&#xFF0F;&#x540E;&#x7F00; &#x96C6;&#x5408;&#x7C7B;&#x578B;&#xFF1A;Arrays | Sets | Dictionaries 123456// &#x521B;&#x5EFA;&#x7A7A;&#x6570;&#x7EC4;var lfkdsk = [] var lfkdsk = Array(repeating: 0.0, count: 3)// &#x4E24;&#x6570;&#x7EC4;&#x76F8;&#x52A0;&#x83B7;&#x5F97;&#x65B0;&#x6570;&#x7EC4;var xxxx = lfkdsk + fffff // &#x90FD;&#x662F;&#x6570;&#x7EC4;xxxx.append(...) // &#x7B49;&#x4EF7;&#x4E8E; += Set &#x9700;&#x8981;&#x63D0;&#x4F9B;Hashable&#x548C;Equalable&#x7684;&#x534F;&#x8BAE;&#x652F;&#x6301;&#x3002; 12var letters = Set&lt;Character&gt;()print(&quot;letters is of type Set&lt;Character&gt; with \\(letters.count) items.&quot;) &#x53EF;&#x4EE5;&#x901A;&#x8FC7;sorted&#x6765;&#x5B9E;&#x73B0;&#x6392;&#x5E8F;&#xFF1A; 123for genre in favorite.sorted() { print(&quot;(genre)&quot;)} &#x96C6;&#x5408;&#x7684;&#x57FA;&#x672C;&#x64CD;&#x4F5C;&#xFF1A; 1234intersection &#x4EA4;&#x96C6;symmetricDifference &#x4EA4;&#x96C6;&#x7684;&#x8865;&#x96C6;union &#x5E76;&#x96C6;subtracting a &#x76F8;&#x5BF9;&#x4E8E; ab&#x4EA4;&#x96C6; &#x7684;&#x5E03;&#x5C40; &#x96C6;&#x5408;&#x7684;&#x76F8;&#x5173;&#x64CD;&#x4F5C;&#xFF1A; 12345&#x4F7F;&#x7528;&#x201C;&#x662F;&#x5426;&#x76F8;&#x7B49;&#x201D;&#x8FD0;&#x7B97;&#x7B26;(==)&#x6765;&#x5224;&#x65AD;&#x4E24;&#x4E2A;&#x96C6;&#x5408;&#x662F;&#x5426;&#x5305;&#x542B;&#x5168;&#x90E8;&#x76F8;&#x540C;&#x7684;&#x503C;&#x3002;&#x4F7F;&#x7528;isSubset(of:)&#x65B9;&#x6CD5;&#x6765;&#x5224;&#x65AD;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x4E2D;&#x7684;&#x503C;&#x662F;&#x5426;&#x4E5F;&#x88AB;&#x5305;&#x542B;&#x5728;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x4E2D;&#x3002;&#x4F7F;&#x7528;isSuperset(of:)&#x65B9;&#x6CD5;&#x6765;&#x5224;&#x65AD;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x4E2D;&#x5305;&#x542B;&#x53E6;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x4E2D;&#x6240;&#x6709;&#x7684;&#x503C;&#x3002;&#x4F7F;&#x7528;isStrictSubset(of:)&#x6216;&#x8005;isStrictSuperset(of:)&#x65B9;&#x6CD5;&#x6765;&#x5224;&#x65AD;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x662F;&#x5426;&#x662F;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x7684;&#x5B50;&#x96C6;&#x5408;&#x6216;&#x8005;&#x7236;&#x96C6;&#x5408;&#x5E76;&#x4E14;&#x4E24;&#x4E2A;&#x96C6;&#x5408;&#x5E76;&#x4E0D;&#x76F8;&#x7B49;&#x3002;&#x4F7F;&#x7528;isDisjoint(with:)&#x65B9;&#x6CD5;&#x6765;&#x5224;&#x65AD;&#x4E24;&#x4E2A;&#x96C6;&#x5408;&#x662F;&#x5426;&#x4E0D;&#x542B;&#x6709;&#x76F8;&#x540C;&#x7684;&#x503C;(&#x662F;&#x5426;&#x6CA1;&#x6709;&#x4EA4;&#x96C6;)&#x3002; &#x5B57;&#x5178;&#xFF08;KV&#xFF09;&#xFF1A; 123456// &#x7A7A;&#x7684; [int : String] &#x5B57;&#x5178;var namesOfIntegers = Int : String if let oldValue = airports.updateValue(&quot;Dublin Airport&quot;, forKey: &quot;DUB&quot;) { print(&quot;The old value for DUB was (oldValue).&quot;)}// &#x8F93;&#x51FA; &quot;The old value for DUB was Dublin.&#x201D; &#x5B57;&#x5178;&#x7684;&#x904D;&#x5386; &#x53EF;&#x4EE5;&#x5206;&#x522B;&#x5BF9;&#x952E;&#x503C;&#x8FDB;&#x884C;&#x904D;&#x5386;&#xFF1A; 123for airportCode in airports.values { print(&quot;Airport code: (airportCode)&quot;)} Control Flow123repeat { steatements} while condition swift &#x53BB;&#x9664;&#x4E86;&#x9690;&#x5F0F;&#x8D2F;&#x7A7F;&#xFF1A; 123456789101112let integerToDescribe = 5var description = &quot;The number \\(integerToDescribe) is&quot;switch integerToDescribe {case 2, 3, 5, 7, 11, 13, 17, 19: description += &quot; a prime number, and also&quot; fallthrough // &#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7C7B;&#x4F3C;&#x8FD9;&#x6837;&#x7684;&#x8BED;&#x53E5;&#x8FDB;&#x884C;&#x663E;&#x793A;&#x8D2F;&#x7A7F;default: description += &quot; an integer.&quot;}print(description)// &#x8F93;&#x51FA; &quot;The number 5 is a prime number, and also an integer.&#x201D; switch&#x7684;&#x5339;&#x914D;&#x5BF9;&#x8C61;&#x8FD8;&#x5305;&#x62EC;&#x5143;&#x7EC4;&#xFF1A; 12345678910let anotherPoint = (2, 0)switch anotherPoint {case (let x, 0): // &#x503C;&#x7ED1;&#x5B9A; print(&quot;on the x-axis with an x value of \\(x)&quot;)case (0, let y): print(&quot;on the y-axis with a y value of \\(y)&quot;)case let (x, y): print(&quot;somewhere else at (\\(x), \\(y))&quot;)}// &#x8F93;&#x51FA; &quot;on the x-axis with an x value of 2&quot; case &#x7684;&#x5206;&#x652F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;where&#x5B50;&#x53E5;&#x8FDB;&#x884C;&#x989D;&#x5916;&#x7684;&#x6761;&#x4EF6;&#x5224;&#x65AD;&#x3002; &#x901A;&#x8FC7;&#x5BF9;&#x5FAA;&#x73AF;&#x6253;&#x4E0A;&#x6807;&#x7B7E;&#xFF0C;continue&#x548C;break&#x7684;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x5BF9;&#x5E94;&#x7684;&#x5FAA;&#x73AF;&#x8DF3;&#x51FA;&#x548C;&#x7EE7;&#x7EED;&#x3002; 1234567891011121314151617gameLoop: while square != finalSquare { diceRoll += 1 if diceRoll == 7 { diceRoll = 1 } switch square + diceRoll { case finalSquare: // diceRoll will move us to the final square, so the game is over break gameLoop case let newSquare where newSquare &gt; finalSquare: // diceRoll will move us beyond the final square, so roll again continue gameLoop default: // this is a valid move, so find out its effect square += diceRoll square += board[square] }}print(&quot;Game over!&quot;) guard &#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x5E03;&#x5C14;&#x503C;&#xFF0C;&#x5FC5;&#x987B;&#x5305;&#x542B;else&#x7ED3;&#x6784;&#xFF0C;else&#x5206;&#x652F;&#x5FC5;&#x987B;&#x8F6C;&#x79FB;&#x63A7;&#x5236;&#x4EE5;&#x9000;&#x51FA;guard&#x51FA;&#x73B0;&#x7684;&#x4EE3;&#x7801;&#x6BB5;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;return,break,continue,throw. Function&#x652F;&#x6301;&#x591A;&#x8FD4;&#x56DE;&#x503C; 1func minMax(array: [Int]) -&gt; (min: Int, max: Int) {} &#x53C2;&#x6570;&#x6807;&#x7B7E;&#x548C;&#x53C2;&#x6570;&#x540D;&#x53EF;&#x4EE5;&#x4E0D;&#x540C;: 1234func greet(person: String, from hometown: String) -&gt; String { return &quot;Hello \\(person)! Glad you could visit from \\(hometown).&quot;}print(greet(person: &quot;Bill&quot;, from: &quot;Cupertino&quot;)) &#x53EF;&#x53D8;&#x53C2;&#x6570;... 123456789101112func arithmeticMean(_ numbers: Double...) -&gt; Double { var total: Double = 0 for number in numbers { total += number } return total / Double(numbers.count)}arithmeticMean(1, 2, 3, 4, 5)// returns 3.0, which is the arithmetic mean of these five numbersarithmeticMean(3, 8.25, 18.75)// returns 10.0, which is the arithmetic mean of these three numbers// &#x6CE8;&#x610F; &#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x6700;&#x591A;&#x53EA;&#x80FD;&#x62E5;&#x6709;&#x4E00;&#x4E2A;&#x53EF;&#x53D8;&#x53C2;&#x6570;&#x3002; inout &#x53C2;&#x6570;&#xFF0C;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x4F20;&#x5F15;&#x7528;&#xFF0C;&#x4E0D;&#x80FD;&#x4F7F;&#x7528;&#x5B57;&#x9762;&#x91CF;&#x548C;&#x5E38;&#x91CF;&#x3002; &#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x5F53;&#x6210;&#x53C2;&#x6570;&#x6765;&#x7528;&#xFF1A; 12345func printMathResult(_ mathFunction: (Int, Int) -&gt; Int, _ a: Int, _ b: Int) { print(&quot;Result: \\(mathFunction(a, b))&quot;)}printMathResult(addTwoInts, 3, 5)// &#x6253;&#x5370; &quot;Result: 8&quot; &#x5F53;&#x7136;&#x4E5F;&#x53EF;&#x4EE5;&#x5F53;&#x6210;&#x8FD4;&#x56DE;&#x503C;&#x6765;&#x7528;: 123456789func stepForward(_ input: Int) -&gt; Int { return input + 1}func stepBackward(_ input: Int) -&gt; Int { return input - 1}func chooseStepFunction(backward: Bool) -&gt; (Int) -&gt; Int { return backward ? stepBackward : stepForward} &#x5D4C;&#x5957;&#x51FD;&#x6570;&#xFF1A; 12345func chooseStepFunction(backward: Bool) -&gt; (Int) -&gt; Int { func stepForward(input: Int) -&gt; Int { return input + 1 } func stepBackward(input: Int) -&gt; Int { return input - 1 } return backward ? stepBackward : stepForward} Closures123{ (params) -&gt; returnType in statements} example: 123reversedNames = names.sorted(by: { (s1: String, s2: String) -&gt; Bool in return s1 &gt; s2}) &#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF1A; 12reversedNames = names.sorted(by: { s1, s2 in return s1 &gt; s2 } )// &#x4E2A;&#x4EBA;&#x503E;&#x5411;&#x4E8E;&#x63D0;&#x4F9B;&#x66F4;&#x5168;&#x7684;&#x7C7B;&#x578B;&#x4FE1;&#x606F; &#x9690;&#x5F0F;&#x8FD4;&#x56DE;&#xFF1A; 1reversedNames = names.sorted(by: { s1, s2 in s1 &gt; s2 } ) &#x53C2;&#x6570;&#x540D;&#x79F0;&#x7F29;&#x5199;(&#x8FD9;&#x73A9;&#x610F;&#x548C;yacc&#x597D;&#x50CF;&#x554A;) &#xFF1A; 1reversedNames = names.sorted(by: { $0 &gt; $1 } ) &#x901A;&#x8FC7;&#x8FD0;&#x7B97;&#x7B26;&#x65B9;&#x6CD5;&#xFF1A; 1reversedNames = names.sorted(by: &gt; ) &#x5C3E;&#x968F;&#x95ED;&#x5305;&#xFF1A; 12345func takeAColsure(closure: () -&gt; Void) { // &#x51FD;&#x6570;&#x4F53;&#x90E8;&#x5206;}takeAColsure(closure:{ ... })takeAColsure(){ ... } // &#x8FD9;&#x5C31;&#x662F;&#x5C3E;&#x968F;&#x95ED;&#x5305; 12345678910let strings = numbers.map { (number) -&gt; String in var number = number var output = &quot;&quot; repeat { output = digitNames[number % 10]! + output number /= 10 } while number &gt; 0 return output} &#x95ED;&#x5305;&#x7684;&#x6355;&#x83B7;&#x53C2;&#x6570;&#xFF0C;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x4F5C;&#x7528;&#x4E8E;&#x7684;&#x95EE;&#x9898;&#x3002; &#x95ED;&#x5305;&#x662F;&#x5F15;&#x7528;&#x7C7B;&#x578B;&#x3002; &#x95ED;&#x5305;&#x9003;&#x9038;&#xFF0C;&#x8BA9;&#x95ED;&#x5305;&#x8131;&#x79BB;&#x51FD;&#x6570;&#x4F5C;&#x7528;&#x57DF;&#xFF0C;&#x51FA;&#x4E86;&#x4FDD;&#x5B58;&#x5728;&#x5168;&#x5C40;&#x5BB9;&#x5668;&#x91CC;&#x9762;&#xFF0C;&#x8FD8;&#x8981;&#x7528;@escaping&#x5BF9;&#x53C2;&#x6570;&#x505A;&#x6807;&#x8BB0;&#x3002; &#x81EA;&#x52A8;&#x95ED;&#x5305;&#xFF0C;&#x5EF6;&#x8FDF;&#x6C42;&#x503C;&#xFF1A; 1234567891011var customersInLine = [&quot;Chris&quot;, &quot;Alex&quot;, &quot;Ewa&quot;, &quot;Barry&quot;, &quot;Daniella&quot;]print(customersInLine.count)// &#x6253;&#x5370;&#x51FA; &quot;5&quot;&#xA0;let customerProvider = { customersInLine.remove(at: 0) }print(customersInLine.count)// &#x6253;&#x5370;&#x51FA; &quot;5&quot;&#xA0;print(&quot;Now serving \\(customerProvider())!&quot;)// Prints &quot;Now serving Chris!&quot;print(customersInLine.count) 12func serve(customer:@autoclosure()-&gt;String){}// &#x63A5;&#x53D7;&#x4E00;&#x6BB5;&#x88AB;&#x6807;&#x8BB0;&#x4E3A;&#x81EA;&#x52A8;&#x95ED;&#x5305;&#x7684;&#x5B57;&#x7B26;&#x4E32; Enumerations","categories":[],"tags":[{"name":"iOS-Swift","slug":"iOS-Swift","permalink":"https://lfkdsk.github.io/tags/iOS-Swift/"}]},{"title":"源码阅读系列：EventBus","slug":"read-eventbus-source-code","date":"2016-12-22T08:16:47.000Z","updated":"2016-12-23T14:13:18.000Z","comments":true,"path":"2016/12/22/read-eventbus-source-code/","link":"","permalink":"https://lfkdsk.github.io/2016/12/22/read-eventbus-source-code/","excerpt":"","text":"EventBus &#x662F;&#x4EBA;&#x4EEC;&#x5728;&#x65E5;&#x5E38;&#x5F00;&#x53D1;&#x4E2D;&#x7ECF;&#x5E38;&#x4F1A;&#x7528;&#x5230;&#x7684;&#x5F00;&#x6E90;&#x5E93;&#xFF0C;&#x5373;&#x4F7F;&#x662F;&#x4E0D;&#x76F4;&#x63A5;&#x7528;&#x7684;&#x4EBA;&#xFF0C;&#x4E5F;&#x591A;&#x5C11;&#x501F;&#x9274;&#x8FC7;&#x4E8B;&#x4EF6;&#x603B;&#x7EBF;&#x7684;&#x7528;&#x6CD5;&#x3002;&#x800C;&#x4E14;EventBus&#x7684;&#x4EE3;&#x7801;&#x5176;&#x5B9E;&#x662F;&#x975E;&#x5E38;&#x7B80;&#x5355;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x8BD5;&#x7740;&#x9605;&#x8BFB;&#x4E00;&#x4E0B;&#x3002; &#x6E90;&#x7801;&#x9605;&#x8BFB;&#x7CFB;&#x5217;&#x4E0D;&#x91C7;&#x7528;&#x5BF9;&#x529F;&#x80FD;&#x8FDB;&#x884C;&#x5F52;&#x7C7B;&#x7684;&#x65B9;&#x6CD5;&#x8FDB;&#x884C;&#x9605;&#x8BFB;&#xFF0C;&#x800C;&#x662F;&#x91C7;&#x7528;&#x4E00;&#x4E2A;&#x521A;&#x5F00;&#x59CB;&#x9605;&#x8BFB;&#x6E90;&#x7801;&#x7684;&#x89C6;&#x89D2;&#xFF0C;&#x4ECE;&#x6211;&#x4EEC;&#x5E73;&#x65F6;&#x7684;API&#x8C03;&#x7528;&#xFF0C;&#x4E00;&#x6B65;&#x6B65;&#x7684;&#x53BB;&#x7406;&#x89E3;&#x8BBE;&#x8BA1;&#x610F;&#x56FE;&#x548C;&#x5B9E;&#x73B0;&#x539F;&#x7406;&#x3002; &#x4ECE;&#x8FD9;&#x91CC;&#x5F00;&#x59CB;&#x4ECE;&#x8FD9;&#x91CC;&#x5F00;&#x59CB;&#x5427;&#xFF0C;&#x6211;&#x4EEC;&#x6700;&#x5E38;&#x7528;&#x7684;&#x5730;&#x65B9;&#x5C31;&#x662F;&#x7ED9;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x6DFB;&#x52A0;&#x4E0A;&#x6CE8;&#x89E3;&#xFF0C;&#x6211;&#x4EEC;&#x5148;&#x629B;&#x5F00;apt&#x751F;&#x6210;&#x7684;table&#xFF0C;&#x53EA;&#x770B;&#x8FD9;&#x4E2A;&#x8FD0;&#x884C;&#x65F6;&#x7248;&#x672C;&#x7684;&#x8BA2;&#x9605;&#x8BBE;&#x5B9A;&#x3002; 12345678910111213141516171819// eventbus/Subscribe@Documented@Retention(RetentionPolicy.RUNTIME)@Target({ElementType.METHOD})public @interface Subscribe { ThreadMode threadMode() default ThreadMode.POSTING; /** * If true, delivers the most recent sticky event (posted with * {@link EventBus#postSticky(Object)}) to this subscriber (if event available). */ boolean sticky() default false; /** Subscriber priority to influence the order of event delivery. * Within the same delivery thread ({@link ThreadMode}), higher priority subscribers will receive events before * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of * delivery among subscribers with different {@link ThreadMode}s! */ int priority() default 0;} &#x8FD9;&#x4E2A;&#x8BBE;&#x5B9A;&#x8FD8;&#x662F;&#x975E;&#x5E38;&#x7B80;&#x5355;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x90FD;&#x662F;&#x6211;&#x4EEC;&#x719F;&#x6089;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x7EBF;&#x7A0B;&#x7C7B;&#x578B;&#xFF08;&#x9ED8;&#x8BA4;&#x7684;&#x662F;&#x629B;&#x51FA;&#x7EBF;&#x7A0B;&#xFF09;&#xFF0C;&#x662F;&#x5426;&#x662F;&#x7C98;&#x6027;&#x4E8B;&#x4EF6;&#xFF0C;&#x65F6;&#x95F4;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x3002;&#x7ECF;&#x8FC7;&#x8FD9;&#x4E2A;&#x7C7B;&#x7684;&#x51FA;&#x73B0;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x5728;&#x7C7B;&#x91CC;&#x9762;&#x5199;&#x6211;&#x4EEC;&#x7ECF;&#x5E38;&#x5199;&#x7684;&#x67D0;&#x4E2A;&#x51FD;&#x6570;&#x662F;&#x8BA2;&#x9605;&#x51FD;&#x6570;&#x4E86;&#x3002; 12@Subscribe (...)public void getMessage(Event event) { ... } &#x4E0B;&#x9762;&#x7684;&#x95EE;&#x9898;&#x662F;&#x6211;&#x4EEC;&#x6539;&#x600E;&#x4E48;&#x8BA9;EventBus&#x627E;&#x5230;&#x8FD9;&#x4E9B;&#x65B9;&#x6CD5;&#x5462;&#xFF1F;&#x901A;&#x8FC7;apt&#x7684;&#x7248;&#x672C;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x8FD9;&#x91CC;&#x9762;&#x80AF;&#x5B9A;&#x6709;&#x4E00;&#x4E2A;map&#x6216;&#x8005;&#x662F;table&#x7684;&#x4E1C;&#x897F;&#x8BB0;&#x5F55;&#x4E86;Object&#x548C;Method&#x4E4B;&#x95F4;&#x7684;&#x8BA2;&#x9605;&#x5173;&#x7CFB;&#xFF0C;&#x800C;&#x4E14;&#x8FD8;&#x662F;&#x4E00;&#x5BF9;&#x591A;&#x7684;&#x3002;&#x8FD9;&#x4E2A;&#x5730;&#x65B9;&#x5C31;&#x662F;&#x4ECE;&#x6BCF;&#x4E2A;&#x6211;&#x4EEC;&#x8FDB;&#x884C;register&#x7684;&#x5730;&#x65B9;&#x8FDB;&#x884C;&#x7684;&#x3002; register &amp; unregister123456789101112131415161718// eventbus/EventBus /** * Registers the given subscriber to receive events. Subscribers must call {@link #unregister(Object)} once they * are no longer interested in receiving events. * &lt;p/&gt; * Subscribers have event handling methods that must be annotated by {@link Subscribe}. * The {@link Subscribe} annotation also allows configuration like {@link * ThreadMode} and priority. */ public void register(Object subscriber) { Class&lt;?&gt; subscriberClass = subscriber.getClass(); List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass); synchronized (this) { for (SubscriberMethod subscriberMethod : subscriberMethods) { subscribe(subscriber, subscriberMethod); } } } &#x6211;&#x4EEC;&#x5728;Activity&#xFF0F;Fragment&#x4E2D;&#x90FD;&#x6709;&#x53EF;&#x80FD;&#x4F1A;&#x8C03;&#x7528;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x5982;&#x679C;&#x662F;Fragment&#x91CC;&#x9762;&#x6211;&#x4EEC;&#x8FD8;&#x4F1A;&#x5728;onDestoryView()&#x4E2D;&#x8FDB;&#x884C;unregister(...)&#x3002;&#x5728;&#x8FD9;&#x6BB5;&#x51FD;&#x6570;&#x91CC;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x4F7F;&#x7528;&#x53CD;&#x5C04;&#x4ECE;&#x8FD9;&#x4E2A;Class&#x4E2D;&#x627E;&#x5230;&#x4E86;&#x6240;&#x6709;&#x7684;&#x8BA2;&#x9605;&#x8005;&#x51FD;&#x6570;&#x4E86;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x6BCF;&#x4E2A;&#x8BA2;&#x9605;&#x8005;&#x51FD;&#x6570;&#x8FDB;&#x884C;&#x6CE8;&#x518C;&#x3002; &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x770B;&#x770B;&#x6211;&#x4EEC;&#x7684;SubribeMethod&#x88AB;&#x5305;&#x88C5;&#x6210;&#x4E86;&#x4EC0;&#x4E48;&#x6837;&#x5B50;&#xFF1A; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/** Used internally by EventBus and generated subscriber indexes. */public class SubscriberMethod { final Method method; final ThreadMode threadMode; final Class&lt;?&gt; eventType; final int priority; final boolean sticky; /** Used for efficient comparison */ String methodString; public SubscriberMethod(Method method, Class&lt;?&gt; eventType, ThreadMode threadMode, int priority, boolean sticky) { this.method = method; this.threadMode = threadMode; this.eventType = eventType; this.priority = priority; this.sticky = sticky; } @Override public boolean equals(Object other) { if (other == this) { return true; } else if (other instanceof SubscriberMethod) { checkMethodString(); SubscriberMethod otherSubscriberMethod = (SubscriberMethod)other; otherSubscriberMethod.checkMethodString(); // Don&apos;t use method.equals because of http://code.google.com/p/android/issues/detail?id=7811#c6 return methodString.equals(otherSubscriberMethod.methodString); } else { return false; } } private synchronized void checkMethodString() { if (methodString == null) { // Method.toString has more overhead, just take relevant parts of the method StringBuilder builder = new StringBuilder(64); builder.append(method.getDeclaringClass().getName()); builder.append(&apos;#&apos;).append(method.getName()); builder.append(&apos;(&apos;).append(eventType.getName()); methodString = builder.toString(); } } @Override public int hashCode() { return method.hashCode(); }} SubscribeMethod &#x643A;&#x5E26;&#x4E86;Method&#x51FD;&#x6570;&#x539F;&#x578B;&#xFF0C;&#x8FD8;&#x6709;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x5728;&#x6CE8;&#x89E3;&#x7C7B;&#x91CC;&#x9762;&#x63D0;&#x4F9B;&#x7684;&#x6240;&#x6709;&#x4FE1;&#x606F;&#x3002;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;Class&lt;?&gt;&#x7C7B;&#x578B;&#x7684;EventType&#x662F;&#x6307;&#x6211;&#x4EEC;&#x7684;&#x4E8B;&#x4EF6;&#x7C7B;&#x6240;&#x5BF9;&#x5E94;&#x7684;Class&#xFF0C;&#x5176;&#x4F59;&#x7684;&#x65B9;&#x6CD5;&#x90FD;&#x662F;&#x4E3A;&#x4E86;&#x6BD4;&#x8F83;&#x548C;&#x5224;&#x65AD;&#x662F;&#x5426;&#x76F8;&#x7B49;&#x6765;&#x505A;&#x7684;&#xFF0C;equal/checkMethodString&#x90FD;&#x662F;&#x5404;&#x79CD;&#x7684;&#x62FC;&#x5B57;&#x4E32;&#x6765;&#x8FDB;&#x884C;&#x5B58;&#x50A8;&#x548C;&#x5224;&#x65AD;&#x3002; &#x4E0B;&#x9762;&#x6211;&#x4EEC;&#x6765;&#x770B;register&#x91CC;&#x9762;&#x8C03;&#x7528;&#x7684;&#x8FD9;&#x6BB5;subscribe&#xFF0C;&#x8FD9;&#x6BB5;&#x975E;&#x5E38;&#x7684;&#x91CD;&#x8981;&#x6D89;&#x53CA;&#x4E86;EventBus&#x8FD0;&#x884C;&#x65F6;&#x5904;&#x7406;&#x7684;&#x7EDD;&#x5927;&#x591A;&#x6570;&#x90E8;&#x5206;&#xFF0C;&#x8FD8;&#x6709;&#x5C31;&#x662F;&#x7C98;&#x6027;&#x4E8B;&#x4EF6;&#x7684;&#x5206;&#x53D1;&#x3002;&#x8FD9;&#x6BB5;&#x4F7F;&#x7528;&#x4E86;&#x5927;&#x91CF;&#x7684;JDK&#x7684;&#x53CD;&#x5C04;&#x5305;&#x7684;API&#xFF0C;&#x672C;&#x8EAB;&#x6CE8;&#x91CA;&#x4E5F;&#x63D0;&#x9192;&#x6211;&#x4EEC;&#x4E86;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x9700;&#x8981;&#x52A0;&#x9501;&#xFF0C;&#x6BD5;&#x7ADF;&#x91CC;&#x9762;&#x8FD9;&#x4E00;&#x5806;&#x5E76;&#x53D1;&#x5BB9;&#x5668;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x6700;&#x597D;&#x5148;&#x660E;&#x786E;&#x8FD9;&#x6BB5;&#x91CC;&#x9762;&#x7528;&#x7684;&#x5E76;&#x53D1;&#x5BB9;&#x5668;&#x5230;&#x5E95;&#x90FD;&#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x624D;&#x597D;&#x7EE7;&#x7EED;&#x770B;&#x7684;&#x4E0B;&#x53BB;&#x3002; 123private final Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;private final Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;private final Map&lt;Class&lt;?&gt;, Object&gt; stickyEvents; &#x4E3B;&#x8981;&#x7684;&#x6709;&#x8FD9;&#x51E0;&#x4E2A;&#xFF1A; &#x7B2C;&#x4E00;&#x4E2A;Map&#x5B58;&#x50A8;&#x7684;Key&#x662F;Class&#x7C7B;&#x578B;&#xFF0C;Value&#x662F;&#x4E00;&#x4E2A;&#x5E76;&#x53D1;&#x7684;ArrayList&#x91CC;&#x9762;&#x5B58;&#x7684;&#x662F;&#x5BF9;&#x8BA2;&#x9605;&#x8005;&#x548C;&#x8BA2;&#x9605;&#x51FD;&#x6570;&#x7684;&#x4E00;&#x79CD;&#x7ED1;&#x5B9A;&#x7C7B;Subscription&#x4ECE;&#x540D;&#x5B57;&#x4E0A;&#x4E5F;&#x80FD;&#x770B;&#x51FA;Key&#x662F;Event&#x7684;Class&#x5BF9;&#x8C61;&#x3002; &#x7B2C;&#x4E8C;&#x4E2A;&#x5B58;&#x50A8;&#x7684;&#x662F;&#x8BA2;&#x9605;&#x8005;&#xFF08;Activity&#x4EC0;&#x4E48;&#x7684;&#x554A;&#xFF09;&#x548C;Event&#x7C7B;&#x578B;&#x7684;List&#x3002; &#x7B2C;&#x4E09;&#x4E2A;Map&#x5B58;&#x50A8;&#x7684;&#x662F;&#x7C98;&#x6027;&#x4E8B;&#x4EF6;&#xFF0C;Key&#x662F;Event&#x7C7B;&#x578B;&#xFF0C;Value&#x662F;&#x771F;&#x5B9E;&#x5B58;&#x5728;&#x7684;StickyEvent&#x5BF9;&#x8C61;&#x3002; &#x77E5;&#x9053;&#x8FD9;&#x4E09;&#x4E2A;&#x90FD;&#x662F;&#x4EC0;&#x4E48;&#x4E4B;&#x540E;&#xFF0C;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x5C31;&#x597D;&#x770B;&#x4E86;&#x3002;&#x6211;&#x4EEC;&#x6765;&#x770B;&#x524D;&#x4E00;&#x90E8;&#x5206;&#x3002; 123456789101112131415161718192021222324252627282930// Must be called in synchronized block private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) { Class&lt;?&gt; eventType = subscriberMethod.eventType; Subscription newSubscription = new Subscription(subscriber, subscriberMethod); // Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType) ; if (subscriptions == null) { subscriptions = new CopyOnWriteArrayList&lt;&gt;(); subscriptionsByEventType.put(eventType, subscriptions); } else { if (subscriptions.contains(newSubscription)) { throw new EventBusException(&quot;Subscriber &quot; + subscriber.getClass() + &quot; already registered to event &quot; + eventType); } } int size = subscriptions.size(); for (int i = 0; i &lt;= size; i++) { if (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) { subscriptions.add(i, newSubscription); break; } } List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber); if (subscribedEvents == null) { subscribedEvents = new ArrayList&lt;&gt;(); typesBySubscriber.put(subscriber, subscribedEvents); } subscribedEvents.add(eventType); &#x8FD9;&#x6BB5;&#x5199;&#x7684;&#x867D;&#x7136;&#x6709;&#x70B9;&#x4E71;&#x5957;&#xFF0C;&#x4F46;&#x5B9E;&#x9645;&#x4E0A;&#x5199;&#x7684;&#x633A;&#x7B80;&#x5355;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x4E00;&#x5806;&#x5806;&#x7684;O(n)&#x904D;&#x5386;&#xFF0C;&#x6027;&#x80FD;&#x4E5F;&#x5C31;&#x90A3;&#x6837;(?)&#x3002; &#x9996;&#x5148;&#x8FD9;&#x91CC;&#x9762;&#x51FA;&#x73B0;&#x4E86;Subscription&#xFF1A; 12345678910111213141516171819202122232425262728293031final class Subscription { final Object subscriber; final SubscriberMethod subscriberMethod; /** * Becomes false as soon as {@link EventBus#unregister(Object)} is called, which is checked by queued event delivery * {@link EventBus#invokeSubscriber(PendingPost)} to prevent race conditions. */ volatile boolean active; Subscription(Object subscriber, SubscriberMethod subscriberMethod) { this.subscriber = subscriber; this.subscriberMethod = subscriberMethod; active = true; } @Override public boolean equals(Object other) { if (other instanceof Subscription) { Subscription otherSubscription = (Subscription) other; return subscriber == otherSubscription.subscriber &amp;&amp; subscriberMethod.equals(otherSubscription.subscriberMethod); } else { return false; } } @Override public int hashCode() { return subscriber.hashCode() + subscriberMethod.methodString.hashCode(); }} &#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x4E86;&#x8FD9;&#x662F;&#x8BA2;&#x9605;&#x8005;&#x548C;&#x8BA2;&#x9605;&#x65B9;&#x6CD5;&#x7C7B;&#x7684;&#x4E00;&#x4E2A;&#x5951;&#x7EA6;&#x5173;&#x7CFB;&#x7C7B;&#x3002; &#x6240;&#x4EE5;&#x8BF4;&#x4E0A;&#x9762;subscribe&#x51FD;&#x6570;&#x4E3B;&#x8981;&#x505A;&#x4E86;&#xFF0C; &#x521B;&#x5EFA;&#x4E86;&#x8BA2;&#x9605;&#x8005;&#x548C;&#x65B9;&#x6CD5;&#x7C7B;&#x7684;&#x7ED1;&#x5B9A;&#xFF0C;&#x7136;&#x540E;&#x5B58;&#x8FDB;&#x4E86;subscriptionsByEventType&#x4E2D; &#x5BF9;&#x6BCF;&#x4E2A;&#x7C7B;&#x578B;&#x91CD;&#x65B0;&#x6392;&#x5217;&#x4E86;&#x4E00;&#x6B21;&#x4F18;&#x5148;&#x7EA7; &#x5BF9;typesBySubscriber&#x6DFB;&#x52A0;&#x4E86;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x578B; &#x7136;&#x540E;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x4E00;&#x4E0B;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x7684;&#x4E0B;&#x4E00;&#x534A;&#xFF0C;&#x6211;&#x4EEC;&#x4F1A;&#x60CA;&#x5947;&#x5730;&#x53D1;&#x73B0;&#xFF0C;StickyEvent&#x7684;&#x53D1;&#x9001;&#x65F6;&#x673A;&#x5C45;&#x7136;&#x662F;&#x5728;register&#x7684;&#x65F6;&#x5019;&#xFF1A; 1234567891011121314151617181920... if (subscriberMethod.sticky) { if (eventInheritance) { // Existing sticky events of all subclasses of eventType have to be considered. // Note: Iterating over all events may be inefficient with lots of sticky events, // thus data structure should be changed to allow a more efficient lookup // (e.g. an additional map storing sub classes of super classes: Class -&gt; List&lt;Class&gt;). Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet(); for (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) { Class&lt;?&gt; candidateEventType = entry.getKey(); if (eventType.isAssignableFrom(candidateEventType)) { Object stickyEvent = entry.getValue(); checkPostStickyEventToSubscription(newSubscription, stickyEvent); } } } else { Object stickyEvent = stickyEvents.get(eventType); checkPostStickyEventToSubscription(newSubscription, stickyEvent); } } &#x8FD9;&#x65F6;&#x5019;&#x8F6E;&#x4E86;&#x4E00;&#x904D;&#x6240;&#x6709;&#x7684;&#x7C98;&#x6027;&#x4E8B;&#x4EF6;&#x3002;isAssignableFrom&#x7C7B;&#x4F3C;&#x4E8E;&#x4F7F;&#x7528;&#x5728;Class&#x4E4B;&#x95F4;&#x7684;instance of &#x5C31;&#x662F;&#x5224;&#x65AD;&#x4E24;&#x4E2A;&#x7C7B;&#x662F;&#x5426;&#x6709;&#x76F8;&#x540C;&#x7684;&#x63A5;&#x53E3;&#x5173;&#x7CFB;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x6709;&#x7EE7;&#x627F;&#x548C;&#x5B9E;&#x73B0;&#x5173;&#x7CFB;&#x7684;&#x4E8B;&#x4EF6;&#x7C7B;&#xFF0C;&#x90FD;&#x4F1A;&#x88AB;&#x5224;&#x65AD;&#x5904;&#x7406;&#x3002; 1234567private void checkPostStickyEventToSubscription(Subscription newSubscription, Object stickyEvent) { if (stickyEvent != null) { // If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state) // --&gt; Strange corner case, which we don&apos;t take care of here. postToSubscription(newSubscription, stickyEvent, Looper.getMainLooper() == Looper.myLooper()); } } 1234567891011121314151617181920212223242526private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) { switch (subscription.subscriberMethod.threadMode) { case POSTING: invokeSubscriber(subscription, event); break; case MAIN: if (isMainThread) { invokeSubscriber(subscription, event); } else { mainThreadPoster.enqueue(subscription, event); } break; case BACKGROUND: if (isMainThread) { backgroundPoster.enqueue(subscription, event); } else { invokeSubscriber(subscription, event); } break; case ASYNC: asyncPoster.enqueue(subscription, event); break; default: throw new IllegalStateException(&quot;Unknown thread mode: &quot; + subscription.subscriberMethod.threadMode); } } &#x4E4B;&#x540E;&#x5C31;&#x662F;&#x9488;&#x5BF9;&#x5404;&#x79CD;&#x7684;ThreadMode&#x8FDB;&#x884C;&#x4E86;&#x5904;&#x7406;&#xFF0C;&#x540C;&#x4E00;&#x7EBF;&#x7A0B;&#x7684;&#x76F4;&#x63A5;&#x4F9D;&#x8D56;Java&#x7684;&#x53CD;&#x5C04;invoke&#x6267;&#x884C;&#x4E86;&#xFF0C;&#x5404;&#x79CD;&#x4E0D;&#x53EF;&#x4EE5;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#x53D1;&#x5230;&#x4E3B;&#x7EBF;&#x7A0B;&#x4F46;&#x8FD8;&#x6CA1;&#x5728;&#x4E3B;&#x7EBF;&#x7A0B;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x90FD;&#x662F;&#x7528;&#x961F;&#x5217;&#x8FDB;&#x884C;&#x53D1;&#x9001;&#x5230;&#x5BF9;&#x5E94;&#x7EBF;&#x7A0B;&#x3002; &#x63A5;&#x4E0B;&#x6765;&#x6211;&#x4EEC;&#x770B;&#x770B;&#x8FD9;&#x91CC;&#x9762;&#x5728;&#x5404;&#x7EBF;&#x7A0B;&#x4E4B;&#x95F4;&#x7684;&#x53D1;&#x9001;&#x662F;&#x600E;&#x4E48;&#x5B9E;&#x73B0;&#x7684;&#x3002; &#x6D88;&#x606F;&#x8F6C;&#x6362;&#x7EBF;&#x7A0B;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x5728;Subscription&#x548C;event&#x5165;&#x961F;&#x7684;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x628A;&#x4ED6;&#x4EEC;&#x5C01;&#x88C5;&#x6210;&#x4E86;&#x4E00;&#x4E2A;PendingPost&#x7C7B;&#xFF1A; 12345678910111213// HandlePoster void enqueue(Subscription subscription, Object event) { PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event); synchronized (this) { queue.enqueue(pendingPost); if (!handlerActive) { handlerActive = true; if (!sendMessage(obtainMessage())) { throw new EventBusException(&quot;Could not send handler message&quot;); } } } } &#x7136;&#x540E;&#x624D;&#x8FDB;&#x884C;&#x7684;&#x5165;&#x961F;&#x548C;&#x53D1;&#x9001;&#xFF0C;&#x8FD9;&#x4E2A;PendingPost&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x5E26;&#x6709;&#x56DE;&#x6536;&#x6C60;&#x7684;&#x63A9;&#x9970;&#x4F20;&#x9001;&#x7C7B;&#xFF1A; 1234567891011121314151617181920212223242526272829303132333435363738final class PendingPost { private final static List&lt;PendingPost&gt; pendingPostPool = new ArrayList&lt;PendingPost&gt;(); Object event; Subscription subscription; PendingPost next; private PendingPost(Object event, Subscription subscription) { this.event = event; this.subscription = subscription; } static PendingPost obtainPendingPost(Subscription subscription, Object event) { synchronized (pendingPostPool) { int size = pendingPostPool.size(); if (size &gt; 0) { PendingPost pendingPost = pendingPostPool.remove(size - 1); pendingPost.event = event; pendingPost.subscription = subscription; pendingPost.next = null; return pendingPost; } } return new PendingPost(event, subscription); } static void releasePendingPost(PendingPost pendingPost) { pendingPost.event = null; pendingPost.subscription = null; pendingPost.next = null; synchronized (pendingPostPool) { // Don&apos;t let the pool grow indefinitely if (pendingPostPool.size() &lt; 10000) { pendingPostPool.add(pendingPost); } } }} &#x8FD9;&#x91CC;&#x7684;&#x8BBE;&#x8BA1;&#x5176;&#x5B9E;&#x633A;&#x4E0D;&#x9519;&#x7684;&#xFF0C;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x7684;&#x56DE;&#x6536;&#x6C60;&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x9760;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x65B9;&#x6CD5;&#xFF0C;&#x4F18;&#x5148;&#x4F7F;&#x7528;&#x88AB;&#x56DE;&#x6536;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x5B9E;&#x73B0;&#x548C;Message&#x5176;&#x5B9E;&#x5F88;&#x50CF;&#x3002;&#x53E6;&#x4E00;&#x4E2A;release&#x65B9;&#x6CD5;&#x5C31;&#x662F;&#x628A;&#x7528;&#x5B8C;&#x7684;&#x5BF9;&#x8C61;&#x56DE;&#x6536;&#x8D77;&#x6765;&#x3002; PendingPostQueue &#x5C31;&#x662F;&#x4E00;&#x4E2A;PendingPost&#x7684;&#x961F;&#x5217;&#xFF0C;&#x91CC;&#x9762;&#x7684;&#x64CD;&#x4F5C;&#x57FA;&#x672C;&#x4E0A;&#x5C31;&#x662F;&#x5165;&#x961F;&#x51FA;&#x961F;&#x4E4B;&#x7C7B;&#x7684;&#xFF0C;&#x6709;&#x70B9;&#x7279;&#x6B8A;&#x7684;&#x662F;&#x5165;&#x961F;&#x548C;&#x51FA;&#x961F;&#x90FD;&#x6709;&#x4E00;&#x628A;&#x9501;&#x3002; &#x63A5;&#x7740;&#x8FD9;&#x4E2A;&#x961F;&#x5217;&#x88AB;&#x7528;&#x5728;&#x4E86;&#x597D;&#x51E0;&#x4E2A;Poster&#x7C7B;&#x4E2D;&#xFF0C;&#x5B9E;&#x73B0;&#x4E86;&#x5411;&#x5404;&#x4E2A;&#x7EBF;&#x7A0B;&#x7684;&#x6D88;&#x606F;&#x8F6C;&#x6362;&#xFF0C;&#x9996;&#x5148;&#x6211;&#x4EEC;&#x6765;&#x770B;&#x5411;&#x4E3B;&#x7EBF;&#x7A0B;&#x53D1;&#x9001;&#x6570;&#x636E;&#x7684;: HandlePoster1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859final class HandlerPoster extends Handler { private final PendingPostQueue queue; private final int maxMillisInsideHandleMessage; private final EventBus eventBus; private boolean handlerActive; HandlerPoster(EventBus eventBus, Looper looper, int maxMillisInsideHandleMessage) { super(looper); this.eventBus = eventBus; this.maxMillisInsideHandleMessage = maxMillisInsideHandleMessage; queue = new PendingPostQueue(); } void enqueue(Subscription subscription, Object event) { PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event); synchronized (this) { queue.enqueue(pendingPost); if (!handlerActive) { handlerActive = true; if (!sendMessage(obtainMessage())) { throw new EventBusException(&quot;Could not send handler message&quot;); } } } } @Override public void handleMessage(Message msg) { boolean rescheduled = false; try { long started = SystemClock.uptimeMillis(); while (true) { PendingPost pendingPost = queue.poll(); if (pendingPost == null) { synchronized (this) { // Check again, this time in synchronized pendingPost = queue.poll(); if (pendingPost == null) { handlerActive = false; return; } } } eventBus.invokeSubscriber(pendingPost); long timeInMethod = SystemClock.uptimeMillis() - started; if (timeInMethod &gt;= maxMillisInsideHandleMessage) { if (!sendMessage(obtainMessage())) { throw new EventBusException(&quot;Could not send handler message&quot;); } rescheduled = true; return; } } } finally { handlerActive = rescheduled; } }} HandlePoster &#x7EE7;&#x627F;&#x81EA; Handler &#x518D;&#x52A0;&#x4E0A;&#x521D;&#x59CB;&#x5316;&#x7684;&#x65F6;&#x5019;&#x4F20;&#x8FDB;&#x53BB;&#x7684;&#x662F;Looper.getMainThread();&#x6240;&#x4EE5;&#x80FD;&#x5411;&#x4E3B;&#x7EBF;&#x7A0B;&#x53D1;&#x9001;&#x6D88;&#x606F;&#x3002;&#x6BCF;&#x6B21;&#x5165;&#x961F;&#x4E4B;&#x540E;&#x90FD;&#x4F1A;&#x53D1;&#x9001;&#x4E00;&#x6761;&#x7A7A;&#x6D88;&#x606F;&#x53BB;&#x901A;&#x77E5;handleMessage&#x51FD;&#x6570;&#x5904;&#x7406;&#x961F;&#x5217;&#x6570;&#x636E;&#xFF0C;&#x4F7F;&#x7528;handlerActive&#x4F5C;&#x4E3A;&#x63A7;&#x5236;&#x6807;&#x8BB0;&#x4F4D;&#x3002;handleMessage&#x662F;&#x4E2A;&#x6B7B;&#x5FAA;&#x73AF;&#x4E24;&#x6BB5;&#x7684;if&#x5224;&#x65AD;&#x7528;&#x6765;&#x5904;&#x7406;&#x591A;&#x7EBF;&#x7A0B;&#x7684;&#x60C5;&#x51B5;&#xFF0C;invokeSubscriber&#x7684;&#x65B9;&#x5F0F;&#x548C;&#x4E4B;&#x524D;&#x7C7B;&#x4F3C;&#x3002;&#x4E4B;&#x540E;&#x5C31;&#x662F;&#x6709;&#x4E00;&#x4E2A;&#x9600;&#x503C;&#xFF0C;&#x5F53;&#x65F6;&#x95F4;&#x8D85;&#x8FC7;10ms&#x7684;&#x65F6;&#x5019;&#x5C31;&#x4F1A;&#x53D1;&#x4E00;&#x4E2A;&#x6D88;&#x606F;&#x91CD;&#x5165;&#xFF0C;&#x5E76;&#x4E14;&#x9000;&#x51FA;&#x8FD9;&#x6B21;&#x5FAA;&#x73AF;&#xFF0C;&#x8FD9;&#x662F;&#x9632;&#x6B62;&#x65F6;&#x95F4;&#x592A;&#x957F;&#x963B;&#x585E;&#x4E3B;&#x7EBF;&#x7A0B;&#x3002; BackgroundPoster12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849final class BackgroundPoster implements Runnable { private final PendingPostQueue queue; private final EventBus eventBus; private volatile boolean executorRunning; BackgroundPoster(EventBus eventBus) { this.eventBus = eventBus; queue = new PendingPostQueue(); } public void enqueue(Subscription subscription, Object event) { PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event); synchronized (this) { queue.enqueue(pendingPost); if (!executorRunning) { executorRunning = true; eventBus.getExecutorService().execute(this); } } } @Override public void run() { try { try { while (true) { PendingPost pendingPost = queue.poll(1000); if (pendingPost == null) { synchronized (this) { // Check again, this time in synchronized pendingPost = queue.poll(); if (pendingPost == null) { executorRunning = false; return; } } } eventBus.invokeSubscriber(pendingPost); } } catch (InterruptedException e) { Log.w(&quot;Event&quot;, Thread.currentThread().getName() + &quot; was interruppted&quot;, e); } } finally { executorRunning = false; } }} BackgroundPoster &#x81EA;&#x8EAB;&#x662F;&#x4E00;&#x4E2A;Runnable &#xFF0C;&#x5165;&#x961F;&#x4E4B;&#x540E;&#x5C31;&#x8C03;&#x7528;EventBus&#x643A;&#x5E26;&#x7684;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x6C60;&#x8FDB;&#x884C;&#x8FD0;&#x884C;&#xFF0C;&#x540C;&#x6837;&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x6B7B;&#x5FAA;&#x73AF;&#xFF0C;&#x7528;&#x4E86;&#x4E00;&#x4E2A;&#x751F;&#x4EA7;&#x8005; vs &#x6D88;&#x8D39;&#x8005;&#x6A21;&#x5F0F; &#x8FDB;&#x884C;&#x4E86;&#x6709;&#x9650;&#x7B49;&#x5F85;&#xFF0C;&#x8FD9;1000ms&#x5185;&#x5165;&#x961F;&#x7684;&#x6D88;&#x606F;&#x90FD;&#x4F1A;&#x88AB;&#x5F39;&#x51FA;&#x5904;&#x7406;&#x3002; 123456synchronized PendingPost poll(int maxMillisToWait) throws InterruptedException { if (head == null) { wait(maxMillisToWait); } return poll();} PendingPostQueue&#x7684;poll(int)&#x65B9;&#x6CD5;&#x5BF9;&#x961F;&#x5217;&#x4E3A;&#x7A7A;&#x7684;&#x60C5;&#x51B5;&#x8FDB;&#x884C;&#x4E86;&#x7B49;&#x5F85;&#xFF0C;&#x5524;&#x9192;&#x5219;&#x51FA;&#x73B0;&#x5728;enqueue: 1234567891011121314synchronized void enqueue(PendingPost pendingPost) { if (pendingPost == null) { throw new NullPointerException(&quot;null cannot be enqueued&quot;); } if (tail != null) { tail.next = pendingPost; tail = pendingPost; } else if (head == null) { head = tail = pendingPost; } else { throw new IllegalStateException(&quot;Head present, but no tail&quot;); } notifyAll(); // &#x5728;&#x8FD9;&#x8FDB;&#x884C;&#x4E86;&#x5524;&#x9192;} AsyncPoster&#x5982;&#x679C;&#x8BF4;Background&#x5C1A;&#x4E14;&#x80FD;&#x4FDD;&#x8BC1;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x5185;&#x5B8C;&#x6210;&#xFF0C;AsyncPoster&#x5C31;&#x5B8C;&#x5168;&#x8FDB;&#x884C;&#x4E86;&#x5F02;&#x6B65;&#x64CD;&#x4F5C;&#x3002; 123456789101112131415161718192021class AsyncPoster implements Runnable { private final PendingPostQueue queue; private final EventBus eventBus; AsyncPoster(EventBus eventBus) { this.eventBus = eventBus; queue = new PendingPostQueue(); } public void enqueue(Subscription subscription, Object event) { PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event); queue.enqueue(pendingPost); eventBus.getExecutorService().execute(this); } @Override public void run() { PendingPost pendingPost = queue.poll(); if(pendingPost == null) { throw new IllegalStateException(&quot;No pending post available&quot;); } eventBus.invokeSubscriber(pendingPost); }} &#x8FD9;&#x91CC;&#x9762;&#x57FA;&#x672C;&#x4E0A;&#x4EC0;&#x4E48;&#x90FD;&#x4E0D;&#x63A7;&#x5236;&#xFF0C;&#x76F4;&#x63A5;&#x5C31;&#x6765;&#x4E00;&#x4E2A;&#x8FD0;&#x884C;&#x4E00;&#x6B21;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x6709;&#x4EC0;&#x4E48;&#x95EE;&#x9898;&#x3002;&#x3002;&#x3002; &#x5230;&#x8FD9;&#x4E3A;&#x6B62;&#x6211;&#x4EEC;&#x4E0D;&#x4F46;&#x77E5;&#x9053;&#x4E86;&#x65B9;&#x6CD5;&#x662F;&#x600E;&#x4E48;&#x6CE8;&#x518C;&#x548C;&#x7ED1;&#x5B9A;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x751A;&#x81F3;&#x8FD8;&#x77E5;&#x9053;&#x4E86;&#x7C98;&#x6027;&#x4E8B;&#x4EF6;&#x662F;&#x600E;&#x4E48;&#x53D1;&#x9001;&#x7684;&#x4E86;&#xFF0C;&#x63A5;&#x7740;&#x6211;&#x4EEC;&#x6765;&#x770B;&#x65B9;&#x6CD5;&#x67E5;&#x627E;&#x548C;&#x666E;&#x901A;&#x4E8B;&#x4EF6;&#x7684;&#x53D1;&#x9001;&#x662F;&#x600E;&#x4E48;&#x8FDB;&#x884C;&#x7684;&#x3002; &#x65B9;&#x6CD5;&#x67E5;&#x627E;123456789101112// package org.greenrobot.eventbus.meta;/** Base class for generated index classes created by annotation processing. */public interface SubscriberInfo { // &#x83B7;&#x53D6;&#x8BA2;&#x9605;&#x7684;&#x7C7B; Class&lt;?&gt; getSubscriberClass(); // &#x6240;&#x6709;&#x7684;method SubscriberMethod[] getSubscriberMethods(); // &#x83B7;&#x53D6;&#x7236;&#x7C7B;&#x7684;info SubscriberInfo getSuperSubscriberInfo(); // &#x662F;&#x5426;&#x68C0;&#x67E5;&#x7236;&#x7C7B; boolean shouldCheckSuperclass();} SubscriberInfo &#x63CF;&#x8FF0;&#x4E86;&#x80FD;&#x901A;&#x8FC7;&#x6CE8;&#x89E3;&#x7C7B;&#x751F;&#x6210;&#x7684;Index&#x7684;&#x65B9;&#x6CD5;&#xFF08;&#x5177;&#x4F53;&#x529F;&#x80FD;&#x6211;&#x52A0;&#x4E86;&#x4E3B;&#x98DF;&#xFF09;&#x3002; 123456/** * Interface for generated indexes. */public interface SubscriberInfoIndex { SubscriberInfo getSubscriberInfo(Class&lt;?&gt; subscriberClass);} &#x8FD9;&#x4E2A;&#x63A5;&#x53E3;&#x662F;&#x67E5;&#x627E;info&#x7684;&#x3002; &#x53E6;&#x5916;&#x53EF;&#x4EE5;&#x8BF4;&#x8FD9;&#x5176;&#x4E2D;&#x7684;SubscriberMethodInfo&#x5B58;&#x50A8;&#x7740;SubscriberMethod&#x6240;&#x9700;&#x7684;&#x5143;&#x4FE1;&#x606F;&#xFF1A; 1234567public class SubscriberMethodInfo { final String methodName; final ThreadMode threadMode; final Class&lt;?&gt; eventType; final int priority; final boolean sticky; ... AbstractSubscriberInfo&#x662F;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#xFF0C;&#x4E3B;&#x8981;&#x8D1F;&#x8D23;&#x4ECE;Info&#x521B;&#x5EFA;&#x51FA;Method&#xFF0C;&#x53C8;&#x662F;&#x4E00;&#x4E2A;&#x53CD;&#x5C04;&#xFF1A; 12345678910protected SubscriberMethod createSubscriberMethod(String methodName, Class&lt;?&gt; eventType, ThreadMode threadMode, int priority, boolean sticky) { try { Method method = subscriberClass.getDeclaredMethod(methodName, eventType); return new SubscriberMethod(method, eventType, threadMode, priority, sticky); } catch (NoSuchMethodException e) { throw new EventBusException(&quot;Could not find subscriber method in &quot; + subscriberClass + &quot;. Maybe a missing ProGuard rule?&quot;, e); }} &#x53E6;&#x5916;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;SimpleSubscriberInfo&#x4F5C;&#x4E3A;&#x4ED6;&#x7684;&#x5B50;&#x7C7B;&#x3002; &#x63A5;&#x4E0B;&#x6765;&#x7684;SubscriberMethodFinder&#x4E5F;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x8FD0;&#x884C;&#x65F6;&#x7684;&#x65B9;&#x6CD5;&#x67E5;&#x627E;&#x90FD;&#x6765;&#x81EA;&#x8FD9;&#x91CC;: &#x521A;&#x624D;&#x6211;&#x4EEC;&#x5728;EventBus.register(...)&#x4E2D;&#x8C03;&#x7528;&#x4E86;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#xFF1A; 12345678910111213141516171819List&lt;SubscriberMethod&gt; findSubscriberMethods(Class&lt;?&gt; subscriberClass) { List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass); if (subscriberMethods != null) { return subscriberMethods; } if (ignoreGeneratedIndex) { subscriberMethods = findUsingReflection(subscriberClass); } else { subscriberMethods = findUsingInfo(subscriberClass); } if (subscriberMethods.isEmpty()) { throw new EventBusException(&quot;Subscriber &quot; + subscriberClass + &quot; and its super classes have no public methods with the @Subscribe annotation&quot;); } else { METHOD_CACHE.put(subscriberClass, subscriberMethods); return subscriberMethods; }} &#x5176;&#x4E2D;&#x7684;METHOD_CACHE&#x662F;&#x5BF9;&#x6BCF;&#x4E2A;&#x7C7B;&#x65B9;&#x6CD5;&#x8FDB;&#x884C;&#x7F13;&#x5B58;&#xFF0C;&#x9632;&#x6B62;&#x591A;&#x6B21;&#x67E5;&#x627E;&#xFF0C;&#x6BD5;&#x7ADF;&#x8FD0;&#x884C;&#x65F6;&#x67E5;&#x627E;&#x8FD8;&#x662F;&#x4E2A;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x6839;&#x636E;&#x662F;&#x5426;&#x5FFD;&#x7565;&#x751F;&#x6210;Index&#x3002; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546private List&lt;SubscriberMethod&gt; findUsingReflection(Class&lt;?&gt; subscriberClass) { FindState findState = prepareFindState(); findState.initForSubscriber(subscriberClass); while (findState.clazz != null) { findUsingReflectionInSingleClass(findState); findState.moveToSuperclass(); } return getMethodsAndRelease(findState); } private void findUsingReflectionInSingleClass(FindState findState) { Method[] methods; try { // This is faster than getMethods, especially when subscribers are fat classes like Activities methods = findState.clazz.getDeclaredMethods(); } catch (Throwable th) { // Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149 methods = findState.clazz.getMethods(); findState.skipSuperClasses = true; } for (Method method : methods) { int modifiers = method.getModifiers(); if ((modifiers &amp; Modifier.PUBLIC) != 0 &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == 0) { Class&lt;?&gt;[] parameterTypes = method.getParameterTypes(); if (parameterTypes.length == 1) { Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class); if (subscribeAnnotation != null) { Class&lt;?&gt; eventType = parameterTypes[0]; if (findState.checkAdd(method, eventType)) { ThreadMode threadMode = subscribeAnnotation.threadMode(); findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode, subscribeAnnotation.priority(), subscribeAnnotation.sticky())); } } } else if (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) { String methodName = method.getDeclaringClass().getName() + &quot;.&quot; + method.getName(); throw new EventBusException(&quot;@Subscribe method &quot; + methodName + &quot;must have exactly 1 parameter but has &quot; + parameterTypes.length); } } else if (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) { String methodName = method.getDeclaringClass().getName() + &quot;.&quot; + method.getName(); throw new EventBusException(methodName + &quot; is a illegal @Subscribe method: must be public, non-static, and non-abstract&quot;); } } } findUsingReflectionInSingleClass&#x5BF9;&#x53CD;&#x5C04;&#x7C7B;&#x8FDB;&#x884C;&#x4E86;&#x5904;&#x7406;&#xFF0C;&#x8FD9;&#x91CC;&#x9762;&#x901A;&#x8FC7;&#x63A9;&#x6A21;&#x8FD0;&#x7B97;&#x68C0;&#x67E5;&#x4E86;&#x8BBF;&#x95EE;&#x6743;&#x9650;&#xFF0C; &#x68C0;&#x67E5;&#x4E86;&#x53C2;&#x6570;&#x4E2A;&#x6570;&#x3002; 123456789101112131415161718boolean checkAdd(Method method, Class&lt;?&gt; eventType) { // 2 level check: 1st level with event type only (fast), 2nd level with complete signature when required. // Usually a subscriber doesn&apos;t have methods listening to the same event type. Object existing = anyMethodByEventType.put(eventType, method); if (existing == null) { return true; } else { if (existing instanceof Method) { if (!checkAddWithMethodSignature((Method) existing, eventType)) { // Paranoia check throw new IllegalStateException(); } // Put any non-Method object to &quot;consume&quot; the existing Method anyMethodByEventType.put(eventType, this); } return checkAddWithMethodSignature(method, eventType); }} &#x5176;&#x4E2D;&#x7684;checkAdd&#x68C0;&#x67E5;&#x4E86;&#x7C7B;&#x578B;&#x548C;&#x65B9;&#x6CD5;&#x7B7E;&#x540D;&#xFF0C;&#x6BCF;&#x6B21;&#x8F6E;&#x8F6C;&#x5B8C;&#x6210;&#x4E4B;&#x540E;&#x90FD;&#x4F1A;&#x8FDB;&#x884C;&#x4E00;&#x6B21;findState.moveToSuperclass();&#x5BF9;&#x7236;&#x7C7B;&#x8FDB;&#x884C;&#x5904;&#x7406;&#x3002; &#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x56E0;&#x4E3A;&#x53CD;&#x5C04;&#x6240;&#x4F7F;&#x7528;&#x7684;&#x8FD0;&#x884C;&#x65F6;&#x67E5;&#x627E;&#x901F;&#x5EA6;&#x7F13;&#x6162;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x4E5F;&#x7ECF;&#x5E38;&#x4F1A;&#x901A;&#x8FC7;apt&#x4F7F;&#x7528;&#x5DF2;&#x7ECF;&#x521B;&#x5EFA;&#x597D;&#x7684;Index&#x3002; &#x521A;&#x624D;&#x53E6;&#x4E00;&#x4E2A;&#x5206;&#x652F;&#x7684;findUsingInfo&#x5C31;&#x662F;&#x4F7F;&#x7528;&#x5DF2;&#x6709;&#x7684;Index: 12345678910111213141516171819private List&lt;SubscriberMethod&gt; findUsingInfo(Class&lt;?&gt; subscriberClass) { FindState findState = prepareFindState(); findState.initForSubscriber(subscriberClass); while (findState.clazz != null) { findState.subscriberInfo = getSubscriberInfo(findState); if (findState.subscriberInfo != null) { SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods(); for (SubscriberMethod subscriberMethod : array) { if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) { findState.subscriberMethods.add(subscriberMethod); } } } else { findUsingReflectionInSingleClass(findState); } findState.moveToSuperclass(); } return getMethodsAndRelease(findState); } &#x8FD9;&#x6BB5;&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF0C;&#x51E0;&#x4E4E;&#x5C31;&#x662F;&#x521A;&#x624D;&#x7684;&#x9A8C;&#x8BC1;&#x800C;&#x5DF2;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x62FF;&#x5230;&#x6570;&#x636E;&#x7684;&#x8BDD;&#xFF0C;&#x8FD8;&#x4F1A;&#x8FDB;&#x884C;&#x6B63;&#x5E38;&#x7684;&#x53CD;&#x5C04;&#x67E5;&#x627E;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071// EventBusAnnotationProcessor &#x8D1F;&#x8D23;&#x751F;&#x6210;&#x6CE8;&#x89E3;&#x8DEF;&#x7531;&#x8868; private void createInfoIndexFile(String index) { BufferedWriter writer = null; try { JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(index); int period = index.lastIndexOf(&apos;.&apos;); String myPackage = period &gt; 0 ? index.substring(0, period) : null; String clazz = index.substring(period + 1); writer = new BufferedWriter(sourceFile.openWriter()); if (myPackage != null) { writer.write(&quot;package &quot; + myPackage + &quot;;\\n\\n&quot;); } writer.write(&quot;import org.greenrobot.eventbus.meta.SimpleSubscriberInfo;\\n&quot;); writer.write(&quot;import org.greenrobot.eventbus.meta.SubscriberMethodInfo;\\n&quot;); writer.write(&quot;import org.greenrobot.eventbus.meta.SubscriberInfo;\\n&quot;); writer.write(&quot;import org.greenrobot.eventbus.meta.SubscriberInfoIndex;\\n\\n&quot;); writer.write(&quot;import org.greenrobot.eventbus.ThreadMode;\\n\\n&quot;); writer.write(&quot;import java.util.HashMap;\\n&quot;); writer.write(&quot;import java.util.Map;\\n\\n&quot;); writer.write(&quot;/** This class is generated by EventBus, do not edit. */\\n&quot;); writer.write(&quot;public class &quot; + clazz + &quot; implements SubscriberInfoIndex {\\n&quot;); writer.write(&quot; private static final Map&lt;Class&lt;?&gt;, SubscriberInfo&gt; SUBSCRIBER_INDEX;\\n\\n&quot;); writer.write(&quot; static {\\n&quot;); writer.write(&quot; SUBSCRIBER_INDEX = new HashMap&lt;Class&lt;?&gt;, SubscriberInfo&gt;();\\n\\n&quot;); writeIndexLines(writer, myPackage); writer.write(&quot; }\\n\\n&quot;); writer.write(&quot; private static void putIndex(SubscriberInfo info) {\\n&quot;); writer.write(&quot; SUBSCRIBER_INDEX.put(info.getSubscriberClass(), info);\\n&quot;); writer.write(&quot; }\\n\\n&quot;); writer.write(&quot; @Override\\n&quot;); writer.write(&quot; public SubscriberInfo getSubscriberInfo(Class&lt;?&gt; subscriberClass) {\\n&quot;); writer.write(&quot; SubscriberInfo info = SUBSCRIBER_INDEX.get(subscriberClass);\\n&quot;); writer.write(&quot; if (info != null) {\\n&quot;); writer.write(&quot; return info;\\n&quot;); writer.write(&quot; } else {\\n&quot;); writer.write(&quot; return null;\\n&quot;); writer.write(&quot; }\\n&quot;); writer.write(&quot; }\\n&quot;); writer.write(&quot;}\\n&quot;); } catch (IOException e) { throw new RuntimeException(&quot;Could not write source for &quot; + index, e); } finally { if (writer != null) { try { writer.close(); } catch (IOException e) { //Silent } } } }private void writeIndexLines(BufferedWriter writer, String myPackage) throws IOException { for (TypeElement subscriberTypeElement : methodsByClass.keySet()) { if (classesToSkip.contains(subscriberTypeElement)) { continue; } String subscriberClass = getClassString(subscriberTypeElement, myPackage); if (isVisible(myPackage, subscriberTypeElement)) { writeLine(writer, 2, &quot;putIndex(new SimpleSubscriberInfo(&quot; + subscriberClass + &quot;.class,&quot;, &quot;true,&quot;, &quot;new SubscriberMethodInfo[] {&quot;); List&lt;ExecutableElement&gt; methods = methodsByClass.get(subscriberTypeElement); writeCreateSubscriberMethods(writer, methods, &quot;new SubscriberMethodInfo&quot;, myPackage); writer.write(&quot; }));\\n\\n&quot;); } else { writer.write(&quot; // Subscriber not visible to index: &quot; + subscriberClass + &quot;\\n&quot;); } } } &#x6709;&#x4E86;&#x8FD9;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x4E4B;&#x540E;&#x6211;&#x4EEC;&#x5C31;&#x77E5;&#x9053;&#xFF0C;&#x5E73;&#x5E38;&#x7684;index&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x62FC;&#x63A5;&#x51FA;&#x6765;&#x7684;&#x3002; Post&#x6D88;&#x606F;12345678910111213141516171819202122/** Posts the given event to the event bus. */public void post(Object event) { PostingThreadState postingState = currentPostingThreadState.get(); List&lt;Object&gt; eventQueue = postingState.eventQueue; eventQueue.add(event); if (!postingState.isPosting) { postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper(); postingState.isPosting = true; if (postingState.canceled) { throw new EventBusException(&quot;Internal error. Abort state was not reset&quot;); } try { while (!eventQueue.isEmpty()) { postSingleEvent(eventQueue.remove(0), postingState); } } finally { postingState.isPosting = false; postingState.isMainThread = false; } }} PostingThreadState&#x662F;&#x4E00;&#x4E2A;&#x5B58;&#x50A8;&#x5728;ThreadLocal&#x4E2D;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x5305;&#x542B;&#x6709;&#x4EE5;&#x4E0B;&#x5404;&#x79CD;&#x5185;&#x5BB9;&#xFF0C;&#x7EBF;&#x7A0B;&#x4FE1;&#x606F;&#xFF0C;&#x662F;&#x5426;&#x662F;&#x4E3B;&#x7EBF;&#x7A0B;&#xFF0C;&#x662F;&#x5426;&#x53D6;&#x6D88;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x76F8;&#x5E94;&#x7684;&#x4E8B;&#x4EF6;&#x961F;&#x5217;&#x3002; 12345678910111213141516171819202122232425262728private void postSingleEvent(Object event, PostingThreadState postingState) throws Error { Class&lt;?&gt; eventClass = event.getClass(); boolean subscriptionFound = false; if (eventInheritance) { /** Looks up all Class objects including super classes and interfaces. Should also work for interfaces. */ List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass); int countTypes = eventTypes.size(); // &#x5BF9;&#x6240;&#x6709;&#x7684;&#x8BA2;&#x9605;&#x51FD;&#x6570;&#xFF0C;&#x90FD;&#x8C03;&#x7528;&#x53D1;&#x9001;&#x6570;&#x636E; for (int h = 0; h &lt; countTypes; h++) { // &#x6240;&#x6709;&#x7684;&#x8BA2;&#x9605;&#x7C7B; Class&lt;?&gt; clazz = eventTypes.get(h); subscriptionFound |= postSingleEventForEventType(event, postingState, clazz); } } else { // &#x53EA;&#x53D1;&#x9001;&#x4E00;&#x6B21; subscriptionFound = postSingleEventForEventType(event, postingState, eventClass); } if (!subscriptionFound) { if (logNoSubscriberMessages) { Log.d(TAG, &quot;No subscribers registered for event &quot; + eventClass); } if (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp; eventClass != SubscriberExceptionEvent.class) { // &#x65E0;&#x8BA2;&#x9605;&#x8005;&#x7684;&#x5904;&#x7406; post(new NoSubscriberEvent(this, event)); } } } &#x4E4B;&#x540E;&#xFF1A; 1234567891011121314151617181920212223242526private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass) { CopyOnWriteArrayList&lt;Subscription&gt; subscriptions; synchronized (this) { subscriptions = subscriptionsByEventType.get(eventClass); } if (subscriptions != null &amp;&amp; !subscriptions.isEmpty()) { for (Subscription subscription : subscriptions) { postingState.event = event; postingState.subscription = subscription; boolean aborted = false; try { postToSubscription(subscription, event, postingState.isMainThread); aborted = postingState.canceled; } finally { postingState.event = null; postingState.subscription = null; postingState.canceled = false; } if (aborted) { break; } } return true; } return false; } &#x4E4B;&#x540E;&#x5BF9;&#x6240;&#x6709;&#x7684;&#x8BA2;&#x9605;&#x7C7B;&#x7684;&#x6240;&#x6709;&#x8BA2;&#x9605;&#x8005;&#x90FD;&#x53D1;&#x9001;&#x4E00;&#x6B21;&#x6570;&#x636E;&#xFF0C;&#x53D1;&#x9001;&#x6570;&#x636E;&#x65B9;&#x6CD5;&#x548C;&#x4E0A;&#x6587;&#x76F8;&#x540C;&#x3002; &#x53D1;&#x9001;&#x7C98;&#x6027;&#x6570;&#x636E;&#x5C31;&#x662F;&#x62FF;&#x9501;&#x7136;&#x540E;&#x4FDD;&#x5B58;&#x5230;&#x961F;&#x5217;&#x4E2D;&#x53BB;,&#x8FD9;&#x6837;&#x5C31;&#x53EF;&#x4EE5;&#x5728;&#x91CD;&#x65B0;&#x53D1;&#x9001;&#xFF1A; 1234567public void postSticky(Object event) { synchronized (stickyEvents) { stickyEvents.put(event.getClass(), event); } // Should be posted after it is putted, in case the subscriber wants to remove immediately post(event);} &#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x65E0;&#x6CD5;&#x786E;&#x5B9A;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x7C98;&#x6027;&#x4E8B;&#x4EF6;&#x5E94;&#x8BE5;&#x505C;&#x6B62;&#x7EE7;&#x7EED;&#x4F20;&#x64AD;&#xFF0C;&#x8FD9;&#x53D6;&#x51B3;&#x4E8E;&#x6211;&#x4EEC;&#x5E94;&#x7528;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x5E94;&#x5F53;&#x624B;&#x52A8;remove&#x6389;Sticky Event &#xFF1A; 1234567891011121314151617181920212223// &#x7CFB;&#x7EDF;&#x63D0;&#x4F9B;&#x4E86;&#x5982;&#x4E0B;&#x65B9;&#x6CD5; public &lt;T&gt; T removeStickyEvent(Class&lt;T&gt; eventType) { synchronized (stickyEvents) { return eventType.cast(stickyEvents.remove(eventType)); } } public boolean removeStickyEvent(Object event) { synchronized (stickyEvents) { Class&lt;?&gt; eventType = event.getClass(); Object existingEvent = stickyEvents.get(eventType); if (event.equals(existingEvent)) { stickyEvents.remove(eventType); return true; } else { return false; } } } public void removeAllStickyEvents() { synchronized (stickyEvents) { stickyEvents.clear(); } } &#x81F3;&#x6B64;&#x6211;&#x4EEC;&#x5C31;&#x5206;&#x6790;&#x5B8C;&#x4E86;EventBus&#x7684;&#x57FA;&#x672C;&#x4E0A;&#x6240;&#x6709;&#x7684;&#x4EE3;&#x7801;&#xFF08;&#x5904;&#x7406;util&#x5305;&#x4E0B;&#x7684;&#x9519;&#x8BEF;&#x65E5;&#x5FD7;&#xFF09;&#xFF0C;EventBus&#x672C;&#x8EAB;&#x7684;&#x5B9E;&#x73B0;&#x5E76;&#x4E0D;&#x590D;&#x6742;&#xFF0C;&#x4F7F;&#x7528;&#x8FD0;&#x884C;&#x65F6;&#x7684;&#x53CD;&#x5C04;&#x6280;&#x5DE7;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5355;&#x7EAF;&#x7684;&#x4F7F;&#x7528;&#x6CE8;&#x89E3;&#x7C7B;&#x53EF;&#x80FD;&#x4F1A;&#x62D6;&#x6162;&#x901F;&#x5EA6;&#xFF0C;&#x4F46;&#x662F;&#x901A;&#x8FC7;apt&#x751F;&#x6210;&#x7684;&#x9759;&#x6001;&#x8868;&#x628A;&#x901F;&#x964D;&#x63D0;&#x5347;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x9AD8;&#x5EA6;&#xFF0C;apt&#x7684;&#x751F;&#x6210;&#x5927;&#x5BB6;&#x4E5F;&#x770B;&#x5230;&#x4E86;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x590D;&#x6742;&#xFF0C;&#x51E0;&#x4E4E;&#x5C31;&#x662F;&#x7C7B;&#x578B;&#x68C0;&#x67E5;&#x548C;&#x62FC;&#x63A5;&#x5B57;&#x4E32;&#xFF0C;&#x4E0D;&#x8FC7;&#x60F3;&#x6CD5;&#x51B3;&#x5B9A;&#x4E86;EventBus&#x4ECD;&#x7136;&#x662F;&#x4E00;&#x4E2A;&#x4F18;&#x79C0;&#x7684;&#x5F00;&#x6E90;&#x5E93;&#xFF0C;&#x5E0C;&#x671B;&#x6211;&#x4EEC;&#x5728;&#x4F7F;&#x7528;&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x4ECD;&#x80FD;&#x5BF9;&#x5B9E;&#x73B0;&#x539F;&#x7406;&#x6709;&#x6240;&#x4E86;&#x89E3;&#x3002;","categories":[],"tags":[{"name":"源码阅读","slug":"源码阅读","permalink":"https://lfkdsk.github.io/tags/源码阅读/"}]},{"title":"Learn iOS With Swift 0","slug":"learn-ios-with-swift-0","date":"2016-12-20T14:01:11.000Z","updated":"2017-01-02T07:11:34.000Z","comments":true,"path":"2016/12/20/learn-ios-with-swift-0/","link":"","permalink":"https://lfkdsk.github.io/2016/12/20/learn-ios-with-swift-0/","excerpt":"","text":"Swift&#x4E4B;&#x521D;&#x89C1;let&#x5E38;&#x91CF;&#x503C;let &#x8868;&#x793A;&#x5B9A;&#x4E49;&#x597D;&#x7684;&#x5E38;&#x91CF;&#x503C;&#xFF0C;&#x5E76;&#x4E0D;&#x4E00;&#x5B9A;&#x5728;&#x7F16;&#x8BD1;&#x671F;&#x786E;&#x5B9A;&#x4F46;&#x662F;&#x7684;&#x786E;&#x53EA;&#x80FD;&#x88AB;&#x521D;&#x59CB;&#x5316;&#x4E00;&#x6B21;&#x3002; 123456let lfkdsk = 1000 // &#x76F4;&#x63A5;&#x521D;&#x59CB;&#x5316;let lfkdsk : Int // &#x6CA1;&#x6709;&#x76F4;&#x63A5;&#x521D;&#x59CB;&#x5316;&#x8981;&#x63D0;&#x4F9B;&#x7C7B;&#x578B;&#x63A8;&#x5012;lfkdsk = 100let lfkdsk = 100 + String(1000) // &#x7C7B;&#x578B;&#x8F6C;&#x5316;&#x8981;&#x4F7F;&#x7528;&#x663E;&#x793A;&#x8F6C;&#x6362;let apple = 1000let lfkdsk = &quot;lfkdsk have \\(apple) apples&quot; // &#x7C7B;&#x6BD4;Ruby&#x7684;${} &#x5B57;&#x5178;&#x548C;&#x5143;&#x7EC4;1234var shoppingList = [&quot;fuck &quot;,&quot;you&quot;]var occupations = [&quot;S&quot;:&quot;M&quot;,&quot;F&quot;,&quot;Y&quot;]occupations[&quot;F&quot;] = xxx// &#x8FD9;&#x4E9B;&#x90FD;&#x5F88;&#x597D;&#x7406;&#x89E3; 123// &#x521B;&#x5EFA;&#x7A7A;&#x6570;&#x7EC4;&#x5408;&#x5B57;&#x5178; &#x53EF;&#x4EE5;&#x5199;&#x51FA;&#x7C7B;&#x578B;let emptyArray = [String]() // &#x4F46;&#x662F;&#x521D;&#x59CB;&#x5316;&#x4E4B;&#x540E;&#x5C31;&#x4E0D;&#x80FD;&#x518D;&#x4FEE;&#x6539;&#x4E86;let emptyDictionary = [String: Float]() &#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x663E;&#x793A;&#x63A8;&#x65AD;&#x7684;&#x8BDD;&#x7528;: 12shoppingList = []occupations = [:] &#x6761;&#x4EF6;&#x63A7;&#x5236;&#x4F7F;&#x7528;if&#x548C;switch&#x6765;&#x8FDB;&#x884C;&#x6761;&#x4EF6;&#x64CD;&#x4F5C;&#xFF0C;&#x4F7F;&#x7528;for-in&#x3001;for&#x3001;while&#x548C;repeat-while&#x6765;&#x8FDB;&#x884C;&#x5FAA;&#x73AF;&#x3002;&#x5305;&#x88F9;&#x6761;&#x4EF6;&#x548C;&#x5FAA;&#x73AF;&#x53D8;&#x91CF;&#x62EC;&#x53F7;&#x53EF;&#x4EE5;&#x7701;&#x7565;&#xFF0C;&#x4F46;&#x662F;&#x8BED;&#x53E5;&#x4F53;&#x7684;&#x5927;&#x62EC;&#x53F7;&#x662F;&#x5FC5;&#x987B;&#x7684;&#x3002; &#x540E;&#x52A0;&#xFF1F;&#x8868;&#x793A;&#x53EF;&#x9009;&#x53D8;&#x91CF; 1234let nickName: String? = nillet fullName: String = &quot;John Appleseed&quot;// &#x53E6;&#x4E00;&#x79CD;&#x63D0;&#x4F9B;&#x9ED8;&#x8BA4;&#x503C;&#x7684;&#x65B9;&#x5F0F;let informalGreeting = &quot;Hi \\(nickName ?? fullName)&#x201D; Swich&#x8BED;&#x53E5;&#x652F;&#x6301;&#x591A;&#x79CD;&#x7C7B;&#x578B;&#x548C;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x65E0;&#x9700;break&#x4F46;&#x662F;&#x4E0D;&#x53EF;&#x7F3A;&#x5C11;default: 1234567891011let vegetable = &quot;red pepper&quot;switch vegetable {case &quot;celery&quot;: print(&quot;Add some raisins and make ants on a log.&quot;)case &quot;cucumber&quot;, &quot;watercress&quot;: print(&quot;That would make a good tea sandwich.&quot;)case let x where x.hasSuffix(&quot;pepper&quot;): print(&quot;Is it a spicy \\(x)?&quot;)default: print(&quot;Everything tastes good in soup.&quot;)} for-in&#x8BED;&#x53E5;&#xFF0C;&#x53EF;&#x8BBE;&#x5B9A;key-value&#x503C;&#x7684;&#x6837;&#x5B50;&#xFF1A; 12345678910111213let interestingNumbers = [ &quot;Prime&quot;: [2, 3, 5, 7, 11, 13], &quot;Fibonacci&quot;: [1, 1, 2, 3, 5, 8], &quot;Square&quot;: [1, 4, 9, 16, 25],]var largest = 0for (kind, numbers) in interestingNumbers { for number in numbers { if number &gt; largest { largest = number } }} while&#x8BED;&#x53E5;&#xFF1A; 123456789101112131415161718var n = 2while n &lt; 100 { n = n * 2}print(n)&#xA0;var m = 2repeat { m = m * 2} while m &lt; 100print(m)// &#x4F60;&#x53EF;&#x4EE5;&#x5728;&#x5FAA;&#x73AF;&#x4E2D;&#x4F7F;&#x7528;..&lt;&#x6765;&#x8868;&#x793A;&#x8303;&#x56F4;&#x3002;var total = 0for i in 0..&lt;4 { // 0...&lt;4&#x5305;&#x542B;&#x4E0A;&#x754C; total += i}print(total) &#x51FD;&#x6570;&#x548C;&#x95ED;&#x5305;1234func greet(name: String, day: String) -&gt; String { return &quot;Hello \\(name), today is \\(day).&quot;}greet(name:&quot;Bob&quot;, day: &quot;Tuesday&quot;) &#x5982;&#x4EE3;&#x7801;&#x6240;&#x793A;&#xFF0C;&#x4F7F;&#x7528;&#x53C2;&#x6570;&#x8C03;&#x7528;&#x51FD;&#x6570;&#xFF0C;&#x4F7F;&#x7528;-&gt;&#x8BBE;&#x5B9A;&#x8FD4;&#x56DE;&#x503C;&#xFF08;&#x603B;&#x7684;&#x6765;&#x8BF4;&#x8BED;&#x6CD5;&#x5F88;&#x7C7B;&#x4F3C;&#xFF09;&#x3002; 1234567891011121314151617func calculateStatistics(scores: [Int]) -&gt; (min: Int, max: Int, sum: Int) { var min = scores[0] var max = scores[0] var sum = 0 for score in scores { if score &gt; max { max = score } else if score &lt; min { min = score } sum += score } return (min, max, sum)}let statistics = calculateStatistics(scores:[5, 3, 100, 3, 9])print(statistics.sum)print(statistics.2) &#x8FD4;&#x56DE;&#x591A;&#x4E2A;&#x8FD4;&#x56DE;&#x503C;&#x3002; 123456789func sumOf(numbers: Int...) -&gt; Int { var sum = 0 for number in numbers { sum += number } return sum}sumOf()sumOf(numbers: 42, 597, 12) &#x53EF;&#x53D8;&#x53C2;&#x6570;&#xFF0C;&#x8FD9;&#x4E2A;&#x548C;&#x5F88;&#x591A;&#x8BED;&#x8A00;&#x90FD;&#x5F88;&#x7C7B;&#x4F3C;&#x3002; &#x53EF;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x5185;&#x51FD;&#x6570;&#xFF0C;&#x4F5C;&#x7528;&#x57DF;&#x5305;&#x542B;&#x5916;&#x754C;&#xFF0C;&#x6240;&#x4EE5;&#x4E5F;&#x53EF;&#x4EE5;&#x4F20;&#x9012;&#x51FD;&#x6570;&#xFF1A; 12345678func makeIncrementer() -&gt; ((Int) -&gt; Int) { func addOne(number: Int) -&gt; Int { return 1 + number } return addOne}var increment = makeIncrementer()increment(7) 12345678910111213func hasAnyMatches(list: [Int], condition: (Int) -&gt; Bool) -&gt; Bool { for item in list { if condition(item) { return true } } return false}func lessThanTen(number: Int) -&gt; Bool { return number &lt; 10}var numbers = [20, 19, 7, 12]hasAnyMatches(list: numbers, condition: lessThanTen) &#x51FD;&#x6570;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x4E00;&#x79CD;&#x7279;&#x6B8A;&#x7684;&#x95ED;&#x5305;:&#x5B83;&#x662F;&#x4E00;&#x6BB5;&#x80FD;&#x4E4B;&#x540E;&#x88AB;&#x8C03;&#x53D6;&#x7684;&#x4EE3;&#x7801;&#x3002;&#x95ED;&#x5305;&#x4E2D;&#x7684;&#x4EE3;&#x7801;&#x80FD;&#x8BBF;&#x95EE;&#x95ED;&#x5305;&#x6240;&#x5EFA;&#x4F5C;&#x7528;&#x57DF;&#x4E2D;&#x80FD;&#x5F97;&#x5230;&#x7684;&#x53D8;&#x91CF;&#x548C;&#x51FD;&#x6570;&#xFF0C;&#x5373;&#x4F7F;&#x95ED;&#x5305;&#x662F;&#x5728;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x4F5C;&#x7528;&#x57DF;&#x88AB;&#x6267;&#x884C;&#x7684; - &#x4F60;&#x5DF2;&#x7ECF;&#x5728;&#x5D4C;&#x5957;&#x51FD;&#x6570;&#x4F8B;&#x5B50;&#x4E2D;&#x6240;&#x770B;&#x5230;&#x3002;&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;{}&#x6765;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x533F;&#x540D;&#x95ED;&#x5305;&#x3002;&#x4F7F;&#x7528;in&#x5C06;&#x53C2;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x503C;&#x7C7B;&#x578B;&#x58F0;&#x660E;&#x4E0E;&#x95ED;&#x5305;&#x51FD;&#x6570;&#x4F53;&#x8FDB;&#x884C;&#x5206;&#x79BB;&#x3002; 12345numbers.map({ (number: Int) -&gt; Int in // &#x533F;&#x540D;&#x95ED;&#x5305; &#x4F7F;&#x7528; in &#x533A;&#x5206; let result = 3 * number return result}) 1234567891011var numbers = [20, 19, 7, 12]numbers.map({ (number :Int) -&gt; (Bool) in let result = number % 2 != 0; return result;})numbers.sort{ $0 &gt; $1}print(numbers) &#x7C7B;&#x548C;&#x5BF9;&#x8C61;12345678910class Shape { var numberOfSides = 0 func simpleDescription() -&gt; String { return &quot;A shape with \\(numberOfSides) sides.&quot; }}var shape = Shape()shape.numberOfSides = 7var shapeDescription = shape.simpleDescription() &#x7C7B;&#x4E2D;&#x7684;init&#x548C;deinit&#x51FD;&#x6570;&#x662F;&#x6784;&#x9020;&#x51FD;&#x6570;&#x548C;&#x6790;&#x6784;&#x51FD;&#x6570;&#x3002; &#x5B50;&#x7C7B;&#x5728;&#x7C7B;&#x540D;&#x540E;&#x6DFB;&#x52A0;&#x7236;&#x7C7B;&#x7684;&#x540D;&#x79F0;&#xFF0C;&#x51FD;&#x6570;&#x91CD;&#x8F7D;&#x9700;&#x8981;&#x52A0;override&#x6807;&#x7B7E;&#x3002; 1234567891011121314151617181920212223242526class EquilateralTriangle: NamedShape { var sideLength: Double = 0.0&#xA0; init(sideLength: Double, name: String) { self.sideLength = sideLength super.init(name: name) numberOfSides = 3 }&#xA0; var perimeter: Double { get { return 3.0 * sideLength } set { sideLength = newValue / 3 } }&#xA0; override func simpleDescription() -&gt; String { return &quot;An equilateral triagle with sides of length \\(sideLength).&quot; }}var triangle = EquilateralTriangle(sideLength: 3.1, name: &quot;a triangle&quot;)print(triangle.perimeter)triangle.perimeter = 9.9print(triangle.sideLength) &#x6784;&#x9020;&#x5668;&#x6267;&#x884C;&#x4E86;&#x4E09;&#x6B65;&#xFF1A; &#x8BBE;&#x7F6E;&#x5B50;&#x7C7B;&#x58F0;&#x660E;&#x7684;&#x5C5E;&#x6027;&#x503C; &#x8C03;&#x7528;&#x7236;&#x7C7B;&#x7684;&#x6784;&#x9020;&#x5668; &#x6539;&#x53D8;&#x7236;&#x7C7B;&#x7684;&#x5C5E;&#x6027;&#x503C;&#xFF0C;&#x5176;&#x4ED6;&#x7684;&#x5DE5;&#x4F5C;&#x5982;&#x8C03;&#x7528;&#x65B9;&#x6CD5;&#xFF0C;getters&#x548C;setters&#x4E5F;&#x53EF;&#x4EE5;&#x5728;&#x8FD9;&#x4E2A;&#x9636;&#x6BB5;&#x5B8C;&#x6210;&#x3002; 123456789101112131415161718192021class TriangleAndSquare { var triangle: EquilateralTriangle { willSet { square.sideLength = newValue.sideLength } } var square: Square { willSet { triangle.sideLength = newValue.sideLength } } init(size: Double, name: String) { square = Square(sideLength: size, name: name) triangle = EquilateralTriangle(sideLength: size, name: name) }}var triangleAndSquare = TriangleAndSquare(size: 10, name: &quot;another test shape&quot;)print(triangleAndSquare.square.sideLength)print(triangleAndSquare.triangle.sideLength)triangleAndSquare.square = Square(sideLength: 50, name: &quot;larger square&quot;)print(triangleAndSquare.triangle.sideLength) &#x5904;&#x7406;&#x53D8;&#x91CF;&#x7684;&#x53EF;&#x9009;&#x503C;&#x65F6;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x5728;&#x64CD;&#x4F5C;&#xFF08;&#x6BD4;&#x5982;&#x65B9;&#x6CD5;&#x3001;&#x5C5E;&#x6027;&#x548C;&#x5B50;&#x811A;&#x672C;&#xFF09;&#x4E4B;&#x524D;&#x52A0;?&#x3002;&#x5982;&#x679C;?&#x4E4B;&#x524D;&#x7684;&#x503C;&#x662F;nil&#xFF0C;?&#x540E;&#x9762;&#x7684;&#x4E1C;&#x897F;&#x90FD;&#x4F1A;&#x88AB;&#x5FFD;&#x7565;&#xFF0C;&#x5E76;&#x4E14;&#x6574;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x8FD4;&#x56DE;nil&#x3002;&#x5426;&#x5219;&#xFF0C;?&#x4E4B;&#x540E;&#x7684;&#x4E1C;&#x897F;&#x90FD;&#x4F1A;&#x88AB;&#x8FD0;&#x884C;&#x3002;&#x5728;&#x8FD9;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6574;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x53EF;&#x9009;&#x503C;&#x3002; 12let optionalSquare: Square? = Square(sideLength: 2.5, name: &quot;optional square&quot;)let sideLength = optionalSquare?.sideLength &#x679A;&#x4E3E;&#x548C;&#x7ED3;&#x6784;&#x4F53;123456789101112131415161718192021enum Rank: Int { case Ace = 1 case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten case Jack, Queen, King func simpleDescription() -&gt; String { switch self { case .Ace: return &quot;ace&quot; case .Jack: return &quot;jack&quot; case .Queen: return &quot;queen&quot; case .King: return &quot;king&quot; default: return String(self.rawValue) } }}let ace = Rank.Acelet aceRawValue = ace.rawValue &#x679A;&#x4E3E;&#x53EF;&#x4EE5;&#x5305;&#x542B;&#x65B9;&#x6CD5;&#x3002; struct&#x7684;&#x4F7F;&#x7528;&#xFF1A; 123456789struct Card { var rank: Rank var suit: Suit func simpleDescription() -&gt; String { return &quot;The \\(rank.simpleDescription()) of \\(suit.simpleDescription())&quot; }}let threeOfSpades = Card(rank: .Three, suit: .Spades)let threeOfSpadesDescription = threeOfSpades.simpleDescription() &#x7ED3;&#x6784;&#x4F53;&#x548C;&#x7C7B;&#x7684;&#x533A;&#x522B;&#x662F;&#xFF0C;&#x7ED3;&#x6784;&#x4F53;&#x662F;&#x4F20;&#x503C;&#xFF0C;&#x7C7B;&#x662F;&#x4F20;&#x5F15;&#x7528;&#x3002; 1234567891011121314enum ServerResponse { case Result(String, String) case Failure(String)}// &#x5B9E;&#x4F8B;&#x548C;&#x539F;&#x59CB;&#x503C;let success = ServerResponse.Result(&quot;6:00 am&quot;, &quot;8:09 pm&quot;)let failure = ServerResponse.Failure(&quot;Out of cheese.&quot;)&#xA0;switch success {case let .Result(sunrise, sunset): let serverResponse = &quot;Sunrise is at \\(sunrise) and sunset is at \\(sunset).&quot;case let .Failure(message): print(&quot;Failure... \\(message)&quot;)} &#x534F;&#x8BAE;&#x548C;&#x6269;&#x5C55;&#x4F7F;&#x7528;protocol&#x6765;&#x58F0;&#x660E;&#x4E00;&#x4E2A;&#x534F;&#x8BAE;&#xFF0C;&#x5C31;&#x662F;interface&#xFF0C;protocol&#x8FD9;&#x79CD;&#x547D;&#x540D;&#x771F;&#x662F;&#x5947;&#x602A;&#x3002; &#x4F7F;&#x7528;mutating&#x6765;&#x6807;&#x8BB0;Struct&#x4E2D;&#x6539;&#x53D8;&#x5185;&#x5BB9;&#x7684;&#x503C;&#xFF0C;&#x4F7F;&#x7528;extension&#x62D3;&#x5C55;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x5185;&#x5BB9;&#x3002; 1234567891011121314151617181920protocol ExampleProtocol { var simpleDescription: String { get } mutating func adjust()}class SimpleClass: ExampleProtocol { var simpleDescription: String = &quot;A very simple class.&quot; var anotherProperty: Int = 69105 func adjust() { simpleDescription += &quot; Now 100% adjusted.&quot; }}extension Int: ExampleProtocol { var simpleDescription: String { return &quot;The number \\(self)&quot; } mutating func adjust() { self += 42 }}print(7.simpleDescription) &#x9519;&#x8BEF;&#x5904;&#x7406;&#x55EF;&#xFF0C;&#x9996;&#x5148;&#x6709;Error&#x8FD9;&#x4E2A;Interface&#x6765;&#x4EE3;&#x8868;&#x9519;&#x8BEF;&#x4FE1;&#x606F;&#x3002; &#x51FD;&#x6570;&#x540E;&#x6807;&#x8BB0;throw&#x8868;&#x793A;&#x53EF;&#x4EE5;&#x629B;&#x51FA;&#x9519;&#x8BEF;&#x3002; &#x9519;&#x8BEF;&#x5904;&#x7406;&#xFF1A; 12345678910111213func sendToPrinter(printerName: String) throws -&gt; String { if printerName == &quot;Never Has Toner&quot; { throw PrinterError.NoToner } return &quot;Job sent&quot;}do { let printerResponse = try sendToPrinter(&quot;Bi Sheng&quot;) print(printerResponse)} catch { print(error)} 12let printerSuccess = try? sendToPrinter(&quot;Mergenthaler&quot;)let printerFailure = try? sendToPrinter(&quot;Never Has Toner&quot;) defer&#x7ED1;&#x5B9A;&#x51FD;&#x6570;&#x7ED3;&#x5C3E;&#xFF0C;&#x5199;&#x5230;&#x8FD9;&#xFF0C;&#x6211;&#x89C9;&#x5F97;swift&#x8D8A;&#x6765;&#x8D8A;&#x50CF;golang&#x4E86;&#x3002; 1234567891011121314var fridgeIsOpen = falselet fridgeContent = [&quot;milk&quot;, &quot;eggs&quot;, &quot;leftovers&quot;]&#xA0;func fridgeContains(_ food: String) -&gt; Bool { fridgeIsOpen = true defer { fridgeIsOpen = false }&#xA0; let result = fridgeContent.contains(food) return result}fridgeContains(&quot;banana&quot;)print(fridgeIsOpen) &#x6CDB;&#x578B;12345678func repeatItem&lt;Item&gt;(repeating item: Item, numberOfTimes: Int) -&gt; [Item] { var result = [Item]() for _ in 0..&lt;numberOfTimes { result.append(item) } return result}repeatItem(repeating: &quot;knock&quot;, numberOfTimes:4) &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x6CDB;&#x578B;&#x6570;&#x7EC4;&#xFF0C;&#x4F7F;&#x7528;where&#x5B50;&#x53E5;&#x5B9E;&#x73B0;&#x6CDB;&#x578B;&#x7684;&#x7279;&#x5316;&#x3002;","categories":[],"tags":[{"name":"iOS Swift","slug":"iOS-Swift","permalink":"https://lfkdsk.github.io/tags/iOS-Swift/"}]},{"title":"csapp_read_1","slug":"csapp-read-1","date":"2016-12-15T07:34:25.000Z","updated":"2016-12-15T07:34:25.000Z","comments":true,"path":"2016/12/15/csapp-read-1/","link":"","permalink":"https://lfkdsk.github.io/2016/12/15/csapp-read-1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"CSAPP:课后练习-第二章","slug":"csapp-answer-1","date":"2016-12-15T07:34:08.000Z","updated":"2016-12-15T08:28:36.000Z","comments":true,"path":"2016/12/15/csapp-answer-1/","link":"","permalink":"https://lfkdsk.github.io/2016/12/15/csapp-answer-1/","excerpt":"","text":"2.58: &#x628A;&#x539F;&#x6307;&#x9488;&#x5F3A;&#x8F6C;&#x6210;char&#x7C7B;&#x578B;&#x53BB;&#x8BFB;&#x53D6;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#xFF0C;&#x5982;&#x679C;&#x662F;0&#x5C31;&#x662F;&#x5C0F;&#x7AEF;&#xFF0C;1&#x5C31;&#x662F;&#x5927;&#x7AEF;&#x673A; 1234int is_litter_endian(){ int num = 1; return *((char *)&amp;num);} 2.59: 1x &amp; 0XFF | y &amp; ~0XFF; &#x91CD;&#x70B9;&#x5C31;&#x662F;&#x5728;&#x53D6;&#x6A21; 2.60: 123unsigned replace_byte(unsigned x, unsigned char b, int i) { return (x &amp; ~(0xFF &lt;&lt; (i &lt;&lt; 3))) | (b &lt;&lt; (i &lt;&lt; 3));} i = 2; i &lt;&lt; 3 ==&gt; 2 * ( 2 ^ 3) = 16; &#x4E5F;&#x5C31;&#x662F;&#x8BA9;&#x67D0;&#x4E2A;&#x6570;&#x5B57;&#x5DE6;&#x79FB;&#x5341;&#x516D;&#x4F4D;&#xFF0C;&#x56DB;&#x4E2A;&#x4E8C;&#x8FDB;&#x5236;&#x4F4D;. &#x7136;&#x540E;&amp; &#x4E00;&#x4E0B;&#x81EA;&#x7136;&#x5C31;&#x4F1A;&#x628A;&#x4E2D;&#x95F4;&#x7684;&#x90A3;&#x51E0;&#x4F4D;&#x7A7A;&#x51FA;&#x6765;&#x3002; unsigned char &#x672C;&#x8EAB;&#x5C31;&#x53EA;&#x80FD;&#x5B58;8&#x4F4D;&#x6570;&#x636E;&#x6240;&#x4EE5;&#x5199;&#x6B7B;0xFF&#x4E5F;&#x65E0;&#x6240;&#x8C13;&#x3002; 2.61 &#x200B; &#x200B; &#x200B;","categories":[],"tags":[{"name":"CSAPP","slug":"CSAPP","permalink":"https://lfkdsk.github.io/tags/CSAPP/"}]},{"title":"Effective CPP 学习笔记","slug":"eff-cpp-tips","date":"2016-12-12T07:27:51.000Z","updated":"2016-12-27T13:06:59.000Z","comments":true,"path":"2016/12/12/eff-cpp-tips/","link":"","permalink":"https://lfkdsk.github.io/2016/12/12/eff-cpp-tips/","excerpt":"","text":"Effective CPP &#x5B66;&#x4E60;&#x7B14;&#x8BB0; 1.Cpp &#x662F;&#x4E00;&#x4E2A;&#x8BED;&#x8A00;&#x8054;&#x90A6;2.&#x4EE5;const&#xFF0C;enum&#xFF0C;inline&#x66FF;&#x6362; #define&#x9884;&#x5904;&#x7406;&#x5668;&#x4F1A;&#x5E26;&#x6765;&#x8BF8;&#x591A;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x8FD8;&#x662F;&#x6709;&#x5F88;&#x5927;&#x7684;&#x7528;&#x9014;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x6761;&#x4EC5;&#x9002;&#x7528;&#x4E8E;&#x80FD;&#x7528;&#x4EE5;&#x4E0A;&#x4E09;&#x79CD;&#x7684;&#x60C5;&#x51B5;&#x3002; 3.&#x5C3D;&#x53EF;&#x80FD;&#x4F7F;&#x7528;consthigh-level const &#xFF1A;&#x4ECE;&#x53F3;&#x81F3;&#x5DE6;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;const (* &#x53F3;&#x8FB9; &#x6307;&#x9488;&#x81EA;&#x8EAB;&#x662F;const) low-level const &#xFF1A;&#x4ECE;&#x53F3;&#x5411;&#x5DE6;&#x770B;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;const(* &#x5DE6;&#x8FB9; &#x6307;&#x9488;&#x6240;&#x6307;&#x5BF9;&#x8C61;&#x662F;const) const&#x6210;&#x5458;&#x51FD;&#x6570;&#xFF1A;const&#x7684;&#x6210;&#x5458;&#x51FD;&#x6570;&#x4E2D;&#x662F;&#x4E0D;&#x80FD;&#x5BF9;&#x7C7B;&#x672C;&#x8EAB;&#x8FDB;&#x884C;&#x6539;&#x53D8;&#x7684;&#x6240;&#x4EE5;&#x8BF4;&#x662F;bitwish&#x7684;&#xFF0C;mutable&#x53EF;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x3002; &#x4F7F;&#x7528;const&#x6210;&#x5458;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x91CD;&#x8F7D;&#x7684;non-const&#x51FD;&#x6570;: 123456char &amp; operand[] (std::size_t position){ return const_cast&lt;char&amp;&gt;( static_cast&lt;const TextBlock&amp;&gt;(*this) [position]; )} 4.&#x4FDD;&#x8BC1;&#x4F7F;&#x7528;&#x524D;&#x521D;&#x59CB;&#x5316;&#x5BF9;inner type &#x548C;object&#x90FD;&#x8981;&#x5728;&#x4F7F;&#x7528;&#x524D;&#x521D;&#x59CB;&#x5316;&#x3002; &#x4F7F;&#x7528;initializer-list&#x5BF9;&#x7C7B;&#x8FDB;&#x884C;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x9002;&#x7528;&#x8D4B;&#x503C;&#x64CD;&#x4F5C;&#x3002; &#x8DE8;&#x5355;&#x5143;&#x7F16;&#x8BD1;&#x7684;&#x65F6;&#x5019;&#x5E94;&#x8BE5;&#x4F7F;&#x7528;local static &#x66FF;&#x6362; non-local static&#x5426;&#x5219;&#x4F1A;&#x51FA;&#x73B0;&#x521D;&#x59CB;&#x5316;&#x6B21;&#x5E8F;&#x7684;&#x95EE;&#x9898;&#x3002; 1234FileSystem &amp; tfs(){ static FileSystem fs; return fs;} 5.&#x7F16;&#x8BD1;&#x5668;&#x7684;&#x81EA;&#x52A8;&#x6784;&#x9020;default-constructor | copy-constructor | copy assignment 6.&#x660E;&#x786E;&#x62D2;&#x7EDD;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x81EA;&#x52A8;&#x6784;&#x9020;&#x5C06;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x51FD;&#x6570;private&#x5316;&#xFF0C;&#x6216;&#x8005;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;private&#x7684;base class 7.virtual &#x6790;&#x6784;&#x51FD;&#x6570; &#x8FD9;&#x8282;&#x7684;&#x8BF4;&#x6CD5;&#x6709;&#x70B9;&#x5947;&#x602A;&#xFF0C;&#x5176;&#x5B9E;&#x91CD;&#x70B9;&#x5728;&#x4E8E;&#x901A;&#x8FC7;base class &#x7684;&#x6307;&#x9488;&#x5220;&#x9664;derived class object &#x65F6;&#x5982;&#x679C;base class&#x5B58;&#x5728;non-virtual &#x6790;&#x6784;&#x51FD;&#x6570;&#xFF0C;&#x5C31;&#x4F1A;&#x5BFC;&#x81F4;derived data &#x5220;&#x9664;&#x9519;&#x8BEF;&#xFF0C;&#x5C31;&#x662F;&#x8FD9;&#x4E2A;&#x539F;&#x56E0;&#x800C;&#x5DF2;&#x3002; virtual &#x6790;&#x6784;&#x51FD;&#x6570;&#x610F;&#x5473;&#x7740;Class&#x9700;&#x8981;&#x652F;&#x6301;&#x591A;&#x6001;&#xFF0C;&#x5E76;&#x4F5C;&#x4E3A;base class. virtual &#x7684;&#x6267;&#x884C;&#x662F;&#x4ECE;&#x5B50;&#x5230;&#x7236;&#x7684;&#xFF0C;&#x4E00;&#x4E2A;non-virual&#x6790;&#x6784;&#x51FD;&#x6570;&#x7684;base class&#x53EF;&#x80FD;&#x4F1A;&#x56E0;&#x4E3A;&#x672A;&#x5B9E;&#x73B0;&#x800C;&#x4EA7;&#x751F;&#x9519;&#x8BEF;&#x3002; &#x57FA;&#x672C;&#x4E0A;STL&#x5E93;&#x7684;&#x4E1C;&#x897F;&#x90FD;&#x6CA1;&#x6709;non-virtual &#x6790;&#x6784;&#x51FD;&#x6570;&#xFF0C;&#x6240;&#x4EE5;&#x4E5F;&#x90FD;&#x4E0D;&#x80FD;&#x7EE7;&#x627F;&#x3002; pure-virtual&#x6790;&#x6784;&#x51FD;&#x6570;&#x4F7F;&#x4E4B;&#x6210;&#x4E3A;&#x62BD;&#x8C61;&#x7C7B;&#x3002; 8.&#x4E0D;&#x5EFA;&#x8BAE;&#x5728;&#x6790;&#x6784;&#x51FD;&#x6570;&#x629B;&#x51FA;&#x5F02;&#x5E38;&#x4F7F;&#x7528;try {...} catch {...}&#x8FDB;&#x884C;&#x6355;&#x83B7;&#xFF0C;&#x7136;&#x540E;&#x4F7F;&#x7528;std::abort();&#x63D0;&#x524D;&#x7ED3;&#x675F;&#xFF0C;&#x6216;&#x8005;&#x662F;&#x541E;&#x6389;&#x5F02;&#x5E38;&#xFF0C;&#x5F53;&#x7136;&#xFF0C;&#x91CD;&#x65B0;&#x8BBE;&#x8BA1;&#x63A5;&#x53E3;&#x4F1A;&#x66F4;&#x597D;&#x3002; 9.&#x4E0D;&#x5728;&#x6784;&#x9020;&#x548C;&#x6790;&#x6784;&#x8FC7;&#x7A0B;&#x4E2D;&#x8C03;&#x7528;virtual&#x51FD;&#x6570;&#x6784;&#x9020;&#x548C;&#x6790;&#x6784;&#x51FD;&#x6570;&#x671F;&#x95F4;derived class&#x5C1A;&#x672A;&#x5F62;&#x6210;&#xFF0C;&#x4F1A;&#x88AB;&#x5F53;&#x6210;&#x662F;base class&#x8FD9;&#x6837;&#x5B50;&#x8C03;&#x7528;&#x4E00;&#x4E2A;p virtual &#x6216;&#x662F;&#x4E00;&#x4E2A; imp virtual&#x51FD;&#x6570;&#x90FD;&#x662F;&#x4F1A;&#x53D1;&#x751F;&#x9519;&#x8BEF;&#x7684;&#x3002;&#x53EF;&#x4EE5;&#x9760;&#x66F4;&#x6539;&#x63A5;&#x53E3;&#xFF0C;&#x4FBF;&#x6210;&#x4E00;&#x4E2A;non-virtual &#x51FD;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x9760;&#x4F20;&#x5165;&#x6570;&#x636E;&#x53BB;&#x4FEE;&#x6539;&#x3002; 10.operator= &#x8FD4;&#x56DE;&amp; *this1234ClassName &amp; operator= (const ClassName &amp; rhs){ ... return *this;} 11.operator= &#x4E2D;&#x5904;&#x7406;&#x81EA;&#x6211;&#x8D4B;&#x503C;=&#x7684;&#x91CD;&#x8F7D;&#x53EF;&#x80FD;&#x4F1A;&#x9047;&#x5230;&#x4E0D;&#x5C0F;&#x5FC3;&#x51FA;&#x73B0;&#x7684;&#x7ED9;&#x81EA;&#x5DF1;&#x8D4B;&#x503C;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x4F1A;&#x53D1;&#x751F;&#x91CD;&#x590D;&#x5220;&#x9664;&#x7684;&#x9519;&#x8BEF;&#x3002; 1if (this == &amp;pointer) { return this;} // &#x8BA4;&#x540C;&#x6D4B;&#x8BD5; 1234567// CAS &#x64CD;&#x4F5C; copy and swapXXX &amp; operator= (XXX llll) // &#x6CE8;&#x610F;&#x662F;pass by valueXXX &amp; operator= (XXX &amp; llll) { XXX temp(llll);// copy swap(llll);// swap return *this;} 12.&#x62F7;&#x8D1D;&#x6784;&#x9020;&#x51FD;&#x6570;&#x8981;&#x5305;&#x542B;&#x6240;&#x6709;&#x7684;&#x503C;13.&#x4EE5;&#x5BF9;&#x8C61;&#x7BA1;&#x7406;&#x8D44;&#x6E90;&#x4E0D;&#x63A8;&#x8350;&#x96F6;&#x6563;&#x7684;delete&#x65B9;&#x6CD5;&#xFF0C;&#x4F7F;&#x7528;&#x5305;&#x62EC;&#x4F46;&#x4E0D;&#x9650;&#x4E8E;shared_ptr &amp; auto_ptr &#x5176;&#x4E2D;&#x540E;&#x8005;&#x4E0D;&#x652F;&#x6301;&#x591A;&#x4EFD;&#x62F7;&#x8D1D;(null)&#xFF0C;&#x5BF9;&#x4E8E;&#x6570;&#x7EC4;&#x5EFA;&#x8BAE;&#x4F7F;&#x7528;STL&#x7684;vector&#x7B49;&#x5BB9;&#x5668;&#xFF0C;&#x4EE5;&#x4E0A;&#x7684;ptr&#x4E0D;&#x652F;&#x6301;&#x6570;&#x7EC4;&#x7684;delete []&#xFF0C;&#x6CE8;&#x610F;&#x4E0D;&#x4F1A;&#x62A5;&#x9519;&#x7684;&#x95EE;&#x9898;&#x3002; 14.&#x8D44;&#x6E90;&#x7BA1;&#x7406;&#x7C7B;&#x7684;Copying&#x8D44;&#x6E90;&#x7BA1;&#x7406;&#x7C7B;&#x7684;&#x5BF9;&#x8C61;&#x7684;&#x62F7;&#x8D1D;&#xFF0C;&#x8981;&#x590D;&#x5236;&#x6240;&#x6709;&#x7684;&#x8D44;&#x6E90;&#xFF0C;&#x6291;&#x5236;&#x62F7;&#x8D1D;&#xFF0C;&#x65BD;&#x884C;&#x5F15;&#x7528;&#x8BA1;&#x6570;&#x3002; shared_ptr&#x63A5;&#x53D7;&#x5220;&#x9664;&#x5668;&#x8BBE;&#x5B9A;&#x51FD;&#x6570;&#x3002; 15.&#x4E3A;&#x8D44;&#x6E90;&#x7BA1;&#x7406;&#x7C7B;&#x63D0;&#x4F9B;&#x539F;&#x59CB;&#x7C7B;&#x578B;&#x7684;&#x8F6C;&#x6362;&#x7C7B;&#x4F3C;shared_ptr.get()&#x7684;&#x662F;&#x663E;&#x793A;&#x8F6C;&#x6362;&#x3002; 123operator xxx() const { return f;} &#x662F;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#x3002;&#x63A8;&#x8350;&#x7B2C;&#x4E00;&#x79CD;&#x3002; 16.new ([]) &#x548C;delete([])&#x914D;&#x5BF9;17.&#x72EC;&#x7ACB;&#x8BED;&#x53E5;&#x5C06;newd&#x5BF9;&#x8C61;&#x653E;&#x5165;&#x667A;&#x80FD;&#x6307;&#x9488;12std::shared_ptr&lt;Widget&gt; pw(new Widget);processWidget(pw, priority()); &#x90FD;&#x5199;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x8BED;&#x53E5;&#x8C03;&#x7528;&#x987A;&#x5E8F;&#x53EF;&#x80FD;&#x6709;&#x95EE;&#x9898;&#x3002; 18.&#x63A5;&#x53E3;&#x66F4;&#x6613;&#x88AB;&#x4F7F;&#x7528;&#xFF0C;&#x66F4;&#x96BE;&#x88AB;&#x8C03;&#x7528;&#x4FC3;&#x8FDB;&#x6B63;&#x786E;&#x4F7F;&#x7528;&#xFF1A;&#x63A5;&#x53E3;&#x4E00;&#x81F4;&#x6027;&#xFF0C;&#x5185;&#x7F6E;&#x7C7B;&#x578B;&#x7684;&#x884C;&#x4E3A;&#x517C;&#x5BB9; &#x963B;&#x6B62;&#x8BEF;&#x7528;&#xFF1A;&#x5EFA;&#x7ACB;&#x65B0;&#x5185;&#x7F6E;&#x7C7B;&#x578B;&#xFF0C;&#x9650;&#x5236;&#x7C7B;&#x578B;&#x4E0A;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x675F;&#x7F1A;&#x5BF9;&#x8C61;&#x503C;&#x3002; 19.Class&#x662F;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x7684;&#x6269;&#x5145;1.&#x5982;&#x4F55;&#x521B;&#x5EFA;&#x548C;&#x9500;&#x6BC1; #16 2.&#x521D;&#x59CB;&#x5316;&#x548C;&#x8D4B;&#x503C; #4 3.&#x503C;&#x4F20;&#x9012; copy-constructor 4.&#x6570;&#x503C;&#x5408;&#x6CD5; setter&#x8FDB;&#x884C;&#x68C0;&#x67E5; 5.&#x7EE7;&#x627F; 6.&#x7C7B;&#x578B;&#x8F6C;&#x6362; operator 7.&#x64CD;&#x4F5C;&#x7B26;&#x548C;&#x51FD;&#x6570;&#x7684;&#x5408;&#x7406;&#x6027; 8.&#x6807;&#x51C6;&#x51FD;&#x6570;&#x7684;&#x6743;&#x9650;&#xFF1F;pub/pri/pro 9.undeclared-interface 10.&#x4E00;&#x822C;&#x5316; &#x4F60;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x6A21;&#x7248; 11.&#x9700;&#x8981;&#x8FD9;&#x4E2A;&#x7C7B;&#xFF1F; &#x6DFB;&#x52A0;&#x5B57;&#x6BB5;&#x548C;&#x65B9;&#x6CD5;&#x53EF;&#x80FD;&#x662F;&#x597D;&#x529E;&#x6CD5; 20. pass-by-reference-to-const to pass-by-value&#x964D;&#x4F4E;&#x65E0;&#x8C13;&#x7684;&#x62F7;&#x8D1D;&#x6784;&#x9020;&#x5F00;&#x9500;&#x3002; &#x4E0D;&#x9002;&#x7528;&#x4E8E;STL&#x8FED;&#x4EE3;&#x5668;&#xFF0F;&#x51FD;&#x6570;&#x5BF9;&#x8C61;&#xFF0F;&#x5185;&#x7F6E;&#x7C7B;&#x578B;&#x3002; 21.&#x5982;&#x679C;&#x4E00;&#x5B9A;&#x8981;&#x8FD4;&#x56DE;&#x5BF9;&#x8C61;&#xFF0C;&#x4E0D;&#x8981;&#x8FD4;&#x56DE;&#x5F15;&#x7528;12345const XXX &amp; operator * (...){ XXX xxx(); return xxx;}// local-object &#x5DF2;&#x7ECF;&#x88AB;&#x56DE;&#x6536;&#x6389;&#x4E86; 12345678910const XXX * operator * (){ XXX * xxx = new XXX(...); return xxx;}// &#x770B;&#x8D77;&#x6765;&#x53EF;&#x4EE5; &#x4F46;&#x662F;&#x4E0D;&#x65B9;&#x4FBF;&#x8C03;&#x7528;&#x8005;&#x6790;&#x6784;XXX x(1) ,y(2),z(3);x * y * z; // &#x4E2D;&#x95F4;&#x751F;&#x6210;&#x7684;&#x6307;&#x9488;&#x6CA1;&#x529E;&#x6CD5;&#x88AB;&#x56DE;&#x6536; 12345678const XXX operator * (...){ Static XXX xxx; ... return xxx;}// &#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x53EA;&#x7528;&#x4E00;&#x6B21;&#xFF0C;&#x6216;&#x8005;&#x8BF4;&#x662F;&#x5206;&#x5F00;&#x7528;&#x7684;&#x5F53;&#x7136;&#x6CA1;&#x95EE;&#x9898; // &#x4F46;&#x662F;&#x5982;&#x679C; x * y * z XXX&#x4F1A;&#x88AB;&#x8FDB;&#x884C;&#x53CD;&#x590D;&#x8986;&#x76D6;// &#x800C;&#x4E14;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x7528;&#x4E00;&#x4E2A;static-array&#x5C31;&#x597D;&#x4E86; &#x5728;&#x8FD9;&#x79CD;&#x5C34;&#x5C2C;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C31;&#x5C3D;&#x91CF;&#x8FDB;&#x884C; pass-by-value&#x5427; 22.&#x5C06;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x58F0;&#x660E;&#x4E3A;privateprotect&#x7684;&#x5C01;&#x88C5;&#x6027;&#x548C;public&#x662F;&#x4E00;&#x6837;&#x7684;&#x3002; 23.&#x4EE5;non-member non-friend&#x51FD;&#x6570;&#x66FF;&#x6362;member&#x51FD;&#x6570;12345678class WebBrowser { void clearEverything();}void clearEverything(const WebBrowser &amp; browser){ ... browser.clearCache();} &#x540E;&#x8005;&#x62E5;&#x6709;&#x66F4;&#x597D;&#x7684;&#x5C01;&#x88C5;&#x6027;&#x3002; 24.&#x5982;&#x679C;&#x67D0;&#x4E2A;&#x51FD;&#x6570;&#x7684;&#x6240;&#x6709;&#x53C2;&#x6570;&#x90FD;&#x8981;&#x8FDB;&#x884C;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#x90A3;&#x5C31;&#x5199;&#x6210;non-member function&#x6BD4;&#x8F83;&#x597D;123Retional temp(2);result = 2 * temp;// &#x8BD5;&#x56FE;&#x8C03;&#x7528;2.operator*(temp) &#x4E0D;&#x53EF;&#x80FD;&#x554A;result = temp * 2;// &#x9700;&#x8981;&#x5BF9;2 &#x8FDB;&#x884C;&#x9690;&#x5F0F;&#x8F6C;&#x6362; &#x6700;&#x597D;&#x5199;&#x6210;&#x3002; 1234567class Rational { ...}// &#x5199;&#x5728;&#x7C7B;&#x5916;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x72EC;&#x7ACB;&#x7684;&#x51FD;&#x6570;const Rational operator*(const Rational &amp; lhs,... rhs){ return Rational(...);} 25.&#x8003;&#x8651;&#x5199;&#x51FA;&#x4E00;&#x4E2A;&#x4E0D;&#x629B;&#x5F02;&#x5E38;&#x7684;Swap&#x51FD;&#x6570;STL&#x9ED8;&#x8BA4;&#x5B9E;&#x73B0;&#x7684;swap&#x51FD;&#x6570;&#x662F;&#x4E00;&#x4E2A;&#x62F7;&#x8D1D;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x65E5;&#x5E38;&#x4E2D;&#x6709;&#x5F88;&#x591A;&#x7684;&#x7C7B;&#x5B9E;&#x73B0;&#x662F;&#x901A;&#x8FC7;&#x643A;&#x5E26;&#x4E00;&#x4E2A;&#x79C1;&#x6709;&#x6307;&#x9488;&#x6765;&#x5B9E;&#x73B0;&#x4E00;&#x4E9B;&#x529F;&#x80FD;&#x7684;&#x3002; pointer to implementation &#x5B58;&#x50A8;&#x4E00;&#x4E2A;&#x6307;&#x9488;&#x6307;&#x5411;&#x771F;&#x5B9E;&#x6570;&#x636E;&#xFF0C;&#x6211;&#x4EEC;&#x5728;swap&#x7684;&#x65F6;&#x5019;&#x53EA;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x4EA4;&#x6362;&#x6307;&#x9488;&#x7684;&#x64CD;&#x4F5C;&#x5C31;&#x597D;&#x4E86;&#x3002; 1.&#x7C7B;&#x63D0;&#x4F9B;&#x4EA4;&#x6362;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x6BD5;&#x7ADF;&#x662F;private&#x7684;&#x6307;&#x9488; 123456class Widget { void swap (Widget &amp; other){ using std::swap; // &#x901A;&#x8FC7;&#x58F0;&#x660E;&#x901A;&#x77E5;&#x7F16;&#x8BD1;&#x5668;&#x53BB;&#x627E;swap&#x51FD;&#x6570; &#xFF08;STL &amp; local-namespace&#xFF09;. swap(this.pImpl, other.pImpl); }} 123456namespace std{ template&lt;&gt; void swap&lt;Widget&gt;(Widget &amp; a, Widget &amp; b){ a.swap(b); }} &#x518D;&#x5199;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x4E2A;&#x5168;&#x7279;&#x5316;&#x5C31;&#x597D;&#x4E86;&#x3002; &#x521A;&#x624D;&#x7684;&#x90A3;&#x4E2A;&#x662F;class&#x6CA1;&#x6709;&#x8303;&#x578B;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x6CDB;&#x578B;&#x7684;&#x8BDD;&#x5C31;&#x4F1A;&#x9EBB;&#x70E6;&#x4E00;&#x70B9;&#xFF0C;&#x6BD5;&#x7ADF;STL&#x5E93;&#x53EF;&#x662F;&#x4E0D;&#x80FD;&#x505A;&#x504F;&#x7279;&#x5316;&#xFF0C;&#x56E0;&#x4E3A;std&#x662F;STL&#x7684;&#x547D;&#x540D;&#x7A7A;&#x95F4;&#x4F60;&#x4E0D;&#x80FD;&#x518D;&#x5F80;&#x91CC;&#x6CE8;&#x5165;&#x4E86;&#x3002; &#x800C;&#x4E14;CPP&#x53EA;&#x652F;&#x6301;&#x5BF9;&#x4E8E;&#x6A21;&#x7248;&#x7C7B;&#x7684;&#x504F;&#x7279;&#x5316;&#x800C;&#x4E0D;&#x652F;&#x6301;&#x5BF9;&#x6A21;&#x7248;&#x51FD;&#x6570;&#x7684;&#x504F;&#x7279;&#x5316;&#xFF0C;&#x6240;&#x4EE5;&#x5199;&#x7684;&#x65F6;&#x5019;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x4E00;&#x4E0B;&#x3002; 1234template&lt;typename T&gt;void swap&lt;Widget&lt;T&gt;&gt;(Widget&lt;T&gt; &amp; a, Widget&lt;T&gt; &amp; b){ ...}// &#x8FD9;&#x6837;&#x5C31;&#x660E;&#x663E;&#x662F;&#x9519;&#x8BEF;&#x7684; &#x6B63;&#x786E;&#x7684;&#x5199;&#x6CD5;&#xFF0C;&#x5E76;&#x4E14;&#x5199;&#x5728;&#x4E86;&#x4E00;&#x4E2A;&#x548C;class&#x76F8;&#x540C;&#x7684;namespace&#x91CC;&#x9762;&#xFF1A; 123456namespace Fuck { template&lt;typename T&gt; void swap(Widget&lt;T&gt; &amp;a, Widget&lt;T&gt; &amp;b){ a.swap(b); }} &#x8FD9;&#x6837;&#x5B50;&#x5728;using std::swap;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x4F1A;&#x641C;&#x7D22;&#x5230;local-namespace&#x7684;&#x504F;&#x7279;&#x5316;&#x51FD;&#x6570;&#x3002; 26.&#x5EF6;&#x540E;&#x5B9A;&#x4E49;&#x5F0F;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E;&#x6784;&#x9020;&#xFF0F;&#x6790;&#x6784;&#x51FD;&#x6570;&#x90FD;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x4F7F;&#x7528;&#x7684;&#x6D88;&#x8017;&#xFF0C;&#x6240;&#x4EE5;&#x8BF4;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x7684;&#x5B9A;&#x4E49;&#x5E94;&#x8BE5;&#x62D6;&#x5EF6;&#x5230;&#x5F00;&#x59CB;&#x4F7F;&#x7528;&#x5B83;&#x7684;&#x65F6;&#x5019;&#xFF08;&#x53E6;&#x4E00;&#x79CD;&#x89D2;&#x5EA6;&#x8BB2;&#xFF0C;&#x662F;&#x6211;&#x4EEC;&#x80FD;&#x7ED9;&#x4ED6;&#x4E00;&#x4E2A;&#x786E;&#x5B9A;&#x7684;&#x521D;&#x503C;&#x7528;&#x4FE9;&#x521D;&#x59CB;&#x5316;&#x7684;&#x65F6;&#x5019;&#xFF09;&#x3002; 27.&#x51CF;&#x5C11;&#x4F7F;&#x7528;&#x7C7B;&#x578B;&#x8F6C;&#x6362; C++ style-cast const_cast / static_cast / dynamic_cast / reinterpret_cast &#x4F4E;&#x7EA7;&#x8F6C;&#x578B; C style-cast =&gt; C++ style-cast dynamic_cast =&gt; virtual interface 28.&#x907F;&#x514D;&#x8FD4;&#x56DE;Handle&#x6307;&#x5411;class&#x7684;&#x5185;&#x90E8;&#x6210;&#x5206;12345678910111213struct RectData { Point ulhc; Point lrhc;}class Rectangle { public: Point &amp; upperLeft() const { return pData-&gt;ulhc; } Point &amp; lowerRight() const {}; private: std::shared_ptr&lt;RectData&gt; pData;} 123456789class Rectangle { public: const Point &amp; upperLeft() const{ return pData-&gt;ulhc; } const Point &amp; lowerRight() const { }; private: std::shared_ptr&lt;RectData&gt; pData;} &#x907F;&#x514D;&#x8FD4;&#x56DE;handles&#xFF0C;&#x901A;&#x8FC7;*/&amp;&#x6307;&#x5411;&#x7A0B;&#x5E8F;&#x7684;&#x5185;&#x90E8;&#xFF0C;handle&#x53EF;&#x80FD;&#x56DE;&#x6BD4;&#x5BF9;&#x8C61;&#x7684;&#x751F;&#x547D;&#x5468;&#x671F;&#x66F4;&#x957F;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x5B9A;&#x8981;&#x7684;&#x8BDD;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;const&#x3002; 29.&#x4E3A;&#x5F02;&#x5E38;&#x5B89;&#x5168;&#x52AA;&#x529B;&#x662F;&#x503C;&#x5F97;&#x7684;&#x5F53;&#x5F02;&#x5E38;&#x88AB;&#x629B;&#x51FA;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5E26;&#x6709;&#x5F02;&#x5E38;&#x5B89;&#x5168;&#x6027;&#x7684;&#x51FD;&#x6570;&#xFF1A; 1.&#x4E0D;&#x6CC4;&#x9732;&#x4EFB;&#x4F55;&#x8D44;&#x6E90; 2.&#x4E0D;&#x5141;&#x8BB8;&#x6570;&#x636E;&#x8D25;&#x574F; example: 1234567void changeBackground(){ lock(&amp;mutex); delete bgImage; ++imageChanges; bgImage = new Image(imgSrc); unlock(&amp;mutex);} &#x53EA;&#x8981;Image&#x629B;&#x51FA;&#x5F02;&#x5E38;&#xFF0C;&#x4EE5;&#x4E0A;&#x4E24;&#x8005;&#x5C31;&#x90FD;&#x88AB;&#x8FDD;&#x53CD;&#x4E86;&#x3002; 12// Lock ml(&amp;mutex);// &#x6539;&#x6210;&#x8FD9;&#x4E2A;&#x5C31;&#x80FD;&#x4FDD;&#x8BC1;&#x4E92;&#x65A5;&#x5668;&#x88AB;&#x53CA;&#x65F6;&#x91CA;&#x653E; &#x5F02;&#x5E38;&#x5B89;&#x5168;&#x51FD;&#x6570;&#x63D0;&#x4F9B;&#x4E00;&#x4E0B;&#x4E09;&#x4E2A;&#x4FDD;&#x8BC1;&#x4E4B;&#x4E00;&#xFF1A; &#x57FA;&#x672C;&#x627F;&#x8BFA;&#xFF1A;&#x5F02;&#x5E38;&#x88AB;&#x629B;&#x51FA;&#xFF0C;&#x7A0B;&#x5E8F;&#x5185;&#x7684;&#x4EFB;&#x4F55;&#x4E8B;&#x7269;&#x4ECD;&#x7136;&#x4FDD;&#x6301;&#x5728;&#x6709;&#x6548;&#x72B6;&#x6001;&#x4E0B;&#x3002;&#xFF08; &#x72B6;&#x6001;&#x4E5F;&#x662F;&#x4E0D;&#x53EF;&#x4EE5;&#x9884;&#x6599; &#xFF09; &#x5F3A;&#x70C8;&#x4FDD;&#x8BC1;&#xFF1A;&#x8C03;&#x7528;&#x6210;&#x529F;&#x5C31;&#x6210;&#x529F;&#xFF0C;&#x4E0D;&#x6210;&#x529F;&#x5C31;&#x9000;&#x56DE;&#x5230;&#x8C03;&#x7528;&#x4E4B;&#x524D;&#x7684;&#x72B6;&#x6001;&#x3002; &#x4E0D;&#x629B;&#x63B7;&#x4FDD;&#x8BC1;&#xFF1A;&#x627F;&#x8BFA;&#x4E0D;&#x629B;&#x63B7;&#x5F02;&#x5E38;&#x3002; 1234567891011class PrettyMenu { std::shared_ptr&lt;Image&gt; bgImage;}void PrettyMenu::changeBackground(std::istream&amp; imgSrc){ Lock ml(&amp;mutex); bgImage.reset(new Image(imgSrc)); // &#x53D6;&#x6D88;&#x4E86;delete &#x901A;&#x8FC7; shared_ptr&#x6765;&#x5B9E;&#x73B0; // ++ &#x64CD;&#x4F5C; &#x5728;&#x6210;&#x529F;&#x7ED1;&#x5B9A;&#x4E86;&#x4E4B;&#x540E; &#x518D;&#x589E;&#x52A0; ++imageChanges;} CAS &#x7B56;&#x7565; + pimpl idiom&#xFF1A; 12345678910111213141516171819struct PMImpl { shared_ptr&lt;Image&gt; bgImage; int imageChanges;}class PrettyMenu { ... private: Mutex mutex; shared_ptr&lt;PMImpl&gt; pImpl; // &#x5C06;&#x6570;&#x636E;&#x653E;&#x8FDB;&#x6307;&#x9488;&#x4E2D;&#xFF0C;&#x7C7B;&#x4E2D;&#x5B58;&#x50A8;&#x6307;&#x9488;}void PrettyMenu::changeBackground(std::istream &amp; imgSrc){ using std::swap; Lock ml(&amp;mutex); shared_ptr&lt;PMImpl&gt; pNew(new PMImpl(*pImpl)); pNew-&gt;bgImage.reset(new Image(imgSrc)); swap(pImpl, pNew); // &#x4EA4;&#x6362;&#x6307;&#x9488;} CAS&#x7531;&#x4E8E;&#x53EF;&#x80FD;&#x9020;&#x6210;&#x4E0D;&#x5FC5;&#x8981;&#x7684;&#x5F00;&#x9500;&#xFF0C;&#x6240;&#x4EE5;&#x8BF4;&#x4E0D;&#x4E00;&#x5B9A;&#x5BF9;&#x6240;&#x6709;&#x7684;&#x60C5;&#x51B5;&#x90FD;&#x6210;&#x7ACB;&#x3002; &#x9009;&#x62E9;&#x5BF9;&#x6211;&#x4EEC;&#x6574;&#x4E2A;&#x7CFB;&#x7EDF;&#x90FD;&#x6700;&#x4E3A;&#x5F3A;&#x70C8;&#x7684;&#x5F02;&#x5E38;&#x5B89;&#x5168;&#x7B49;&#x7EA7;&#x3002; 30.&#x4E0D;&#x8981;&#x8F7B;&#x7387;&#x7684;&#x4F7F;&#x7528;inlineinline &#x7684;&#x6574;&#x4F53;&#x89C2;&#x5FF5;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;inline&#x7684;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x90FD;&#x4EE5;&#x51FD;&#x6570;&#x672C;&#x4F53;&#x66FF;&#x6362;&#xFF0C;&#x4F1A;&#x589E;&#x52A0;&#x76EE;&#x6807;&#x7801;&#x7684;&#x5927;&#x5C0F;&#x3002;&#x5F53;&#x7136;&#x5982;&#x679C;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#x4E5F;&#x4F1A;&#x76F8;&#x5E94;&#x51CF;&#x5C0F;&#x3002; inline&#x53EA;&#x662F;&#x5BF9;&#x7F16;&#x8BD1;&#x5668;&#x7684;&#x7533;&#x8BF7;&#x800C;&#x975E;&#x5F3A;&#x5236;&#x8C03;&#x7528;&#xFF0C;&#x53EF;&#x4EE5;&#x663E;&#x793A;&#x7533;&#x8BF7;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x9690;&#x5F0F;&#x7533;&#x8BF7;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5199;&#x5728;&#x51FD;&#x6570;&#x4E2D;&#x8FDB;&#x884C;&#x7533;&#x8BF7;&#x3002; inline &#x9002;&#x5408;&#x5C0F;&#x578B;&#x7684;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x578B;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x4EE5;&#x4FBF;&#x4E8E;&#x4E8C;&#x8FDB;&#x5236;&#x5347;&#x7EA7;&#xFF08;binary upgrade&#xFF09; function template &#x4E0D;&#x8981;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x662F;&#x5199;&#x5728;h&#x6587;&#x4EF6;&#x91CC;&#x5C31;inline &#x6784;&#x9020;&#x51FD;&#x6570;&#x4E0D;&#x8981;&#x8F7B;&#x7387;&#x7684;&#x4F7F;&#x7528;inline &#x6784;&#x9020;&#x51FD;&#x6570;&#x7ECF;&#x8FC7;&#x7F16;&#x8BD1;&#x5668;&#x7684;&#x586B;&#x5145;&#x4F1A;&#x589E;&#x52A0;&#x5F88;&#x591A;&#x6211;&#x4EEC;&#x65E0;&#x6CD5;&#x63A7;&#x5236;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x5982;&#x679C;&#x65E5;&#x540E;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#xFF0C;&#x4F1A;&#x9020;&#x6210;&#x6240;&#x6709;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#x7684;&#x5730;&#x65B9;&#x5168;&#x90FD;&#x4F1A;&#x88AB;&#x91CD;&#x65B0;&#x7F16;&#x8BD1; 31.&#x5C06;&#x6587;&#x4EF6;&#x95F4;&#x7684;&#x7F16;&#x8BD1;&#x4F9D;&#x5B58;&#x5173;&#x7CFB;&#x964D;&#x5230;&#x6700;&#x4F4E;&#x4F9D;&#x5B58;&#x5173;&#x7CFB;&#x4F1A;&#x9020;&#x6210;&#x4F9D;&#x8D56;&#x67D0;&#x4E2A;&#x7C7B;&#x7684;&#x6539;&#x53D8;&#x4F1A;&#x9020;&#x6210;&#x4F9D;&#x8D56;&#x7684;&#x6240;&#x6709;&#x7C7B;&#x88AB;&#x91CD;&#x65B0;&#x7F16;&#x8BD1;&#x3002; pimpl idiom &#xFF08; pointer to impletment &#xFF09;&#x63A5;&#x53E3;&#x4E0E;&#x5B9E;&#x73B0;&#x5206;&#x79BB; &#x4F7F;&#x7528;object references | object pointers &#x53EF;&#x4EE5;&#x5C31;&#x4E0D;&#x8981;&#x4F7F;&#x7528; objects &#x5982;&#x679C;&#x80FD;&#x591F;&#x5C3D;&#x91CF;&#x4EE5;class &#x58F0;&#x660E;&#x5F0F;&#x66FF;&#x6362;class &#x5B9A;&#x4E49;&#x5F0F; 123class Data;Data today();void clearAppointments(Data data); &#x5206;&#x5F00;&#x63D0;&#x4F9B;&#x5305;&#x542B;&#x5B9A;&#x4E49;&#x5F0F;&#x548C;&#x58F0;&#x660E;&#x5F0F;&#x7684;&#x5934;&#x6587;&#x4EF6;&#x3002; &#x4F7F;&#x7528;interface&#x7684;&#x65B9;&#x5F0F;&#x53BB;&#x5B9E;&#x73B0;&#x63A5;&#x53E3;&#x5206;&#x79BB;&#xFF08;&#x5305;&#x542B;&#x865A;&#x6790;&#x6784;&#x51FD;&#x6570;&#x548C;&#x7EAF;&#x865A;&#x7684;&#x5B9E;&#x73B0;&#x51FD;&#x6570;&#xFF09; &#x8FD9;&#x4E2A;&#x5730;&#x65B9;&#x6211;&#x7684;&#x7406;&#x89E3;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x5B9E;&#x73B0;&#x53D8;&#x4E86;&#xFF0C;&#x4F9D;&#x8D56;&#x4ED6;&#x7684;&#x7C7B;&#x5C31;&#x4F1A;&#x8FDB;&#x884C;&#x91CD;&#x65B0;&#x7F16;&#x8BD1;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x628A;&#x63A5;&#x53E3;&#x548C;&#x5B9E;&#x73B0;&#x5206;&#x79BB;&#xFF0C;&#x90A3;includes&#x7684;&#x53EF;&#x80FD;&#x5C31;&#x53EA;&#x6709;&#x6846;&#x800C;&#x6CA1;&#x6709;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#xFF0C;&#x90A3;&#x4E48;&#x5982;&#x679C;&#x5B9E;&#x73B0;&#x771F;&#x7684;&#x53D8;&#x4E86;&#xFF0C;&#x4E5F;&#x53EA;&#x662F;&#x5B9E;&#x73B0;&#x7C7B;&#x5F15;&#x53D1;&#x7684;&#x63A5;&#x53E3;&#x7C7B;&#x91CD;&#x65B0; &#x7F16;&#x8BD1;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5C06;&#x8FD9;&#x4E2A;&#x7EE7;&#x7EED;&#x4F20;&#x9012;&#x4E0B;&#x53BB;&#x3002; 32.&#x786E;&#x5B9A;&#x4F60;&#x7684;public&#x7EE7;&#x627F;&#x5851;&#x9020;&#x51FA;is-a&#x5173;&#x7CFB;is-a &#x5176;&#x5B9E;&#x662F;&#x5728;&#x8BF4;&#x6B63;&#x786E;&#x7684;&#x7EE7;&#x627F;&#x5173;&#x7CFB;&#x3002; 33.&#x907F;&#x514D;&#x906E;&#x63A9;&#x7EE7;&#x627F;&#x800C;&#x6765;&#x7684;&#x540D;&#x79F0;&#x7EE7;&#x627F;&#x6DFB;&#x52A0;&#x51FD;&#x6570;&#x4F1A;&#x906E;&#x63A9;&#x7236;&#x7C7B;&#x7684;&#x540C;&#x540D;&#x51FD;&#x6570;&#xFF0C;&#x4E3A;&#x4E86;&#x89E3;&#x51B3;&#x906E;&#x63A9;&#x95EE;&#x9898;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;using Base::xxx();&#x6216;&#x8005;&#x4F7F;&#x7528;forward functions&#xFF0C;&#x901A;&#x8FC7;&#x4E00;&#x5C42;&#x8F6C;&#x63A5;&#x8C03;&#x7528;&#x4E4B;&#x524D;&#x7684;&#x51FD;&#x6570;&#x3002; &#x4E0D;&#x8FC7;&#x5982;&#x679C;&#x662F;virtual &#x51FD;&#x6570;&#x7684;&#x8BDD;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x4E0D;&#x4F7F;&#x7528;override&#x5173;&#x952E;&#x5B57;&#x5462;&#xFF1F; 34.&#x533A;&#x5206;&#x63A5;&#x53E3;&#x7EE7;&#x627F;&#x548C;&#x5B9E;&#x73B0;&#x7EE7;&#x627F;pure virtual functions&#x2019; feature: drived class must redefine them. non-definition in base class. &#x58F0;&#x660E;impure virtual functions&#x7684;&#x76EE;&#x7684;&#xFF1A;&#x8BA9;derived classes &#x7EE7;&#x627F;&#x8BE5;&#x51FD;&#x6570;&#x7684;&#x63A5;&#x53E3;&#x548C;&#x7F3A;&#x7701;&#x5B9E;&#x73B0;&#x3002; 123456789101112131415class Airplane { public: virtual void fly(...);}virtual void Airplane::fly(){ }class ModelA : public Airplane { public:}virtual void ModelA::fly(...){ } 123456789101112131415161718class Airplane { public: virtual void fly(...) = 0; protected: void defaultFly(...);}virtual void Airplane::defaultFly(...){ }class ModelA : public Airplane { public:}virtual void ModelA::fly(...){ Airplane::defaultFly(...);} 12345678910111213141516class Airplane { public: virtual void fly(...) = 0;}virtual void Airplane::fly(...){ }class ModelA : public Airplane { public:}virtual void ModelA::fly(...){ Airplane::fly(...);} &#x6700;&#x540E;&#x4E00;&#x79CD;&#x76F8;&#x6BD4;&#x4E8E;&#x7B2C;&#x4E8C;&#x79CD;&#xFF0C;&#x5F53;&#x7136;&#x662F;&#x4E3A;&#x4E86;&#x6015;&#x591A;&#x52A0;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x53D1;&#x751F;&#x53D8;&#x91CF;&#x540D;&#x6C61;&#x67D3;&#x7684;&#x60C5;&#x51B5;&#x3002;&#x5176;&#x5B9E;&#x5728;&#x73B0;&#x4EE3;cpp&#x4E2D;&#x4F7F;&#x7528;override&#x548C;final&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x8FD9;&#x4E9B;&#x95EE;&#x9898;&#x7684;&#x3002; &#x7EAF;&#x865A;&#x51FD;&#x6570;&#x53EA;&#x7EE7;&#x627F;&#x63A5;&#x53E3;&#xFF1B; &#x865A;&#x51FD;&#x6570;&#x65E2;&#x7EE7;&#x627F;&#x63A5;&#x53E3;&#xFF0C;&#x4E5F;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4EFD;&#x9ED8;&#x8BA4;&#x5B9E;&#x73B0;&#xFF1B; &#x666E;&#x901A;&#x51FD;&#x6570;&#x65E2;&#x7EE7;&#x627F;&#x63A5;&#x53E3;&#xFF0C;&#x4E5F;&#x5F3A;&#x5236;&#x7EE7;&#x627F;&#x5B9E;&#x73B0;&#x3002; 35.&#x8003;&#x8651;virtual&#x51FD;&#x6570;&#x4EE5;&#x5916;&#x7684;&#x5176;&#x4ED6;&#x9009;&#x62E9; Non-Virtual Interface&#x5B9E;&#x73B0;&#x7684;Template Method&#x6A21;&#x5F0F; 1234567891011121314class GameCharater { public: int healthValue() const { ... // do something first int retVal = doHealthValue(); ... // do something later return retVal; } private: virtual int doHealthValue() const { ... }} Wrapper &#x91CD;&#x70B9;&#x5728;&#x4E8E;first&#xFF0F;later&#xFF0C;driven class &#x4F1A;&#x8C03;&#x7528;&#x65B0;&#x7684;&#x7C7B;&#x6240;&#x590D;&#x5199;&#x7684;&#x51FD;&#x6570;&#x4F53;&#x3002; std::function / Function Point &#x5B9E;&#x73B0;Strategy&#x6A21;&#x5F0F; 123456789101112131415class GameCharacter;int defaultHealthCalc(const GameCharacter &amp; gc);class GameCharacter { public: typedef std::function&lt;int(const GameCharacter&amp;)&gt; HealthCalcFunc; // typedef int (*HealthCalcFunc)(const GameCharacter&amp;); explicit GameCharacter(HealthCalcFunc hcf = defaultHealthClac) : hearthFunc(hcf) { } int healthValue() const { return healthFunc(*this); } private: HealthCalcFunc healthFunc;} &#x7B56;&#x7565;&#x6A21;&#x5F0F;&#xFF0C;&#x7C7B;&#x4F3C;&#x7684;&#x60F3;&#x6CD5;&#x5C31;&#x662F;&#x66FF;&#x6362;&#x6267;&#x884C;&#x65B9;&#x6CD5;&#x3002; 36.&#x7EDD;&#x4E0D;&#x91CD;&#x65B0;&#x5B9A;&#x4E49;&#x7EE7;&#x627F;&#x800C;&#x6765;&#x7684;non-virtual&#x51FD;&#x6570;&#x7834;&#x574F;is-a 37.&#x7EDD;&#x4E0D;&#x91CD;&#x65B0;&#x5B9A;&#x4E49;&#x7EE7;&#x627F;&#x800C;&#x6765;&#x7684;&#x7F3A;&#x7701;&#x53C2;&#x6570;&#x503C;dynamic type / static type &#x7684;&#x6982;&#x5FF5; virtual-method depend on dynamic type default-params &#x2014;&gt; static binding &#x4F46;&#x662F;&#x76F4;&#x63A5;&#x5199;&#x4E24;&#x6B21;virtual&#x51FD;&#x6570;&#xFF08;base &amp; driven&#xFF09;&#x662F;&#x5F88;&#x4E0D;&#x5408;&#x7406;&#x7684;&#x8FD8;&#x5E26;&#x7740;&#x4F9D;&#x8D56;&#xFF0C;&#x6240;&#x4EE5;&#x8BF4;&#x90A3;&#x4E2A;NVI&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF1A; 1234567891011121314151617class Shape { public: enum ShapeColor { Red, Green, Blue }; void draw (ShapeColor color = Red) const { doDraw(color); } private: virtual void doDraw(ShapeColor color) const = 0;}class RectShape : public Shape { public: ... private: virtual void doDraw(ShapeColor color) const;} &#x8FD9;&#x6837;defalut&#x5C31;&#x4F9D;&#x9760;&#x4E00;&#x4E2A;non-virtual function&#x4FDD;&#x62A4;&#x4E86;&#x3002; 38.&#x901A;&#x8FC7;&#x590D;&#x5408;&#x5851;&#x9020;&#x51FA;has-a1234567891011class Address { ...}class PhoneNumber { ... }class Person { public: ... private: std::string name; Address address; PhoneNumber voiceNumber; PhoneNumber faxNumber;} &#x590D;&#x5408;&#x7684;&#x542B;&#x4E49;has a 39.&#x660E;&#x667A;&#x800C;&#x5BA1;&#x614E;&#x7684;&#x4F7F;&#x7528;private&#x7EE7;&#x627F;private&#x7EE7;&#x627F;&#x4E0D;&#x610F;&#x5473;&#x7740;is-a&#x7ED3;&#x6784;&#xFF0C;&#x800C;&#x610F;&#x5473;&#x7740;implemented-in-terms-of(&#x6839;&#x636E;&#x67D0;&#x7269;&#x5177;&#x8C61;&#x51FA;)&#x3002; &#x4E3A;&#x4E86;&#x91C7;&#x7528;base class&#x7684;&#x67D0;&#x4E9B;&#x5B9E;&#x73B0;&#x4E86;&#x7684;&#x7279;&#x6027;&#xFF08;&#x6240;&#x8C13;&#x5B9E;&#x73B0;&#x90E8;&#x5206;&#x88AB;&#x7EE7;&#x627F;&#xFF0C;&#x63A5;&#x53E3;&#x90E8;&#x5206;&#x88AB;&#x7701;&#x7565;&#xFF09;&#x3002; &#x5C3D;&#x91CF;&#x4F7F;&#x7528;&#x590D;&#x5408;&#xFF0C;&#x5FC5;&#x8981;&#x65F6;&#x624D;&#x4F7F;&#x7528;private&#x7EE7;&#x627F;&#xFF08;&#x6240;&#x8C13;&#x5FC5;&#x8981;&#x65F6;&#xFF1A;virtual &amp; protected&#x65B9;&#x6CD5;&#x88AB;&#x7275;&#x626F;&#x8FDB;&#x6765;&#x7684;&#x65F6;&#x5019;&#xFF09;&#x3002; &#x8FD8;&#x6709;&#x5C31;&#x662F;&#x7EC4;&#x5408;&#x6A21;&#x5F0F;&#x65E0;&#x6CD5;&#x91CD;&#x65B0;&#x5B9A;&#x4E49;&#x7EE7;&#x627F;&#x7684;virtual&#x51FD;&#x6570;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x3002; 12345class Timer { public: explicit Timer(int tickFrequency); virtual void onTick() const;} 1234class Widget: private Timer { private: virtual void onTick() const;} bad implement~ 12345678class Widget { private: class WidgetTimer : public Timer { public: virtual void onTick() const; } WidgetTimer timer;} 40.&#x660E;&#x667A;&#x800C;&#x5BA1;&#x614E;&#x7684;&#x4F7F;&#x7528;&#x591A;&#x7EE7;&#x627F;virtual-base-class: &#x975E;&#x5FC5;&#x8981;&#x4E0D;&#x4F7F;&#x7528;virtual bases &#x5982;&#x679C;&#x8981;&#x4F7F;&#x7528;&#x4E0D;&#x8981;&#x5305;&#x542B;&#x6210;&#x5458;&#x53D8;&#x91CF;&#xFF08;&#x7C7B;&#x6BD4;interface&#xFF09; &#x53EF;&#x7528;&#x6765;&#x5904;&#x7406;&#x94BB;&#x77F3;&#x578B;&#x7EE7;&#x627F;&#x7684;&#x6A21;&#x5F0F; 123456class IPerson { public: virtual ~IPerson(); virtual std::string name() const = 0; virtual std::string birthDate() const = 0;} 1class DatabaseID { ....} 123456789class PersonInfo { public: explicit PersonInfo (DatabaseID pid); virtual ~PersonInfo(); virtual const char* theName() const; virtual const char* theBirthDate() const; virtual const char* valueDelimOpen() const; virtual const char* vauleDelimOpen() const;} 12345678910111213class CPerson : public IPerson , private PersonInfo { public: explicit CPerson(Database pid) : PersonInfo(pid) { } virtual std::string name() const { return PersonInfo::theName(); } virtual std::string birthDate() const { return PersonInfo::theBirthDate(); } private: const char* valueDelimOpen() const { return &quot;&quot;; } const char* vauleDelimClose() const { return &quot;&quot;; }} &#x7EC4;&#x5408;&#x6A21;&#x5F0F;&#xFF0C;IPerson&#x7C7B;&#x4F3C;Interface&#x5B9E;&#x73B0;&#x5FC5;&#x987B;&#x5B9E;&#x73B0;&#x7684;&#x63A5;&#x53E3;&#xFF0C;PersonInfo&#x63D0;&#x4F9B;&#x6709;&#x7528;&#x7684;virtual-method&#xFF0C;&#x4F7F;&#x7528;&#x591A;&#x91CD;&#x7EE7;&#x627F;&#x7684;&#x4E00;&#x4E2A;&#x4F18;&#x52BF;&#x3002; 41.&#x4E86;&#x89E3;&#x9690;&#x5F0F;&#x63A5;&#x53E3;&#x548C;&#x7F16;&#x8BD1;&#x671F;&#x591A;&#x6001; class &#x548C; template &#x90FD;&#x652F;&#x6301;&#x63A5;&#x53E3;&#x548C;&#x591A;&#x6001; &#x5BF9;classes&#x800C;&#x8A00;&#x63A5;&#x53E3;&#x662F;&#x663E;&#x5F0F;&#x7684;&#xFF0C;&#x4EE5;&#x51FD;&#x6570;&#x7B7E;&#x540D;&#x4E3A;&#x4E2D;&#x5FC3;&#xFF0C;&#x591A;&#x6001;&#x901A;&#x8FC7;virtual&#x51FD;&#x6570;&#x53D1;&#x751F;&#x5728;&#x8FD0;&#x884C;&#x671F; &#x5BF9;template&#x53C2;&#x6570;&#x800C;&#x8A00;&#x63A5;&#x53E3;&#x5F0F;&#x9690;&#x5F0F;&#x7684;&#xFF0C;&#x5960;&#x57FA;&#x4E8E;&#x6709;&#x6548;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x591A;&#x6001;&#x5219;&#x662F;&#x901A;&#x8FC7;template&#x5177;&#x73B0;&#x5316;&#x548C;&#x51FD;&#x6570;&#x51B2;&#x5728;&#x89E3;&#x6790;&#x53D1;&#x751F;&#x4E8E;&#x7F16;&#x8BD1;&#x671F; 42.&#x4E86;&#x89E3;typename&#x7684;&#x53CC;&#x91CD;&#x542B;&#x4E49;1234567891011template&lt;typename T&gt; class Widget;template&lt;class T&gt; class Widget; // &#x5176;&#x4E2D;&#x7684; class &#x548C; typename &#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x533A;&#x522B;template&lt;typename C&gt;void print2nd(const C &amp; container) { // &#x8FD9;&#x6BB5;cpp&#x4EE3;&#x7801;&#x662F;&#x6709;&#x9519;&#x7684; if(container.size() &gt;= 2) { C::const_iterator iter(container.begin()); // C:const_iterator &#x4ECE;&#x5C5E;&#x6027;&#x7C7B;&#x578B;&#xFF08;&#x4F9D;&#x8D56;C&#xFF09; ++iter; int value = *iter; // int &#x975E;&#x4ECE;&#x5C5E;&#x6027;&#x7C7B;&#x578B; &#xFF08;&#x4E0D;&#x4F9D;&#x8D56;C&#xFF09; std::cout &lt;&lt; value; }} &#x7F16;&#x8BD1;&#x5668;&#x6CA1;&#x529E;&#x6CD5;&#x5206;&#x6790;&#x51FA;C::const_iterator&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#xFF0C;&#x6240;&#x4EE5;&#x8BF4;&#x8981;&#x8BA9;&#x6211;&#x4EEC;&#x901A;&#x8FC7;&#x624B;&#x52A8;&#x7F6E;&#x9876;&#x7684;&#x65B9;&#x5F0F;&#x53BB;&#x7ED9;compiler&#x63D0;&#x4F9B;&#x8FD9;&#x4E2A;&#x6D88;&#x606F;&#x3002; &#x6B63;&#x786E;&#x7684;&#x5199;&#x6CD5;&#xFF1A; 1234567if(container.size() &gt; 2) { typename C::const_container iter(container.begin());}//////////template&lt;typename C&gt; // &#x63D0;&#x4F9B;&#x7C7B;&#x578B;&#x4FE1;&#x606F; &#xFF08;&#x4E0D;&#x5141;&#x8BB8;&#x4F7F;&#x7528;typename &#xFF0C;&#x5E76;&#x975E;&#x4ECE;&#x5C5E;&#x7C7B;&#x578B;&#xFF09; &#xFF08;&#x5141;&#x8BB8;&#x4F7F;&#x7528;typename&#xFF09;void print2nd(const C container , const typename C::const_container iter); &#x53E6;&#x5916;&#xFF1A; 12345678template&lt;typename T&gt;class Derived : public Base&lt;T&gt; :: Nested { // base class list &#x4E2D;&#x4E0D;&#x5141;&#x8BB8;typename public: explicit Derived(int x) : Base&lt;T&gt; :: Nested(x) { // mem.init.list &#x4E2D;&#x4E0D;&#x5141;&#x8BB8; typename typename Base&lt;T&gt;::Nested temp; // &#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;base class&#x7684;&#x4FEE;&#x9970;&#x7B26;&#x52A0;&#x4E0A;typename }} typedef&#x7684;&#x4F8B;&#x5B50;&#xFF1A; 123456template&lt;typename T&gt; void workWithInterator(IterT iter) { // iterator &#x7684;item&#x7C7B;&#x578B; typedef typename std::iterator_traits&lt;IterT&gt;:: value_type value_type; value_type temp(*iter); } 43.&#x5B66;&#x4E60;&#x5904;&#x7406;&#x6A21;&#x7248;&#x5316;&#x57FA;&#x7C7B;&#x5185;&#x7684;&#x540D;&#x79F0;example: 12345678910111213141516171819202122232425262728class CompanyA { public: void sendClearText(... ); void sendEncrypted(... );}class CompanyB { public: void sendClearText(... ); void sendEncrypted(... );}class MsgInfo { ... };template&lt;typename Company&gt; class MsgSender { public: ... void sendClear(const MsgInfo &amp; info) { std::string msg; // info ===&gt; message Company c; s.sendClearText(msg); } void sendSecret(const MesgInfo &amp; info) { ... }} 123456789template&lt;typename Company&gt;class LoggingMegSender : public MsgSender&lt;Company&gt; { public: void sendClearMsg(const MsgInfo &amp; info) { /// msg to log sendClear(info); // &#x8C03;&#x7528;base &#x51FD;&#x6570;&#x65E0;&#x6CD5;&#x7F16;&#x8BD1;&#x901A;&#x8FC7; /// msg to log }} &#x56E0;&#x4E3A;&#x6CDB;&#x578B;&#x7C7B;&#x6709;&#x53EF;&#x80FD;&#x88AB;&#x4EE5;&#x67D0;&#x79CD;&#x5F62;&#x5F0F;&#x7279;&#x5316;&#xFF0C;&#x6240;&#x4EE5;compiler &#x6CA1;&#x529E;&#x6CD5;&#x786E;&#x5B9A;&#x662F;&#x4E0D;&#x662F;&#x771F;&#x7684;&#x53EF;&#x4EE5;&#x8C03;&#x7528;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x3002; &#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x6709;&#x4E09;&#x79CD;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x7684;&#x65B9;&#x6CD5;&#xFF1A; 123this-&gt;sendClear(info);// 1using MsgSender&lt;Company&gt;::sendClear;// &#x901A;&#x77E5;compile&#x5047;&#x8BBE;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5; 2MsgSender&lt;Company&gt;::sendClear(info);// &#x5047;&#x8BBE;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x88AB;&#x7EE7;&#x627F;&#x4E0B;&#x6765;&#x4E86; 3 3&#x5BF9;virtual-method&#x5F88;&#x4E0D;&#x5229;&#x3002; 44.&#x5C06;&#x53C2;&#x6570;&#x65E0;&#x5173;&#x4EE3;&#x7801;&#x8FC1;&#x51FA;&#x6A21;&#x7248; &#x6838;&#x5FC3;&#x5C31;&#x662F;&#x9632;&#x6B62;&#x65E0;&#x8C13;&#x91CD;&#x590D;&#x7684;&#x7F16;&#x8BD1;&#x671F;&#x7279;&#x5316; 12345678910template&lt;typename T, std::size_t n&gt;//T&#x4E3A;&#x6570;&#x636E;&#x7C7B;&#x578B;&#xFF0C;n&#x4E3A;&#x77E9;&#x9635;&#x5927;&#x5C0F; class SquareMatrix{ public: &#x2026;&#x2026; void invert();//&#x6C42;&#x9006;&#x8FD0;&#x7B97; }; SquareMatrix&lt;double,5&gt; sm1; sm1.invert();//&#x8C03;&#x7528;SquareMatrix&lt;double,5&gt;::invert SquareMatrix&lt;double,10&gt; sm2; sm2.invert();//&#x8C03;&#x7528;SquareMatrix&lt;double,10&gt;::invert &#x5BF9;&#x591A;&#x4E2A;size_t&#x90FD;&#x8FDB;&#x884C;&#x4E86;&#x6CDB;&#x5316;&#x3002; 1234567891011121314151617181920template&lt;typename T&gt; class SquareMatrixBase{ protected: SquareMatirxBase(std::size_t n,T* pMem) :size(n), pData(pMem){} void setDataPtr(T* ptr) {pData=ptr;} &#x2026;&#x2026; private: std::size_t size; T* pData; }; template&lt;typename T, std::size_t n&gt; class SquareMatrix: private SquareMatrixBase&lt;T&gt;{ public: SquareMatrix() :SquareMatrixBase&lt;T&gt;(n, data){} &#x2026;&#x2026; private: T data[n*n]; }; &#x8FD9;&#x4E48;&#x6539;&#x52A8;&#x4E4B;&#x540E;&#xFF0C;&#x5C31;&#x4F1A;&#x6709;&#x591A;&#x4E2A;&#x7C7B;&#x578B;&#x57FA;&#x4E8E;&#x4E00;&#x4E2A;Base&#x7C7B;&#x7684;&#x6CDB;&#x5316;&#x7C7B;&#x578B;&#x3002; 45.&#x8FD0;&#x7528;&#x6210;&#x5458;&#x51FD;&#x6570;&#x6A21;&#x7248;&#x63A5;&#x53D7;&#x6240;&#x6709;&#x517C;&#x5BB9;&#x7C7B;&#x578B;&#x6A21;&#x7248;&#x7684;&#x6CDB;&#x5316;&#x7C7B;&#x578B;&#xFF0C;base &amp; driver &#x4E4B;&#x95F4;&#x5E76;&#x4E0D;&#x5B58;&#x5728;&#x7EE7;&#x627F;&#x5173;&#x7CFB;&#xFF0C;&#x4F8B;&#x5982;&#x539F;&#x751F;&#x88AB;shared_ptr&#x5305;&#x88C5;&#x4E4B;&#x540E;&#x5C31;&#x5F88;&#x96BE;&#x529E;&#x3002; &#x4F7F;&#x7528;&#x6CDB;&#x5316;&#x7684;&#x8F6C;&#x5316;&#x51FD;&#x6570;: 123456789template&lt;typename T&gt;class SmartPtr { public: template&lt;typename U&gt; SmartPtr(const SmartPtr&lt;U&gt; &amp; other) : heldPtr(other.get()) { ... } T* get() const { return heldPtr; } private: T* heldPtr;} &#x652F;&#x6301;&#x4ECE;T-&gt;U&#x7684;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#xFF0C;&#x5E76;&#x4E14;&#x901A;&#x8FC7;heldPtr(other.get()) &#x7684;&#x9690;&#x5F0F;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#x4FDD;&#x8BC1;&#x4E86;&#x4E0D;&#x4F1A;&#x4E71;&#x8F6C;&#x6362;&#x3002; &#x6A21;&#x7248;&#x6CDB;&#x5316;&#x7684;&#x62F7;&#x8D1D;&#x6784;&#x9020;&#x548C;&#x8D4B;&#x503C;&#x548C;&#x539F;&#x751F;&#x7684;&#x6CA1;&#x6709;&#x5173;&#x7CFB;&#x3002; 46.&#x9700;&#x8981;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#x65F6;&#x8BF7;&#x4E3A;&#x6A21;&#x7248;&#x5B9A;&#x4E49;&#x975E;&#x6210;&#x5458;&#x51FD;&#x6570; &#x9996;&#x5148;&#x53C2;&#x8003;T24 12345678910template&lt;typename T&gt;class Rational { public: ... friend const Rational operator* (const Rational &amp; lhs, const Rational &amp; rhs) { return Rational(lhs.numerator() * rhs.numerator(), lhs.denominator() * rhs.denominator()); }} &#x901A;&#x8FC7;&#x53CB;&#x5143;&#x51FD;&#x6570;&#x8FDB;&#x884C;&#x7C7B;&#x578B;&#x63A8;&#x5012;&#xFF0C;&#x5F53;Rational&#x88AB;&#x58F0;&#x660E;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x5DF2;&#x7ECF;&#x88AB;&#x6CDB;&#x5316;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x5BF9;&#x5E94;&#x7684;&#x91CD;&#x5B9A;&#x4E49;&#x5DF2;&#x7ECF;&#x88AB;&#x521B;&#x5EFA;&#x51FA;&#x6765;&#x4E86;&#x3002; &#x8FD9;&#x91CC;&#x53CB;&#x5143;&#x51FD;&#x6570;&#x7684;&#x610F;&#x4E49;&#x5C31;&#x4E0D;&#x662F;&#x8BBF;&#x95EE;&#x79C1;&#x6709;&#x53D8;&#x91CF;&#x4E86;&#xFF0C;&#x800C;&#x662F;&#x4E3A;&#x4E86;&#x63D0;&#x524D;&#x88AB;&#x7279;&#x5316;&#x51FA;&#x6765;&#x3002; 47.&#x8BF7;&#x4F7F;&#x7528;traits class&#x8868;&#x73B0;&#x7C7B;&#x578B;&#x4FE1;&#x606F; &#x4E3B;&#x8981;&#x542B;&#x4E49;&#x662F;&#x7F16;&#x8BD1;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x68C0;&#x67E5; &#x9488;&#x5BF9;&#x4E8E;&#x7C7B;&#x578B;&#x4FE1;&#x606F;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x7684;&#x7C7B;&#x578B;&#x68C0;&#x67E5;&#xFF0C;&#x9760;&#x7684;&#x662F;&#x6A21;&#x7248;&#x7684;&#x8BE6;&#x7EC6;&#x7279;&#x5316;&#x3002; 1234567891011121314151617181920212223242526template&lt;typename IterT, typename DisT&gt; void doAdvance(IterT&amp; iter, Dist d, std::random_access_iterator_tag) { iter+=d; } template&lt;typename IterT, typename DisT&gt; void doAdvance(IterT&amp; iter, Dist d, std::bidirectional_iterator_tag) { if(d&gt;=0) while(d--) ++iter; else while(d++) --iter; } template&lt;typename IterT, typename DisT&gt; void doAdvance(IterT&amp; iter, Dist d, std::input_iterator_tag) { if(d&lt;0) throw std::out_of_range(&quot;Negative distance&quot;); while(d++) --iter; } template&lt;typename IterT,typename DistT&gt; void advance(IterT&amp; iter,DistT d) { doAdvance(iter,d,typename::std::iterator_traits&lt;IterT&gt;::iterator_category(); } &#x672A;&#x5B8C;&#x5F85;&#x7EED;","categories":[],"tags":[{"name":"cpp","slug":"cpp","permalink":"https://lfkdsk.github.io/tags/cpp/"}]},{"title":"写在学伴叁的边上","slug":"the-end-ofx","date":"2016-11-15T04:19:15.000Z","updated":"2016-11-17T00:16:16.000Z","comments":true,"path":"2016/11/15/the-end-ofx/","link":"","permalink":"https://lfkdsk.github.io/2016/11/15/the-end-ofx/","excerpt":"","text":"","categories":[],"tags":[{"name":"总结","slug":"总结","permalink":"https://lfkdsk.github.io/tags/总结/"}]},{"title":"Cpp Tips","slug":"know-cpp-again","date":"2016-11-10T07:11:30.000Z","updated":"2016-11-19T02:02:52.000Z","comments":true,"path":"2016/11/10/know-cpp-again/","link":"","permalink":"https://lfkdsk.github.io/2016/11/10/know-cpp-again/","excerpt":"","text":"&#x7B2C;&#x4E8C;&#x7AE0; &#x8F6C;&#x4E49;&#x5E8F;&#x5217;&#xFF1A; \\ + 1,2,3&#x4F4D;&#x7684;8&#x8FDB;&#x5236;&#x6570; &#x6216; \\x + &#x5168;&#x90E8;&#x7684;16&#x8FDB;&#x5236;&#x6570; &#x6307;&#x5B9A;&#x5B57;&#x9762;&#x91CF;&#x7684;&#x7C7B;&#x578B;&#xFF1A;L&#x2019;a&#x2019; wchar_t , u8&#x2019;hi!&#x2019; utf-8 &#x5B57;&#x7B26;&#x4E32;&#x5B57;&#x9762;&#x91CF; &#x53D8;&#x91CF;&#xFF1A;&#x53D8;&#x91CF;&#x662F;&#x5177;&#x540D;&#x7684;&#xFF0C;&#x53EF;&#x4F9B;&#x7A0B;&#x5E8F;&#x64CD;&#x4F5C;&#x7684;&#x5B58;&#x50A8;&#x7A7A;&#x95F4;&#x3002; const: &#x591A;&#x6587;&#x4EF6;&#x4E4B;&#x95F4;&#x4F20;&#x9012;const &#x5BF9;&#x8C61; &#x8981;&#x5728;&#x521D;&#x59CB;&#x5316;&#x548C;&#x5B9A;&#x4E49;&#x90E8;&#x5206;&#x90FD;&#x7528; extern &#x6807;&#x8BB0; const &#x4E0D;&#x5141;&#x8BB8;&#x5E38;&#x91CF;&#x5F15;&#x7528;&#xFF08;&#x5BF9;&#x5E38;&#x91CF;&#x7684;&#x5F15;&#x7528;&#xFF09;&#x4F46;const&#x80FD;&#x7ED1;&#x5B9A;&#x975E;&#x91CF;&#xFF0C;const&#x80FD;&#x7ED1;&#x5B9A;const 1234567double dval = 3.14;const int &amp;ri = dval;//&#x88AB;&#x8F6C;&#x5316;&#x4E3A;const int temp = dval;const int &amp;ri = temp; &#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5982;&#x679C;&amp;ri &#x4E0D;&#x662F;&#x4E00;&#x4E2A;const&#x7684;&#x5F15;&#x7528;&#x7684;&#x65F6;&#x5019;ri&#x5C31;&#x4F1A;&#x7ED1;&#x5728;temp&#x4E0A;&#xFF0C;&#x5C31;&#x65E0;&#x6CD5;&#x6539;&#x53D8;dval &#x53D8;&#x91CF;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x79CD;&#x884C;&#x4E3A;&#x662F;&#x975E;&#x6CD5;&#x7684;&#x3002; &#x9876;&#x5C42;&#xFF0F;&#x5E95;&#x5C42; const 123int *const curErr; // &#x6307;&#x5411;&#x5E38;&#x91CF;&#x5BF9;&#x8C61;&#x7684;&#x975E;&#x5E38;&#x91CF;&#x6307;&#x9488;const double fuck; // &#x8FD9;&#x4E2A;&#x5C31;&#x662F;&#x4E00;&#x4E2A;const double *const pop = &amp;pip; // &#x6307;&#x5411;&#x5E38;&#x91CF;&#x5BF9;&#x8C61;&#x7684;&#x5E38;&#x91CF;&#x6307;&#x9488; &#x9876;&#x5C42;const&#x8868;&#x793A;&#x6307;&#x9488;&#x662F;&#x4E00;&#x4E2A;const&#xFF0C;&#x5E95;&#x5C42;const&#x8868;&#x793A;&#x6307;&#x9488;&#x7684;&#x6307;&#x5411;&#x5BF9;&#x50CF;&#x662F;&#x4E00;&#x4E2A;const&#x3002;&#x4ECE;&#x53F3;&#x4FA7;&#x5411;&#x5DE6;&#x770B;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x662F;&#x9876;&#x5C42;const&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x662F;&#x5E95;&#x5C42;const&#x3002;&#x9876;&#x5C42;&#x7684;const&#x9650;&#x5236;&#x4E0D;&#x9650;&#x5236;&#x8D4B;&#x503C;&#xFF0C;&#x5E95;&#x5C42;&#x7684;const&#x7684;&#x9650;&#x5236;&#x4E0D;&#x5BB9;&#x5FFD;&#x89C6;&#x3002; top-level const : const &#x4FEE;&#x9970;&#x7684;&#x662F;&#x81EA;&#x8EAB;&#x3002;low-level const : const &#x4FEE;&#x9970;&#x7684;&#x662F;&#x522B;&#x4EBA;&#x3002; &#x4EC0;&#x4E48;&#x53EB;&#x81EA;&#x8EAB;&#xFF0C;&#x4EC0;&#x4E48;&#x53EB;&#x522B;&#x4EBA;&#xFF1F;C++ &#x7684;&#x4E16;&#x754C;&#x91CC;&#xFF1A; POD&#xFF0C;&#x7C7B;&#x5BF9;&#x8C61;&#x90FD;&#x53EA;&#x80FD;&#x662F;&#x201D;&#x81EA;&#x8EAB;&#x201D;&#x6307;&#x9488;&#x53EF;&#x4EE5;&#x662F;&#x81EA;&#x8EAB;(&#x6307;&#x9488;&#x672C;&#x8EAB;)&#xFF0C;&#x53EF;&#x4EE5;&#x662F;&#x522B;&#x4EBA;(&#x6307;&#x5411;&#x522B;&#x4EBA;)&#x3002;&#x5F15;&#x7528;&#x6CA1;&#x6709;&#x81EA;&#x8EAB;&#xFF0C;&#x53EA;&#x80FD;&#x662F;&#x522B;&#x4EBA;&#x3002;(&#x5F15;&#x7528;&#x662F;&#x522B;&#x540D;)&#x6240;&#x4EE5;&#xFF0C;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x4E2A;&#x89C4;&#x5F8B;&#xFF1A; &#x6307;&#x9488;&#xFF0C;&#x53EF;&#x4EE5;&#x662F; top-level const&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x662F; low-level const&#x3002;&#x5F15;&#x7528;&#x53EA;&#x80FD;&#x662F; low-level const&#x3002; &#x4F7F;&#x7528;const auto&#x6307;&#x5B9A;auto&#x7684;&#x7ED3;&#x679C;&#x4E3A;const constexpr &#x6807;&#x8BB0;&#x5E38;&#x91CF;&#x8868;&#x8FBE;&#x5F0F; constexpr &#x80FD;&#x540E;&#x6307;&#x5411;&#x4E00;&#x4E2A;&#x5E38;&#x91CF;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x5F53;&#x88AB;&#x6307;&#x5411;&#x4E00;&#x4E2A;&#x6307;&#x9488;&#x7684;&#x65F6;&#x5019;&#x53EA;&#x80FD;&#x4F5C;&#x4E3A;&#x9876;&#x5C42;const&#x6765;&#x7528; typedef 1234typedef char *pstring;const pstring cstr = 0;const char *cstr = 0; // &#x8FD9;&#x4E0A;&#x4E0B;&#x4E24;&#x53E5;&#x8BDD;&#x7684;&#x610F;&#x601D;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x4E0A;&#x662F;const&#x7C7B;&#x578B;&#x7684;char&#x6307;&#x9488;// &#x4E0B;&#x662F;char&#x7C7B;&#x578B;&#x6307;&#x9488;&#xFF0C;&#x6307;&#x5411;&#x9759;&#x6001;&#x5BF9;&#x8C61;&#x3002; decltype( something ) &#x7C7B;&#x578B;&#x6790;&#x53D6; decltype( ( var )) &#x8FD9;&#x91CC;&#x9762;&#x6C38;&#x8FDC;&#x4F1A;&#x88AB;&#x5F53;&#x6210;&#x4E00;&#x4E2A;&#x5F15;&#x7528;&#x6765;&#x5904;&#x7406;&#xFF0C;&#x5C31;&#x662F;&#x5F53;&#x6210;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x53BB;&#x89E3;&#x6790;&#x3002; decltype( var ) &#x5C31;&#x53EA;&#x662F;&#x62FF;&#x5230;&#x53D8;&#x91CF;&#x7684;&#x7C7B;&#x578B; &#x7B2C;&#x4E09;&#x7AE0; string &#x7C7B; + &#x8FD0;&#x7B97;&#x7B26;&#x7684;&#x4E24;&#x4FA7;&#x4E0D;&#x80FD;&#x90FD;&#x662F;&#x5B57;&#x9762;&#x91CF;&#xFF0C;&#x81F3;&#x5C11;&#x8981;&#x6709;&#x4E00;&#x4E2A;&#x662F;string&#x7C7B;&#x578B;&#x7684;&#x5BF9;&#x8C61;&#x3002;","categories":[],"tags":[{"name":"cpp","slug":"cpp","permalink":"https://lfkdsk.github.io/tags/cpp/"}]},{"title":"Handler - Message - Looper多线程的数据交换","slug":"read-handler","date":"2016-10-31T16:27:38.000Z","updated":"2016-10-31T16:29:28.000Z","comments":true,"path":"2016/11/01/read-handler/","link":"","permalink":"https://lfkdsk.github.io/2016/11/01/read-handler/","excerpt":"","text":"Handler - Message - Looper &#x8BF4;&#x8D77;&#x6765;&#x4E5F;&#x5C31;&#x662F;&#x8FD9;&#x4E48;&#x4E00;&#x56DE;&#x4E8B;&#xFF0C;Looper&#x5B9E;&#x73B0;&#x5728;Thread&#x4E2D;&#x8D1F;&#x8D23;&#x4E0D;&#x65AD;&#x7684;&#x5FAA;&#x73AF;&#x76D1;&#x542C;&#x5904;&#x7406;Message&#xFF0C;&#x8981;&#x4E0D;&#x7136;Thread&#x8FD0;&#x884C;&#x5B8C;&#x5C31;&#x81EA;&#x5DF1;&#x5173;&#x4E86;&#x3002;&#x5F53;&#x4F60;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x53EF;&#x4EE5;&#x628A;Looper&#x5173;&#x4E86;&#xFF0C;&#x7EBF;&#x7A0B;&#x5C31;&#x81EA;&#x52A8;&#x8FD0;&#x884C;&#x5B8C;&#x4E86;&#x3002; Message&#x5B9E;&#x73B0;&#x4E86;&#x5E8F;&#x5217;&#x5316;&#x63A5;&#x53E3;&#xFF0C;what&#x533A;&#x5206;&#x7C7B;&#x578B;&#xFF0C;arg&#x7684;&#x53C2;&#x6570;&#x4F7F;&#x7528;&#x7B80;&#x5355;&#x7684;&#x6574;&#x5F62;&#xFF0C;obj&#x5B58;&#x50A8;&#x5BF9;&#x8C61;,data&#x5B58;&#x50A8;&#x4E00;&#x4E2A;bundle&#xFF0C;target&#x662F;&#x4E00;&#x4E2A;Handler&#x3002;&#x5269;&#x4E0B;&#x7684;&#x5C31;&#x662F;&#x641E;&#x4E86;&#x4E2A;&#x5BF9;&#x8C61;&#x6C60;&#x56DE;&#x6536;Message&#xFF0C;&#x6240;&#x4EE5;&#x624D;&#x4F1A;&#x63A8;&#x8350;&#x7528;Message.obtain()&#x6765;&#x65B0;&#x5EFA;&#xFF0C;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x4ECE;&#x56DE;&#x6536;&#x6C60;&#x91CC;&#x62FF;&#x4E1C;&#x897F;&#x3002; &#x603B;&#x4E4B;&#x6CA1;&#x4EC0;&#x4E48;&#x597D;&#x8BF4;&#x7684;&#x3002; Looper123456789101112131415class LooperThread extends Thread { public Handler mHandler; public void run() { Looper.prepare(); mHandler = new Handler() { public void handleMessage(Message msg) { // process incoming messages here } }; Looper.loop(); }} &#x6CE8;&#x91CA;&#x91CC;&#x9762;&#x7ED9;&#x51FA;&#x4E86;&#x7C7B;&#x4F3C;&#x8FD9;&#x6837;&#x7684;demo&#xFF0C;&#x6211;&#x4EEC;&#x53D1;&#x73B0;Looper&#x7684;&#x4F7F;&#x7528;&#x90FD;&#x662F;&#x9759;&#x6001;&#x7C7B;&#x7684;&#x8C03;&#x7528;&#x3002;&#x91CC;&#x9762;&#x4F7F;&#x7528;&#x4E86;ThreadLocal&#x5B58;&#x50A8;&#x533A;&#x5206;&#x5404;&#x4E2A;&#x7EBF;&#x7A0B;&#x7684;Looper&#x3002;&#x91CC;&#x9762;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;MessageQueue&#xFF08;&#x6D88;&#x606F;&#x961F;&#x5217;&#xFF09;&#x4E3A;Message&#x4EFB;&#x52A1;&#x8FDB;&#x884C;&#x7F16;&#x961F;&#x3002;&#x4ED6;&#x53EB;&#x961F;&#x5217;&#x4F46;&#x5176;&#x5B9E;&#x662F;&#x4E2A;&#x5355;&#x94FE;&#x8868;&#x3002;&#x6211;&#x4EEC;&#x6CE8;&#x610F;&#x5230;enqueueMessage&#xFF08;&#x2026;&#xFF09;&#x5B9E;&#x9645;&#x4E0A;&#x5C31;&#x662F;&#x4E2A;&#x5355;&#x94FE;&#x8868;&#x6309;&#x7167;&#x65F6;&#x95F4;&#x7684;&#x63D2;&#x5165;&#x8FC7;&#x7A0B;&#x3002; &#x6838;&#x5FC3;&#x7684;loop();&#x4E2D;&#x8C03;&#x7528;&#x4E86;msg.target.dispatchMessage(msg);&#x53BB;&#x5904;&#x7406;Message&#xFF0C;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x81EA;&#x52A8;&#x5173;&#x8054;&#x4E86;Message&#x7684;Handler&#x3002; &#x9ED8;&#x8BA4;&#x7684;Thread&#x90FD;&#x8981;&#x6709;Looper&#x624D;&#x80FD;&#x7528;Handler&#xFF0C;&#x9664;&#x4E86;&#x4E3B;&#x7EBF;&#x7A0B;&#xFF0C;&#x56E0;&#x4E3A;&#x4E3B;&#x7EBF;&#x7A0B;&#x5728;ActivityThread&#x4E2D;&#x542F;&#x52A8;&#x4E86;Looper&#x3002; 12Looper.prepareMainLooper(); Handler&#x6E90;&#x7801;&#x4E2D;&#x63D0;&#x5230;&#x4E86;Handler&#x7684;&#x4E24;&#x79CD;&#x4F5C;&#x7528;&#xFF0C;&#x6D88;&#x606F;&#x8C03;&#x5EA6;&#x548C;&#x7EBF;&#x7A0B;&#x901A;&#x4FE1;&#x3002; &#x6240;&#x8C13;&#x7684;&#x6D88;&#x606F;&#x8C03;&#x5EA6;&#x5C31;&#x662F;&#x4E00;&#x7CFB;&#x5217;&#x7684;post&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x8D77;&#x5230;&#x5EF6;&#x65F6;&#x6216;&#x8005;&#x5B9A;&#x65F6;&#x5904;&#x7406;&#x7684;&#x5DE5;&#x4F5C;&#x3002; 1234567891011public boolean sendMessageAtTime(Message msg, long uptimeMillis) { MessageQueue queue = mQueue; if (queue == null) { RuntimeException e = new RuntimeException( this + &quot; sendMessageAtTime() called with no mQueue&quot;); Log.w(&quot;Looper&quot;, e.getMessage(), e); return false; } return enqueueMessage(queue, msg, uptimeMillis); } &#x7136;&#x800C;&#x5F52;&#x6839;&#x7ED3;&#x5E95;&#x90FD;&#x4F1A;&#x8C03;&#x7528;&#x6307;&#x5B9A;&#x65F6;&#x95F4;&#x7684;&#x53D1;&#x9001;Message&#xFF0C;&#x800C;&#x5B9E;&#x9645;&#x4E0A;&#x8FD8;&#x662F;&#x7528;&#x4E86;MessageQueue&#x8FDB;&#x884C;&#x4E86;&#x6D88;&#x606F;&#x7F16;&#x961F;&#x3002; 1234567891011public final boolean sendMessageAtFrontOfQueue(Message msg) { MessageQueue queue = mQueue; if (queue == null) { RuntimeException e = new RuntimeException( this + &quot; sendMessageAtTime() called with no mQueue&quot;); Log.w(&quot;Looper&quot;, e.getMessage(), e); return false; } return enqueueMessage(queue, msg, 0);} &#x6D88;&#x606F;&#x7F6E;&#x9876;&#x4E5F;&#x4E0D;&#x8FC7;&#x5C31;&#x662F;&#x63D2;&#x5230;&#x4E86;&#x94FE;&#x8868;&#x5934;&#x8FDB;&#x884C;&#x7ACB;&#x5373;&#x5904;&#x7406;&#x800C;&#x5DF2;&#x3002; &#x503C;&#x5F97;&#x77A9;&#x76EE;&#x7684;&#x662F;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#xFF1A; 12345678910111213141516/** * Handle system messages here. */public void dispatchMessage(Message msg) { if (msg.callback != null) { handleCallback(msg); } else { if (mCallback != null) { if (mCallback.handleMessage(msg)) { return; } } handleMessage(msg); }} &#x5C31;&#x662F;&#x521A;&#x624D;Message&#x8C03;&#x7528;&#x7684;&#x90A3;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x9996;&#x5148;&#x5224;&#x65AD;&#x4E86;&#x4E00;&#x4E0B;msg&#x5E26;&#x6CA1;&#x5E26;&#x81EA;&#x5DF1;&#x7684;callback&#xFF0C;msg&#x7684;callback&#x662F;&#x4E00;&#x4E2A;Runnable&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x63A5;&#x53E3;&#x6DFB;&#x52A0;&#x8981;&#x5904;&#x7406;&#x7684;&#x4E1C;&#x897F;&#x3002;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5462;&#x5C31;&#x770B;&#x770B;mCallback&#x6709;&#x6CA1;&#x6709;&#xFF0C;mCallback&#x662F;&#x4E00;&#x4E2A;Callback&#x63A5;&#x53E3;&#xFF0C;&#x5B9E;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;handleMessage()&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4F60;&#x5728;&#x4F7F;&#x7528;Handler&#x7684;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x63A5;&#x53E3;&#x6765;&#x5BF9;Message&#x505A;&#x4E00;&#x4E9B;&#x5904;&#x7406;&#x3002;&#x5982;&#x679C;&#x8FD8;&#x6CA1;&#x6709;&#x5C31;&#x4F1A;&#x4F20;&#x5230;Handler&#x7EE7;&#x627F;&#x7C7B;&#x7684;handlerMessage()&#x4E2D;&#x3002; Handler&#xFF0D;Message&#xFF0D;Looper&#x673A;&#x5236;&#x662F;&#x4E3A;&#x4E86;&#x89E3;&#x51B3;&#x591A;&#x7EBF;&#x7A0B;&#x4E4B;&#x95F4;&#x7684;&#x901A;&#x4FE1;&#x95EE;&#x9898;&#x800C;&#x521B;&#x7ACB;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;View&#x4E3A;&#x4E86;&#x5FEB;&#x901F;&#x7ED8;&#x5236;&#x90FD;&#x4E0D;&#x662F;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x4E3B;&#x7EBF;&#x7A0B;&#x53EA;&#x80FD;&#x8D1F;&#x8D23;UI&#xFF0C;&#x90A3;&#x8FD8;&#x8981;&#x505A;&#x5F88;&#x591A;&#x590D;&#x6742;&#x7684;&#x5DE5;&#x4F5C;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x9700;&#x8981;&#x5B50;&#x7EBF;&#x7A0B;&#x6765;&#x5904;&#x7406;&#x8FD9;&#x4E9B;&#x4E8B;&#x60C5;&#x4E86;&#x3002;","categories":[],"tags":[{"name":"源码阅读","slug":"源码阅读","permalink":"https://lfkdsk.github.io/tags/源码阅读/"}]},{"title":"如何处理游戏中的碰撞事件","slug":"how-to-solve-co","date":"2016-09-08T08:04:42.000Z","updated":"2016-10-20T01:14:43.000Z","comments":true,"path":"2016/09/08/how-to-solve-co/","link":"","permalink":"https://lfkdsk.github.io/2016/09/08/how-to-solve-co/","excerpt":"","text":"&#x4F5C;&#x8005; &#xFF1A;&#x5218;&#x4E30;&#x607A; &#x4F5C;&#x8005;&#x535A;&#x5BA2;&#xFF1A;&#x82E5;&#x68A6;&#x6D6E;&#x751F; &#x8F6C;&#x8F7D;&#x9700;&#x5F81;&#x5F97;&#x4F5C;&#x8005;&#x672C;&#x4EBA;&#x540C;&#x610F; &#x4E4B;&#x524D;&#x8BD5;&#x7740;&#x5728;Android&#x5E73;&#x53F0;&#x5C01;&#x88C5;&#x4E86;&#x4E00;&#x4E2A;&#x8F7B;&#x91CF;&#x7EA7;&#x7684;&#x6E38;&#x620F;&#x5F00;&#x53D1;&#x6846;&#x67B6;JustWeEngine ,&#x56E0;&#x4E3A;&#x662F;&#x8F7B;&#x91CF;&#x7EA7;&#x7684;&#x6240;&#x4EE5;&#x4E5F;&#x6CA1;&#x60F3;&#x592A;&#x591A;&#xFF0C;&#x5F88;&#x591A;&#x5730;&#x65B9;&#x7684;&#x5904;&#x7406;&#x90FD;&#x4E0D;&#x592A;&#x591F;&#xFF0C;&#x6BD4;&#x5982;&#x5173;&#x4E8E;&#x78B0;&#x649E;&#x4E8B;&#x4EF6;&#x7684;&#x5904;&#x7406;&#xFF0C;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;On2&#x7684;&#x904D;&#x5386;&#xFF0C;&#x524D;&#x4E00;&#x9635;&#x8FD8;&#x88AB;&#x5410;&#x69FD;&#x4E86;233333&#x3002; &#x5176;&#x5B9E;&#x4F18;&#x5316;On2&#x78B0;&#x649E;&#x7684;&#x601D;&#x8DEF;&#x662F;&#x4E00;&#x800C;&#x8D2F;&#x4E4B;&#x7684;&#xFF0C;&#x5C31;&#x662F;&#x4E0D;&#x53BB;&#x5904;&#x7406;&#x6839;&#x672C;&#x4E0D;&#x53EF;&#x80FD;&#x649E;&#x5728;&#x4E00;&#x8D77;&#x7684;&#x5BF9;&#x8C61;&#x3002;&#x6240;&#x4EE5;&#x5C31;&#x6587;&#x7AE0;&#x8BA8;&#x8BBA;&#x4E00;&#x4E0B;&#x6211;&#x4E86;&#x89E3;&#x7684;&#x5728;&#x6E38;&#x620F;&#x5F00;&#x53D1;&#x4E2D;&#x7ECF;&#x5E38;&#x88AB;&#x4F7F;&#x7528;&#x7684;&#x78B0;&#x649E;&#x673A;&#x5236;&#x3002; &#x793A;&#x4F8B;&#x56FE; &#x56FE;&#x793A;&#x662F;&#x4F7F;&#x7528;&#x4E86;&#x56DB;&#x53C9;&#x6811;&#x8FDB;&#x884C;&#x78B0;&#x649E;&#x5224;&#x65AD;&#x7684;&#x4E00;&#x4E2A;&#x56FE;&#x793A;&#xFF0C;&#x53D8;&#x6210;&#x7D2B;&#x8272;&#x7684;&#x662F;&#x4ECE;&#x56DB;&#x53C9;&#x6811;&#x4E2D;&#x62FF;&#x53D6;&#x7684;&#x79BB;&#x6211;&#x6700;&#x8FD1;&#x7684;&#x53EF;&#x80FD;&#x78B0;&#x649E;&#x5BF9;&#x8C61;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x5904;&#x7406;&#x6700;&#x8FD1;&#x7684;&#x56DB;&#x4E2A;&#x5BF9;&#x8C61;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x8FD9;&#x4E2A;demo&#x611F;&#x8C22;FriceEngine&#x7684;demo&#x3002; &#x7269;&#x4F53;&#x5206;&#x7EC4;&#x5BF9;Engine&#x6240;&#x52A0;&#x8F7D;&#x7684;&#x5BF9;&#x8C61;&#x8FDB;&#x884C;&#x5206;&#x5C42;&#x5904;&#x7406;&#xFF0C;&#x6BCF;&#x5C42;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x5217;&#x8868;&#xFF0C;&#x5BF9;&#x53EF;&#x80FD;&#x6839;&#x672C;&#x4E0D;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x78B0;&#x649E;&#x5904;&#x7406;&#x7684;&#x5BF9;&#x8C61;&#x4E0D;&#x53BB;&#x5904;&#x7406;&#xFF0C;&#x4E0D;&#x4F1A;&#x53D1;&#x751F;&#x78B0;&#x649E;&#x7684;&#x5C42;&#x4E5F;&#x4E0D;&#x53BB;&#x5904;&#x7406;&#xFF0C;&#x8FD9;&#x6837;&#x6211;&#x4EEC;&#x7684;O2&#x7684;&#x590D;&#x6742;&#x5EA6;&#x6CA1;&#x53D8;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x51CF;&#x5C11;&#x4E86;&#x5F88;&#x591A;&#x65E0;&#x7528;&#x7684;&#x78B0;&#x649E;&#x5BF9;&#x8C61;&#xFF0C;&#x800C;&#x6211;&#x4EEC;&#x60F3;&#x8981;&#x4ED6;&#x4EEC;&#x78B0;&#x649E;&#x4E5F;&#x53EF;&#x4EE5;&#x975E;&#x5E38;&#x7B80;&#x5355;&#x7684;&#x5207;&#x6362;&#x3002; &#x6211;&#x5728;JustWeEngine&#x91CC;&#x9762;&#x5C31;&#x8BD5;&#x7740;&#x7528;&#x4E86;&#x7269;&#x4F53;&#x5206;&#x7EC4;&#x7684;&#x65B9;&#x5F0F; 12345678910111213141516171819202122232425262728public enum LayerType { Button, Default } public interface LayerListener { boolean Touch(MotionEvent event); void Collision(BaseSub baseSub); void Update(); void Draw(); } protected LayerType layerType; protected String layerName; // Layer&#x7684;&#x5237;&#x65B0;&#x8303;&#x56F4;&#x4E5F;&#x662F;&#x7ED8;&#x5236;&#x8303;&#x56F4; protected Rect layerField; protected Screen layerScreen; public Layer(LayerType layerType, Screen layerScreen, Rect layerField) { this.setLayerType(layerType); this.layerField = layerField; this.layerScreen = layerScreen; } &#x901A;&#x8FC7;&#x5F15;&#x5165;Layer&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x628A;&#x4E0D;&#x540C;&#x7684;&#x5BF9;&#x8C61;&#x653E;&#x5230;&#x4E0D;&#x540C;&#x7684;&#x7EC4;&#x91CC;&#x9762;&#xFF0C;&#x5206;&#x522B;&#x8FDB;&#x884C;&#x78B0;&#x649E;&#x5904;&#x7406;&#x3002; 12345678910private ArrayList&lt;Layer&gt; e_layers;public interface ScreenListener { void Init(); void Load(); void Update(); void Touch(MotionEvent event);} &#x7136;&#x540E;&#x5728;Screen&#x7C7B;&#x91CC;&#x9762;&#x5C31;&#x4E0D;&#x518D;&#x5904;&#x7406;&#x78B0;&#x649E;&#x4E8B;&#x4EF6;&#xFF0C;&#x800C;&#x662F;&#x7EDF;&#x4E00;&#x7684;&#x5728;Layer&#x4E2D;&#x8FDB;&#x884C;&#x5904;&#x7406;&#x3002; &#x4F46;&#x662F;&#x8FD9;&#x79CD;&#x4E1C;&#x897F;&#x7684;&#x7F3A;&#x70B9;&#x4E5F;&#x5F88;&#x660E;&#x663E;&#xFF0C;&#x5C31;&#x662F;On2&#x6CA1;&#x6709;&#x4ECE;&#x5B9E;&#x8D28;&#x4E0A;&#x88AB;&#x89E3;&#x51B3;&#xFF0C;&#x53EA;&#x662F;&#x7F29;&#x5C0F;&#x4E86;&#x57FA;&#x6570;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E00;&#x5C42;&#x7684;&#x6570;&#x636E;&#x91CF;&#x5927;&#x7684;&#x65F6;&#x5019;&#x4ECD;&#x7136;&#x65E0;&#x6548;&#x3002; &#x5C4F;&#x5E55;&#x5206;&#x5272;&#x76F8;&#x6BD4;&#x4E8E;&#x901A;&#x8FC7;&#x5BF9;&#x8C61;&#x7684;&#x904D;&#x5386;&#x62FF;&#x5230;&#x5177;&#x4F53;&#x5750;&#x6807;&#x8FDB;&#x884C;&#x5BF9;&#x5E94;&#x7684;&#x6BD4;&#x8F83;&#xFF0C;&#x4F7F;&#x7528;&#x5C4F;&#x5E55;&#x5206;&#x5272;&#x660E;&#x663E;&#x662F;&#x4E00;&#x79CD;&#x66F4;&#x4E3A;&#x6B63;&#x5E38;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x901A;&#x8FC7;&#x5C06;&#x5C4F;&#x5E55;&#x5206;&#x5272;&#x6210;&#x4E00;&#x4E9B;&#x5C0F;&#x7684;&#x683C;&#x5B50;&#xFF0C;&#x6BCF;&#x4E2A;&#x683C;&#x5B50;&#x7BA1;&#x7406;&#x5728;&#x81EA;&#x5DF1;&#x533A;&#x57DF;&#x5185;&#x7684;&#x64CD;&#x4F5C;&#x5BF9;&#x8C61;&#x3002; &#x4E3B;&#x8981;&#x7684;&#x78B0;&#x649E;&#x68C0;&#x6D4B;&#x65B9;&#x6CD5;&#x662F;&#x5212;&#x5206;&#x533A;&#x57DF;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x628A;&#x683C;&#x5B50;&#x653E;&#x5927;&#x5230;&#x8D85;&#x8FC7;&#x6240;&#x64CD;&#x4F5C;&#x5BF9;&#x8C61;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x4F7F;&#x683C;&#x5B50;&#x80FD;&#x591F;&#x5305;&#x542B;&#x6700;&#x5927;&#x7684;&#x5BF9;&#x8C61;&#xFF08;&#x4EE5;&#x4E2D;&#x5FC3;&#x70B9;&#x6765;&#x5224;&#x5B9A;&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x7684;&#x5224;&#x5B9A;&#x903B;&#x8F91;&#x5C31;&#x5341;&#x5206;&#x7B80;&#x5355;&#x4E86;&#xFF0C;&#x6BCF;&#x4E2A;&#x683C;&#x5B50;&#x5185;&#x90E8;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6709;&#x78B0;&#x649E;&#x4E8B;&#x4EF6;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x90BB;&#x8FD1;&#x7684;&#x683C;&#x5B50;&#x4E4B;&#x95F4;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#x78B0;&#x649E;&#x4E8B;&#x4EF6;&#x3002;&#x8FD9;&#x91CC;&#x6709;&#x7684;&#x4EBA;&#x662F;&#x6BD4;&#x8F83;&#x4E34;&#x8FD1;&#x5404;&#x65B9;&#x4F4D;&#x7684;&#x516B;&#x4E2A;&#x65B9;&#x5757;&#xFF0C;&#x4F46;&#x5176;&#x5B9E;&#x904D;&#x5386;&#x7684;&#x8BDD;&#x4ECE;&#x5DE6;&#x4E0A;&#x89D2;&#x5F00;&#x59CB;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x6BD4;&#x8F83;&#x53F3;&#x4FA7;&#xFF0C;&#x4E0B;&#x65B9;&#xFF0C;&#x548C;&#x53F3;&#x4E0B;&#x7684;&#x653E;&#x5757;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; &#x90A3;&#x4E48;&#x5982;&#x4F55;&#x5224;&#x65AD;&#x7269;&#x4F53;&#x5728;&#x54EA;&#x4E2A;&#x65B9;&#x5757;&#x5462;&#xFF0C;&#x4F7F;&#x7528;&#x7B80;&#x5355;&#x7684;&#x5C4F;&#x5E55;&#x5206;&#x5272;&#x662F;&#x6CA1;&#x6709;&#x529E;&#x6CD5;&#x52A8;&#x6001;&#x5904;&#x7406;&#x65B9;&#x5757;&#x5206;&#x914D;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x6BCF;&#x4E00;&#x5E27;&#x7684;&#x5F00;&#x59CB;&#x90FD;&#x4F1A;&#x8FDB;&#x884C;&#x4E00;&#x6B21;On&#x7684;&#x904D;&#x5386;&#x5206;&#x914D;&#xFF0C;&#x5176;&#x5B9E;&#x8FD9;&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x8017;&#x65F6;&#x64CD;&#x4F5C;&#x3002; &#x56DB;&#x53C9;&#x6811;&#x76F8;&#x6BD4;&#x4E8E;&#x5C4F;&#x5E55;&#x5206;&#x5272;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x56DB;&#x53C9;&#x6811;&#x7684;&#x65B9;&#x6CD5;&#x4F1A;&#x66F4;&#x52A0;&#x7075;&#x6D3B;&#x4E00;&#x4E9B;&#x3002;&#x56DB;&#x53C9;&#x6811;&#x7684;&#x6784;&#x6210;&#x5927;&#x6982;&#x9075;&#x5FAA;&#x8FD9;&#x6837;&#x51E0;&#x4E2A;&#x6761;&#x4EF6;&#xFF1A; &#x6BCF;&#x4E2A;&#x975E;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x6709;&#x56DB;&#x4E2A;&#x8282;&#x70B9; &#x56DB;&#x4E2A;&#x8282;&#x70B9;&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x533A;&#x57DF;&#x7684;&#x56DB;&#x4E2A;&#x8C61;&#x9650;&#xFF0C;&#x6BCF;&#x4E2A;&#x8C61;&#x9650;&#x53EF;&#x4EE5;&#x518D;&#x5206; &#x5728;&#x8C61;&#x9650;&#x5185;&#x7684;&#x5BF9;&#x8C61;&#x88AB;&#x5F52;&#x5C5E;&#x4E8E;&#x6B64;&#x8282;&#x70B9;&#xFF0C;&#x8DE8;&#x8C61;&#x9650;&#x7684;&#x5BF9;&#x8C61;&#x88AB;&#x5F52;&#x5230;&#x7236;&#x8282;&#x70B9; &#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x56DB;&#x53C9;&#x6811;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A; (&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x6709;&#x4E00;&#x70B9;Kotlin&#x7684;&#x98CE;&#x683C;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;Javaer &#x662F;&#x80FD;&#x7B80;&#x5355;&#x770B;&#x61C2;&#x7684;&#x7A0B;&#x5EA6;) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157import org.frice.game.obj.PhysicalObjectimport org.frice.game.utils.quad.RectFimport java.util.*/** * QuadTree * @author lfkdsk * Created by liufengkai on 2016/10/4. */class QuadTreeKT { val MAX_OBJECTS = 3 val MAX_LEVELS = 5 var level: Int private var bounds: RectF private val objects: ArrayList&lt;PhysicalObject&gt; private val nodes: Array&lt;QuadTreeKT?&gt; constructor(level: Int, bounds: RectF) { this.level = level this.bounds = bounds } init { this.nodes = kotlin.arrayOfNulls&lt;QuadTreeKT&gt;(4) this.objects = ArrayList&lt;PhysicalObject&gt;() } fun clear() { objects.clear() for (i in nodes.indices) { if (nodes[i] != null) { nodes[i] = null } } } private fun split() { // width &amp; height val subWidth = (bounds.width() / 2) val subHeight = (bounds.height() / 2) // x &amp; y val x = bounds.left val y = bounds.top // split to four nodes nodes[0] = QuadTreeKT(level + 1, RectF((x + subWidth), y, subWidth, subHeight)) nodes[1] = QuadTreeKT(level + 1, RectF(x, y, subWidth, subHeight)) nodes[2] = QuadTreeKT(level + 1, RectF(x, (y + subHeight), subWidth, subHeight)) nodes[3] = QuadTreeKT(level + 1, RectF((x + subWidth), (y + subHeight), subWidth, subHeight)) } /** * &#x83B7;&#x53D6;rect &#x6240;&#x5728;&#x7684; index * @param rectF &#x4F20;&#x5165;&#x5BF9;&#x8C61;&#x6240;&#x5728;&#x7684;&#x77E9;&#x5F62; * * * @return index &#x4F7F;&#x7528;&#x7C7B;&#x522B;&#x533A;&#x5206;&#x6240;&#x5728;&#x8C61;&#x9650; */ private fun getIndex(rectF: PhysicalObject): Int { var index = -1 val verticalMidpoint = bounds.left + bounds.width() / 2 val horizontalMidpoint = bounds.top + bounds.height() / 2 // contain top val topQuadrant = rectF.y &lt; horizontalMidpoint &amp;&amp; rectF.y + rectF.height &lt; horizontalMidpoint // contain bottom val bottomQuadrant = rectF.y &gt; horizontalMidpoint // contain left if (rectF.x &lt; verticalMidpoint &amp;&amp; rectF.x + rectF.width &lt; verticalMidpoint) { if (topQuadrant) { index = 1 } else if (bottomQuadrant) { index = 2 } // contain right } else if (rectF.x &gt; verticalMidpoint) { if (topQuadrant) { index = 0 } else if (bottomQuadrant) { index = 3 } } return index } /** * insert object to tree * @param rectF object */ fun insert(rectF: PhysicalObject) { if (nodes[0] != null) { val index = getIndex(rectF) if (index != -1) { nodes[index]?.insert(rectF) return } } objects.add(rectF) if (objects.size &gt; MAX_OBJECTS &amp;&amp; level &lt; MAX_LEVELS) { // don&apos;t have subNodes // split node if (nodes[0] == null) { split() } var i = 0 while (i &lt; objects.size) { val index = getIndex(objects[i]) if (index != -1) { nodes[index]?.insert(objects.removeAt(i)) } else { // don&apos;t in subNode save to parent node. // eq: object on line i++ } } } } /** * return all the object collision with the object * @param returnObjects return list * * * @param rectF object * * * @return list of collision */ fun retrieve(returnObjects: ArrayList&lt;ArrayList&lt;PhysicalObject&gt;&gt;, rectF: PhysicalObject): List&lt;List&lt;PhysicalObject&gt;&gt; { val index = getIndex(rectF) if (index != -1 &amp;&amp; nodes[0] != null) { nodes[index]?.retrieve(returnObjects, rectF) } returnObjects.add(objects) return returnObjects }} &#x4E0A;&#x9762;&#x7684;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x6BD4;&#x8F83;&#x7684;&#x5BF9;&#x8C61;&#x662F;&#x4E00;&#x4E2A;&#x53EB;PhysicalObject&#x7684;&#x5B9E;&#x4F53;&#x5BF9;&#x8C61;&#xFF0C;&#x5F53;&#x7136;&#x8FD9;&#x662F;&#x6709;&#x8026;&#x5408;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x7EC6;&#x8BFB;&#x4EE3;&#x7801;&#x4F1A;&#x53D1;&#x73B0;&#x5176;&#x5B9E;&#x6211;&#x4EEC;&#x53EA;&#x8981;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x5E26;&#x6709;&#x5750;&#x6807;&#xFF08;&#x76F8;&#x5BF9;&#x4E8E;&#x6E38;&#x620F;&#x4E16;&#x754C;&#xFF09;&#x7684;&#x5BF9;&#x8C61;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x4E0B;&#x9762;&#x6211;&#x4EEC;&#x6765;&#x89E3;&#x91CA;&#x4E00;&#x4E0B;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x3002; &#x9996;&#x5148;&#xFF0C;MAX_OBJECTS &#x548C; MAX_LEVELS &#x5B9A;&#x4E49;&#x4E86;&#x8FD9;&#x9897;&#x56DB;&#x53C9;&#x6811;&#x7684;&#x6240;&#x80FD;&#x5B58;&#x50A8;&#x7684;&#x6700;&#x591A;&#x5BF9;&#x8C61;&#x548C;&#x6700;&#x9AD8;&#x5C42;&#x7EA7;&#x3002;&#x6BCF;&#x4E2A;&#x5C42;&#x7EA7;&#x8282;&#x70B9;&#x542B;&#x6709;&#x4E00;&#x4E2A;RectF&#x5BF9;&#x8C61;&#x4FDD;&#x5B58;&#x5F53;&#x524D;&#x5C42;&#x7EA7;&#x5BF9;&#x5E94;&#x7684;&#x5C4F;&#x5E55;&#x533A;&#x57DF;&#xFF0C;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x6700;&#x591A;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x4E3A;&#x56DB;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#xFF08;&#x8981;&#x4E48;&#x4E0D;&#x5206;&#x4F5C;&#x4E3A;&#x53F6;&#x8282;&#x70B9;&#xFF0C;&#x8981;&#x4E48;&#x5206;&#x6210;&#x56DB;&#x4E2A;&#x5BF9;&#x5E94;&#x56DB;&#x4E2A;&#x8C61;&#x9650;&#xFF09;&#x3002; &#x63A5;&#x4E0B;&#x6765;&#x770B;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x5148;&#x4ECE;&#x6700;&#x91CD;&#x8981;&#x7684;&#x63D2;&#x5165;&#x51FD;&#x6570;&#x5F00;&#x59CB;&#xFF1A; 12345678910111213141516171819202122232425262728293031323334353637fun insert(rectF: PhysicalObject) { if (nodes[0] != null) { val index = getIndex(rectF) if (index != -1) { nodes[index]?.insert(rectF) return } } objects.add(rectF) if (objects.size &gt; MAX_OBJECTS &amp;&amp; level &lt; MAX_LEVELS) { // don&apos;t have subNodes // split node if (nodes[0] == null) { split() } var i = 0 while (i &lt; objects.size) { val index = getIndex(objects[i]) if (index != -1) { nodes[index]?.insert(objects.removeAt(i)) } else { // don&apos;t in subNode save to parent node. // eq: object on line i++ } } }} &#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x53EF;&#x4EE5;&#x5904;&#x7406;&#x7684;&#x5BF9;&#x8C61;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x9996;&#x5148;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6709;&#x5B50;&#x5BF9;&#x8C61;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x5B50;&#x5BF9;&#x8C61;&#x7684;&#x8BDD;&#xFF0C;&#x5C31;&#x901A;&#x8FC7;getIndex()&#x65B9;&#x6CD5;&#x83B7;&#x53D6;&#x6B21;&#x5BF9;&#x8C61;&#x6240;&#x5728;&#x7684;&#x8C61;&#x9650;&#xFF0C;&#x5E76;&#x76F4;&#x63A5;&#x63D2;&#x5165;&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x5C31;&#x4F1A;&#x628A;&#x8FD9;&#x4E2A;&#x5BF9;&#x8C61;&#x52A0;&#x5165;&#x5230;&#x6B64;&#x8282;&#x70B9;&#x7684;List&#x4E2D;&#xFF0C;&#x5F53;&#x6B64;&#x8282;&#x70B9;&#x7684;&#x5B58;&#x50A8;&#x5BF9;&#x8C61;&#x6EE1;&#x4E86;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x4F1A;&#x8FDB;&#x884C;&#x5206;&#x88C2;&#xFF0C;&#x5E76;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x5FAA;&#x73AF;&#x5C06;&#x6B64;&#x8282;&#x70B9;&#x7684;&#x5BF9;&#x8C61;&#x201C;&#x4E0B;&#x653E;&#x201D;&#x5230;&#x56DB;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#x4E2D;&#x3002; &#x6211;&#x4EEC;&#x63A5;&#x7740;&#x6765;&#x770B;&#x5206;&#x88C2;splite()&#x5206;&#x88C2;&#x7684;&#x8FC7;&#x7A0B;&#x7279;&#x522B;&#x7684;&#x7B80;&#x5355;&#xFF0C;&#x5C31;&#x662F;&#x628A;&#x6B64;&#x8282;&#x70B9;&#x5BF9;&#x5E94;&#x7684;RectF&#x5206;&#x88C2;&#x6210;&#x56DB;&#x4E2A;&#x5B50;&#x753B;&#x5E03;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x751F;&#x6210; &#x56DB;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#x3002; &#x521A;&#x624D;&#x6211;&#x4EEC;&#x5728;&#x8FD9;&#x51E0;&#x4E2A;&#x51FD;&#x6570;&#x91CC;&#x4F7F;&#x7528;&#x4E86;&#x4E00;&#x4E2A;getIndex()&#x51FD;&#x6570;&#xFF1A; 12345678910111213141516171819202122232425262728private fun getIndex(rectF: PhysicalObject): Int { var index = -1 val verticalMidpoint = bounds.left + bounds.width() / 2 val horizontalMidpoint = bounds.top + bounds.height() / 2 // contain top val topQuadrant = rectF.y &lt; horizontalMidpoint &amp;&amp; rectF.y + rectF.height &lt; horizontalMidpoint // contain bottom val bottomQuadrant = rectF.y &gt; horizontalMidpoint // contain left if (rectF.x &lt; verticalMidpoint &amp;&amp; rectF.x + rectF.width &lt; verticalMidpoint) { if (topQuadrant) { index = 1 } else if (bottomQuadrant) { index = 2 } // contain right } else if (rectF.x &gt; verticalMidpoint) { if (topQuadrant) { index = 0 } else if (bottomQuadrant) { index = 3 } } return index} &#x8FD9;&#x51FD;&#x6570;&#x7684;&#x65B9;&#x6CD5;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x6211;&#x4EEC;&#x901A;&#x8FC7;&#x5BF9;&#x6E38;&#x620F;&#x64CD;&#x4F5C;&#x7684;&#x5BF9;&#x8C61;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x4E2D;&#x5FC3;&#x6765;&#x5224;&#x65AD;&#x5BF9;&#x8C61;&#x5728;&#x5F53;&#x524D;&#x5C42;&#x753B;&#x5E03;&#x7684;&#x54EA;&#x4E2A;&#x8C61;&#x9650;&#x3002; &#xFF08;&#x8FD9;&#x91CC;&#x6709;&#x4E2A;&#x5C0F;&#x95EE;&#x9898;&#xFF0C;&#x540E;&#x9762;&#x4F1A;&#x8BB2;&#x5230;&#xFF09;&#x3002; &#x81F3;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x6784;&#x5EFA;&#x56DB;&#x53C9;&#x6811;&#x7684;&#x5DE5;&#x4F5C;&#x5C31;&#x5B8C;&#x4E8B;&#x4E86;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x505A;&#x7684;&#xFF0C;&#x5C31;&#x662F;&#x5728;&#x8FD9;&#x5E27;&#x7ED8;&#x5236;&#x5904;&#x7406;&#x78B0;&#x649E;&#x524D;&#xFF0C;&#x628A;&#x6240;&#x6709;&#x7684;&#x5BF9;&#x8C61;&#x6CE8;&#x5165;&#x56DB;&#x53C9;&#x6811;&#xFF0C;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x6765;&#x505A;&#x4E0B;&#x4E00;&#x6B65;&#xFF0C;&#x6839;&#x636E;&#x5BF9;&#x8C61;&#xFF0C;&#x6765;&#x83B7;&#x53D6;&#x53EF;&#x80FD;&#x4E0E;&#x4E4B;&#x78B0;&#x649E;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x6B64;&#x65F6;&#x6211;&#x4EEC;&#x7684;O (n^2)&#x7684;&#x641C;&#x7D22;&#x964D;&#x4F4E;&#x5230;&#x4E00;&#x4E2A;O(n)&#x4E86;&#xFF0C;&#x5E76;&#x4E14;&#x6211;&#x4EEC;&#x7684;&#x641C;&#x7D22;&#x5BF9;&#x8C61;&#x4E5F;&#x5C11;&#x4E86;&#x5F88;&#x591A;&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5224;&#x65AD;&#x78B0;&#x649E;&#x7684;&#x5BF9;&#x8C61;&#x4EC5;&#x4EC5;&#x53EA;&#x6709;&#x63A7;&#x5236;&#x5BF9;&#x8C61;&#x4E00;&#x4E2A;&#xFF0C;&#x8FD9;&#x4E2A;&#x78B0;&#x649E;&#x7684;&#x89E3;&#x51B3;&#x529E;&#x6CD5;&#x5C31;&#x4F1A;&#x66F4;&#x4E3A;&#x5408;&#x9002;&#x3002; &#x6211;&#x4EEC;&#x5728;&#x5C06;&#x4F7F;&#x7528;retrieve()&#x51FD;&#x6570;&#x6765;&#x83B7;&#x53D6;&#x53EF;&#x80FD;&#x78B0;&#x649E;&#x7684;&#x5BF9;&#x8C61;&#xFF1A; 12345678910fun retrieve(returnObjects: ArrayList&lt;ArrayList&lt;PhysicalObject&gt;&gt;, rectF: PhysicalObject): List&lt;List&lt;PhysicalObject&gt;&gt; { val index = getIndex(rectF) if (index != -1 &amp;&amp; nodes[0] != null) { nodes[index]?.retrieve(returnObjects, rectF) } returnObjects.add(objects) return returnObjects } &#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;&#x8FD4;&#x56DE;&#x7684;&#x6570;&#x7EC4;&#x548C;&#x7528;&#x4E8E;&#x5224;&#x65AD;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x83B7;&#x53D6;&#x6240;&#x5728;&#x8C61;&#x9650;&#x9010;&#x5C42;&#x6DF1;&#x5165;&#x53BB;&#x62FF;&#x548C;&#x81EA;&#x5DF1;&#x6700;&#x63A5;&#x8FD1;&#x8C61;&#x9650;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x518D;&#x901A;&#x8FC7;&#x76F8;&#x5BF9;&#x4F4D;&#x7F6E;&#x53BB;&#x5224;&#x65AD;&#x662F;&#x4E0D;&#x662F;&#x771F;&#x7684;&#x8FDB;&#x884C;&#x4E86;&#x78B0;&#x649E;&#x3002; &#x73B0;&#x5728;&#x6211;&#x4EEC;&#x6765;&#x8BF4;&#x8BF4;&#x521A;&#x624D;&#x90A3;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x90A3;&#x4E2A;getIndex()&#x7684;&#x95EE;&#x9898;&#x5728;&#x4E8E;&#x5E76;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x7684;&#x5BF9;&#x8C61;&#x90FD;&#x80FD;&#x6B63;&#x6B63;&#x597D;&#x597D;&#x7684;&#x88AB;&#x5B89;&#x6392;&#x5728;&#x8C61;&#x9650;&#x91CC;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x5C31;&#x4E0D;&#x5F97;&#x4E0D;&#x60F3;&#x4E2A;&#x529E;&#x6CD5;&#x53BB;&#x5904;&#x7406;&#x8FD9;&#x4E9B;&#x201D;&#x5361;&#x5728;&#x7EBF;&#x4E0A;&#x201D;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x7ED9;&#x51FA;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x53BB;&#x5904;&#x7406;&#xFF1A; &#x7B2C;&#x4E00;&#x79CD;&#x5C31;&#x7B80;&#x5355;&#x7684;&#x628A;&#x6CA1;&#x529E;&#x6CD5;&#x5904;&#x7406;&#x7684;&#x5BF9;&#x8C61;&#x653E;&#x5728;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5BF9;&#x8C61;&#x6C60;&#x91CC;&#x3002; &#x7B2C;&#x4E8C;&#x79CD;&#x6211;&#x4EEC;&#x7684;&#x5224;&#x65AD;&#x5C31;&#x4F1A;&#x66F4;&#x7CBE;&#x7EC6;&#x4E00;&#x70B9;&#xFF0C;&#x6211;&#x4EEC;&#x628A;&#x5361;&#x5728;&#x7EBF;&#x4E0A;&#x7684;&#x5B9E;&#x4F53;&#x5757;&#x6309;&#x7167;&#x8C61;&#x9650;&#x5206;&#x6210;&#x51E0;&#x5757;&#xFF08;x&#xFF0C;y&#x8F74;&#xFF09;&#x7136;&#x540E;&#x628A;&#x5206;&#x51FA;&#x6765;&#x7684;&#x5BF9;&#x8C61;&#x505A;&#x597D;&#x6807;&#x8BB0;&#xFF0C;&#x8981;&#x4FDD;&#x8BC1;&#x80FD;&#x5224;&#x65AD;&#x51FA;&#x662F;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x7684;&#x62C6;&#x5206;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x5206;&#x51FA;&#x6765;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x91CD;&#x65B0;getIndex&#x63D2;&#x5165;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x4E86;&#x5361;&#x7EBF;&#x7684;&#x95EE;&#x9898;&#x3002; &#x52A8;&#x6001;&#x56DB;&#x53C9;&#x6811;&#x4E0A;&#x9762;&#x662F;&#x7528;&#x4E86;&#x56DB;&#x53C9;&#x6811;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x4F46;&#x662F;&#x4E5F;&#x6709;&#x4E00;&#x4E2A;&#x4E0D;&#x8DB3;&#xFF0C;&#x8FD9;&#x4E2A;&#x4E0D;&#x8DB3;&#x5728;&#x5BF9;&#x8C61;&#x5C11;&#x7684;&#x65F6;&#x5019;&#x4E0D;&#x592A;&#x660E;&#x663E;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x5BF9;&#x8C61;&#x591A;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C31;&#x548C;&#x53D1;&#x73B0;&#x6BCF;&#x4E00;&#x5E27;&#x90FD;&#x4F1A;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x56DB;&#x53C9;&#x6811;&#x7684;&#x9500;&#x6BC1;&#x548C;&#x91CD;&#x7ED8;&#xFF0C;&#x8FD9;&#x4F1A;&#x6D88;&#x8017;&#x5927;&#x91CF;&#x7684;&#x7CFB;&#x7EDF;&#x8D44;&#x6E90;&#x3002;&#x6240;&#x4EE5;&#x8BF4;&#x6211;&#x4EEC;&#x5E94;&#x8BE5;&#x53BB;&#x60F3;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x53BB;&#x51CF;&#x5C11;&#x56DB;&#x53C9;&#x6811;&#x7684;&#x521B;&#x5EFA;&#x6D88;&#x8017;&#xFF0C;&#x8FD9;&#x91CC;&#x5F88;&#x660E;&#x663E;&#x7684;&#x4E00;&#x70B9;&#xFF0C;&#x5C31;&#x662F;&#x4E00;&#x822C;&#x7684;&#x6E38;&#x620F;&#x662F;16ms&#x7ED8;&#x5236;&#x4E00;&#x5E27;&#xFF0C;&#x5728;&#x8FD9;16ms&#x4E2D;&#x5176;&#x5B9E;&#x5E76;&#x6CA1;&#x6709;&#x592A;&#x591A;&#x7684;&#x5BF9;&#x8C61;&#x4F5C;&#x51FA;&#x592A;&#x5927;&#x7684;&#x79FB;&#x52A8;&#xFF0C;&#x751A;&#x81F3;&#x8FD8;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x8C61;&#x9650;&#xFF0C;&#x6240;&#x4EE5;&#x8BF4;&#x6211;&#x4EEC;&#x6D6A;&#x8D39;&#x5C31;&#x6D6A;&#x8D39;&#x5728;&#x8FD9;&#x4E2A;&#x5730;&#x65B9;&#x4E86;&#x3002;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x5C31;&#x5BF9;&#x56DB;&#x53C9;&#x6811;&#x7684;&#x4F18;&#x5316;&#x6709;&#x4E86;&#x4E00;&#x4E2A;&#x601D;&#x8DEF;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x8981;&#x5BF9;&#x548C;&#x539F;&#x6765;&#x8C61;&#x9650;&#x4E0D;&#x4E00;&#x6837;&#x7684;&#x5BF9;&#x8C61;&#x8FDB;&#x884C;&#x91CD;&#x65B0;&#x63D2;&#x5165;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5148;&#x5224;&#x65AD;&#x4E00;&#x4E0B;&#x8FD9;&#x4E2A;&#x5BF9;&#x8C61;&#xFF0C;&#x5728;&#x4E0D;&#x5728;&#x539F;&#x6765;&#x7684;&#x8C61;&#x9650;&#xFF1A; 123456private fun isInner(ob: PhysicalObject, rectf: RectF): Boolean { return ob.x &gt;= rectf.left &amp;&amp; ob.x + ob.width &lt;= rectf.left + rectf.w &amp;&amp; ob.y &gt;= rectf.top &amp;&amp; ob.y + ob.height &lt;= rectf.top + rectf.h;} &#x8FD9;&#x4E2A;&#x5C31;&#x5F88;&#x7B80;&#x5355;&#x4E86;&#xFF0C;&#x4EC5;&#x4EC5;&#x662F;&#x4E00;&#x4E2A;&#x77E9;&#x5F62;&#x7684;&#x5224;&#x65AD;&#x3002; &#x6700;&#x540E;&#x4F7F;&#x7528;refresh()&#x65B9;&#x6CD5;&#x5BF9;&#x56DB;&#x53C9;&#x6811;&#x8FDB;&#x884C;&#x5237;&#x65B0;&#xFF1A; 1234567891011121314151617181920212223fun refresh(root: QuadTreeKT) { var ob: PhysicalObject var index: Int for (i in objects) { ob = i index = getIndex(i) // get Index if (!isInner(ob, bounds)) { // re-insert if (this != root) { root.insert(ob) } else if (nodes[0] != null) { this.nodes[index]?.insert(ob) } } } nodes.forEach { i -&gt; i?.refresh(root) }} &#x6BCF;&#x6B21;&#x5BF9;object&#x5BF9;&#x5E94;&#x7684;&#x7684;bounds&#x5224;&#x65AD;&#x662F;&#x5426;&#x5305;&#x542B;&#xFF0C;&#x6765;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5DF2;&#x7ECF;&#x8131;&#x79BB;&#x4E86;&#x539F;&#x6765;&#x7684;&#x8C61;&#x9650;&#xFF0C;&#x5982;&#x679C;&#x8131;&#x79BB;&#x4E86;&#x5C31;&#x91CD;&#x65B0;&#x63D2;&#x5165;&#xFF0C;&#x63A5;&#x7740;&#x9010;&#x5C42;&#x7684;&#x6DF1;&#x5165;&#x53BB;refresh&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; &#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x6211;&#x4EEC;&#x5B66;&#x5230;&#x4E86;&#x4EC0;&#x4E48;&#xFF1F; &#x5B9E;&#x4F53;&#x5206;&#x7EC4;&#x51CF;&#x5C11;&#x78B0;&#x649E;&#x5BF9;&#x8C61; &#x5C4F;&#x5E55;&#x5206;&#x5757;&#x51CF;&#x5C0F;&#x4E86;&#x78B0;&#x649E;&#x5224;&#x65AD;&#x7684;&#x533A;&#x57DF; &#x56DB;&#x53C9;&#x6811;&#x4EE5;&#x53CA;&#x4FEE;&#x6539;&#x7248;&#x7684;&#x52A8;&#x6001;&#x65B9;&#x6CD5;&#x53BB;&#x83B7;&#x53D6; &#x4F5C;&#x8005; &#xFF1A;&#x5218;&#x4E30;&#x607A; &#x4F5C;&#x8005;&#x535A;&#x5BA2;&#xFF1A;&#x82E5;&#x68A6;&#x6D6E;&#x751F; &#x8F6C;&#x8F7D;&#x9700;&#x5F81;&#x5F97;&#x4F5C;&#x8005;&#x672C;&#x4EBA;&#x540C;&#x610F;","categories":[],"tags":[{"name":"游戏编程","slug":"游戏编程","permalink":"https://lfkdsk.github.io/tags/游戏编程/"}]},{"title":"AndroidTips1:从View源码学习点击事件的模拟","slug":"androidTips1","date":"2016-09-06T11:32:07.000Z","updated":"2016-09-08T00:31:17.000Z","comments":true,"path":"2016/09/06/androidTips1/","link":"","permalink":"https://lfkdsk.github.io/2016/09/06/androidTips1/","excerpt":"","text":"&#x4F5C;&#x8005;&#xFF1A;&#x5218;&#x4E30;&#x607A; &#x4F5C;&#x8005;&#x535A;&#x5BA2;&#xFF1A;&#x82E5;&#x68A6;&#x6D6E;&#x751F; &#x8F6C;&#x8F7D;&#x8BF7;&#x6CE8;&#x660E;&#x6587;&#x7AE0;&#x6765;&#x6E90; &#x6211;&#x4EEC;&#x5728;&#x5F00;&#x53D1;&#x81EA;&#x5B9A;&#x4E49;&#x63A7;&#x4EF6;&#x7684;&#x65F6;&#x5019;&#x7ECF;&#x5E38;&#x4F1A;&#x6709;&#x8FD9;&#x6837;&#x7684;&#x9700;&#x6C42;&#xFF0C;&#x4E00;&#x4E2A;&#x63A7;&#x4EF6;&#x65E2;&#x9700;&#x8981;&#x80FD;&#x591F;&#x88AB;&#x62D6;&#x62FD;&#xFF0C;&#x4E5F;&#x9700;&#x8981;&#x80FD;&#x591F;&#x88AB;&#x70B9;&#x51FB;&#x3002;&#x5176;&#x5B9E;&#x8FD9;&#x4E2A;&#x9700;&#x6C42;&#x6709;&#x4E2A;&#x77DB;&#x76FE;&#x4E4B;&#x5904;&#xFF0C;&#x9700;&#x8981;&#x88AB;&#x62D6;&#x62FD;&#x5C31;&#x8981;&#x590D;&#x5199;onTouch(...)&#x51FD;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x6837;&#x70B9;&#x51FB;&#x4E8B;&#x4EF6;&#x5C31;&#x88AB;&#x8986;&#x76D6;&#x4E86;&#xFF0C;&#x6B63;&#x5E38;&#x7684; onClick() / onLongClick()&#x4E8B;&#x4EF6;&#x662F;&#x4E0D;&#x80FD;&#x88AB;&#x54CD;&#x5E94;&#x7684;&#x4E86;&#x3002; &#x73B0;&#x5728;&#x9762;&#x5BF9;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;GestureDetector&#xFF0C;ViewDragHelper&#x80FD;&#x4E3A;&#x6211;&#x4EEC;&#x7684;&#x5F00;&#x53D1;&#x63D0;&#x4F9B;&#x4E00;&#x4E9B;&#x4FBF;&#x5229;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x8FD9;&#x4E9B;&#x5C01;&#x88C5;&#x7684;&#x5DE5;&#x5177;&#x7C7B;&#x6CA1;&#x529E;&#x6CD5;&#x5F88;&#x597D;&#x7684;&#x6EE1;&#x8DB3;&#x6211;&#x4EEC;&#x7684;&#x9700;&#x6C42;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x5C31;&#x9700;&#x8981;&#x81EA;&#x5DF1;&#x6765;&#x6A21;&#x62DF;View&#x7684;&#x70B9;&#x51FB;&#x4E8B;&#x4EF6;&#x3002; &#x6A21;&#x62DF;View&#x70B9;&#x51FB;&#x4E8B;&#x4EF6;&#x8BF4;&#x8D77;&#x6765;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x8BF4;&#x767D;&#x4E86;&#x5C31;&#x662F;&#x83B7;&#x53D6;&#x5F53;&#x524D;&#x7684;&#x70B9;&#x51FB;&#x672A;&#x77E5;&#x7684;&#x5750;&#x6807;&#x503C;&#xFF0C;&#x548C;&#x63A7;&#x4EF6;&#x6240;&#x5728;&#x7684;&#x77E9;&#x5F62;&#x6846;&#x7684;&#x76F8;&#x5BF9;&#x4F4D;&#x7F6E;&#xFF0C;&#x5E76;&#x4E14;&#x4FDD;&#x6301;&#x4E86;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#xFF0C;&#x8FD9;&#x6837;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x7528;&#x6237;&#x6210;&#x529F;&#x7684;&#x8FDB;&#x884C;&#x4E86;&#x4E00;&#x6B21;&#x70B9;&#x51FB;&#xFF0C;&#x8C03;&#x7528;View&#x7684;callOnClick()&#x65B9;&#x6CD5;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x8FD9;&#x65F6;View&#x5C31;&#x53EF;&#x4EE5;&#x6B63;&#x5E38;&#x7684;&#x56DE;&#x8C03;onClickListener()&#x4E86;&#x3002; Bad Implemention&#x6211;&#x770B;&#x8FC7;&#x4E00;&#x4E9B;&#x9879;&#x76EE;&#x7684;&#x4E0D;&#x5B8C;&#x7F8E;&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#xFF0C;&#x5927;&#x6982;&#x7C7B;&#x4F3C;&#x4E8E;&#x8FD9;&#x6837;&#x7684;&#x4F2A;&#x4EE3;&#x7801;&#x3002; 1234567891011121314151617181920212223242526int x,y; long time;public void onTouch(view,event){ // &#x4F2A;&#x4EE3;&#x7801; switch(event.getAction()){ case DOWN: x = event.getX(); y = event.getY(); time = getTime(); break; case UP: // &#x8D85;&#x8FC7;&#x4E00;&#x6BB5;&#x8F83;&#x77ED;&#x65F6;&#x95F4; &#x54CD;&#x5E94;&#x70B9;&#x51FB;&#x4E8B;&#x4EF6; // &#x8D85;&#x8FC7;&#x4E00;&#x6BB5;&#x957F;&#x65F6;&#x95F4; &#x54CD;&#x5E94;&#x957F;&#x6309;&#x65F6;&#x95F4; if(getTime() - time &gt; 4 // &#x5224;&#x65AD;x,y &#x79FB;&#x52A8;&#x7684;&#x4F4D;&#x7F6E;&#x4E0D;&#x8D85;&#x8FC7;&#x4E00;&#x4E2A;&#x9600;&#x503C; &amp;&amp; event.getX() - x... event.getY() - y ...){ view.callOnClick(); or view.performOnLongClick() } case MOVE&#x5904;&#x7406;: // &#x5904;&#x7406;&#x62D6;&#x52A8;&#x4E8B;&#x4EF6; break; }} &#x8FD9;&#x4EFD;&#x4EE3;&#x7801;&#x4ECE;&#x539F;&#x7406;&#x4E0A;&#x8BB2;&#x8D77;&#x65F6;&#x6CA1;&#x4EC0;&#x4E48;&#x95EE;&#x9898;&#xFF0C;&#x5B8C;&#x5168;&#x6CE8;&#x610F;&#x5230;&#x4E86;&#x65F6;&#x95F4;&#x548C;&#x4F4D;&#x7F6E;&#xFF0C;&#x4F46;&#x662F;&#x628A;&#x5BF9;&#x70B9;&#x51FB;&#x7684;&#x5224;&#x5B9A;&#x5B8C;&#x5168;&#x7684;&#x653E;&#x5728;&#x4E86;onTouch()&#x7684;&#x89E6;&#x70B9;&#x62AC;&#x8D77;&#x7684;UP&#x5224;&#x5B9A;&#x91CC;&#xFF0C;&#x8FD9;&#x5C31;&#x9020;&#x6210;&#x4E86;&#x4F60;&#x7684;&#x70B9;&#x51FB;&#x5FC5;&#x987B;&#x5728;&#x4F60;&#x62AC;&#x624B;&#x4E4B;&#x540E;&#x624D;&#x80FD;&#x54CD;&#x5E94;&#xFF0C;&#x6B63;&#x5E38;&#x7684;&#x70B9;&#x6309;&#x4F3C;&#x4E4E;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x957F;&#x6309;&#x7684;&#x8BDD;&#xFF08;&#x53EA;&#x52A0;&#x957F;&#x5224;&#x5B9A;&#x65F6;&#x95F4;&#xFF09;&#x5C31;&#x4F1A;&#x9020;&#x6210;&#x9700;&#x8981;&#x62AC;&#x8D77;&#x6765;&#x624D;&#x80FD;&#x5224;&#x5B9A;&#x957F;&#x6309;&#x3002; System Source Implemention&#x4E0B;&#x9762;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x662F;View&#x6E90;&#x4EE3;&#x7801;&#x4E2D;onTouchEvent()&#x4E2D;&#x7684;ACTION_UP&#x4E0B;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x548C;&#x4E4B;&#x524D;&#x90A3;&#x79CD;&#x731C;&#x60F3;&#x4E00;&#x6837;&#xFF0C; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051case MotionEvent.ACTION_UP: boolean prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != 0; if ((mPrivateFlags &amp; PFLAG_PRESSED) != 0 || prepressed) { // take focus if we don&apos;t have it already and we should in // touch mode. boolean focusTaken = false; if (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) { focusTaken = requestFocus(); } if (prepressed) { // The button is being released before we actually // showed it as pressed. Make it show the pressed // state now (before scheduling the click) to ensure // the user sees it. setPressed(true, x, y); } if (!mHasPerformedLongPress) { // This is a tap, so remove the longpress check removeLongPressCallback(); // Only perform take click actions if we were in the pressed state if (!focusTaken) { // Use a Runnable and post this rather than calling // performClick directly. This lets other visual state // of the view update before click actions start. if (mPerformClick == null) { mPerformClick = new PerformClick(); } if (!post(mPerformClick)) { performClick(); } } } if (mUnsetPressedState == null) { mUnsetPressedState = new UnsetPressedState(); } if (prepressed) { postDelayed(mUnsetPressedState, ViewConfiguration.getPressedStateDuration()); } else if (!post(mUnsetPressedState)) { // If the post failed, unpress right now mUnsetPressedState.run(); } removeTapCallback(); } break; &#x7CFB;&#x7EDF;&#x7684;&#x6E90;&#x7801;&#x8003;&#x91CF;&#x66F4;&#x4E3A;&#x590D;&#x6742;&#x4E00;&#x70B9;&#xFF0C;&#x5176;&#x4E2D;&#x6709;&#x5F88;&#x591A;&#x7684;&#x72B6;&#x6001;&#x7684;&#x8F6C;&#x6362;&#x548C;Flag&#x7684;&#x4FEE;&#x6539;&#xFF0C;&#x6211;&#x4EEC;&#x8BFB;&#x6E90;&#x7801;&#x7684;&#x65F6;&#x5019;&#x5982;&#x679C;&#x4E0D;&#x662F;&#x5FC5;&#x987B;&#x76F8;&#x5173;&#x7684;&#x53EF;&#x4EE5;&#x5148;&#x7701;&#x7565;&#x5F88;&#x591A;Flag&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x8FD9;&#x6BB5;&#x6E90;&#x7801;&#x4E2D;&#x8003;&#x8651;&#x4E86;&#x5173;&#x4E8E;View&#x662F;&#x5426;&#x6709;&#x7126;&#x70B9;&#xFF0C;&#x662F;&#x5426;&#x53EF;&#x70B9;&#x51FB;&#x7B49;&#x5F88;&#x591A;&#x7684;&#x60C5;&#x51B5;&#xFF0C;setPress()&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7528;&#x4E8E;&#x8BBE;&#x5B9A;View&#x7684;&#x6837;&#x5F0F;&#x6539;&#x53D8;&#x3002;&#x8FD9;&#x5176;&#x4E2D;&#x4E3B;&#x8981;&#x7684;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x662F;performClick()&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x8FD9;&#x51FD;&#x6570;&#x6709;&#x522B;&#x4E8E;callOnClick()&#x51FD;&#x6570;&#x4E0D;&#x53EA;&#x662F;&#x56DE;&#x8C03;&#x4E86;click&#x63A5;&#x53E3;&#xFF0C;&#x8FD8;&#x6539;&#x53D8;&#x4E86;View&#x7684;&#x754C;&#x9762;&#x72B6;&#x6001;&#x3002; &#x91CD;&#x70B9;&#x770B;&#x5176;&#x4E2D;&#x7684;&#x8FD9;&#x6BB5;&#xFF1A; 1234567891011if (!focusTaken) { // Use a Runnable and post this rather than calling // performClick directly. This lets other visual state // of the view update before click actions start. if (mPerformClick == null) { mPerformClick = new PerformClick(); } if (!post(mPerformClick)) { performClick(); } } &#x91CC;&#x9762;&#x7684;&#x6CE8;&#x91CA;&#x544A;&#x8BC9;&#x6211;&#x4EEC;&#xFF0C;&#x4E0D;&#x76F4;&#x63A5;&#x7684;&#x8C03;&#x7528;performClick()&#xFF0C;&#x800C;&#x662F;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;Runnable&#x8FD0;&#x884C;&#xFF0C;&#x80FD;&#x591F;&#x8BA9;View&#x5148;&#x66F4;&#x65B0;&#x89C6;&#x89C9;&#x72B6;&#x6001;&#x3002;&#x8FD9;&#x91CC;&#x9762;&#x6211;&#x4EEC;&#x6CE8;&#x610F;&#x5230;&#x4E86;View&#x6E90;&#x7801;&#x4E2D;&#x7528;&#x5230;&#x4E86;&#x4E00;&#x4E2A;PerformClick()&#x7684;Runnable&#xFF0C;&#x8FD9;&#x4E2A;Runnable&#x7684;run()&#x65B9;&#x6CD5;&#x91CC;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x5C31;&#x662F;performClick()&#x3002;&#x4ECE;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x7CFB;&#x7EDF;&#x5728;&#x70B9;&#x51FB;&#x5904;&#x7406;&#x4E0A;&#x4F1A;&#x4F7F;&#x7528;Runnable&#x6216;&#x662F;&#x5EF6;&#x65F6;&#x7684;Runnable&#x53BB;&#x5904;&#x7406;&#x70B9;&#x51FB;&#x4E8B;&#x4EF6;&#xFF0C;View&#x4E2D;&#x8FD8;&#x6709;&#x51E0;&#x4E2A;Runnable&#x3002; 123456789101112131415161718192021222324252627282930313233343536private final class CheckForLongPress implements Runnable { private int mOriginalWindowAttachCount; @Override public void run() { if (isPressed() &amp;&amp; (mParent != null) &amp;&amp; mOriginalWindowAttachCount == mWindowAttachCount) { if (performLongClick()) { mHasPerformedLongPress = true; } } } public void rememberWindowAttachCount() { mOriginalWindowAttachCount = mWindowAttachCount; }}private final class CheckForTap implements Runnable { public float x; public float y; @Override public void run() { mPrivateFlags &amp;= ~PFLAG_PREPRESSED; setPressed(true, x, y); checkForLongClick(ViewConfiguration.getTapTimeout()); }}private final class PerformClick implements Runnable { @Override public void run() { performClick(); }} &#x5176;&#x4E2D;&#x7B2C;&#x4E00;&#x4E2A;CheckForLongPress&#x5C31;&#x662F;&#x5BF9;&#x957F;&#x6309;&#x7684;&#x68C0;&#x6D4B;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;CheckForTap&#x5728;&#x6ED1;&#x52A8;&#x63A7;&#x4EF6;&#x4E2D;&#x5EF6;&#x8FDF;&#x54CD;&#x5E94;&#x3002; CheckForLongPress&#x7684;&#x5B9E;&#x73B0;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x68C0;&#x6D4B;&#x4E86;&#x51E0;&#x9879;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x70B9;&#x51FB;&#x7684;&#x72B6;&#x6001;&#x4E4B;&#x540E;&#x53EA;&#x9700;&#x8981;&#x6BD4;&#x8F83;&#x4FDD;&#x5B58;&#x7684;mOriginalWindowAttachCount&#x662F;&#x5426;&#x76F8;&#x7B49;&#xFF0C;&#x5982;&#x679C;&#x76F8;&#x7B49;&#x5C31;&#x76F8;&#x5E94;&#x957F;&#x6309;&#x4E8B;&#x4EF6;&#x3002; 1234/** * Count of how many windows this view has been attached to. */int mWindowAttachCount; &#x5728;View&#x7684;onTouchEvent&#x4E2D;&#x7684;ACTION_DOWN&#x4E2D;&#xFF1A; 123456789101112131415161718 case MotionEvent.ACTION_DOWN:... boolean isInScrollingContainer = isInScrollingContainer(); // For views inside a scrolling container, delay the pressed feedback for // a short period in case this is a scroll. if (isInScrollingContainer) { mPrivateFlags |= PFLAG_PREPRESSED; if (mPendingCheckForTap == null) { mPendingCheckForTap = new CheckForTap(); } mPendingCheckForTap.x = event.getX(); mPendingCheckForTap.y = event.getY(); postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout()); } else { // Not inside a scrolling container, so show the feedback right away setPressed(true, x, y); checkForLongClick(0); } &#x5728;&#x6309;&#x4E0B;&#x7684;&#x4E8B;&#x4EF6;&#x4E2D;&#x9996;&#x5148;&#x901A;&#x8FC7;&#x67E5;&#x770B;View&#x6811;&#x5224;&#x65AD;&#x81EA;&#x5DF1;&#x5728;&#x4E0D;&#x5728;&#x4E00;&#x4E2A;&#x6EDA;&#x52A8;&#x7684;&#x7A7A;&#x95F4;&#x91CC;&#xFF0C;&#x800C;&#x4E14;&#x5982;&#x679C;&#x505C;&#x7559;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x7684;&#x8BDD;&#x5C31;&#x5EF6;&#x8FDF;&#x54CD;&#x5E94;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x662F;&#x76F4;&#x63A5;&#x5C31;&#x76F8;&#x5E94;&#x957F;&#x6309;&#x4E8B;&#x4EF6;&#x3002; &#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5176;&#x5B9E;&#x6BCF;&#x6B21;&#x70B9;&#x4E0B;&#x53BB;&#x7684;&#x65F6;&#x5019;&#x90FD;&#x4F1A;&#x53D1;&#x9001;&#x957F;&#x6309;&#x7684;&#x5224;&#x65AD;Runnable&#xFF0C;&#x90A3;&#x6211;&#x4EEC;&#x8981;&#x662F;&#x5DF2;&#x7ECF;&#x54CD;&#x5E94;&#x4E86;&#x70B9;&#x51FB;&#x4E8B;&#x4EF6;&#x90A3;&#x8BE5;&#x600E;&#x4E48;&#x529E;&#x5462;&#xFF1F;&#x53D6;&#x6D88;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x957F;&#x6309;Runnable&#x5C31;&#x597D;&#x4E86;&#x3002; 12345678910// This is a tap, so remove the longpress checkremoveLongPressCallback(); /** * Remove the longpress detection timer. */ private void removeLongPressCallback() { if (mPendingCheckForLongPress != null) { removeCallbacks(mPendingCheckForLongPress); } } &#x521A;&#x624D;&#x5728;UP&#x7684;&#x4E8B;&#x4EF6;&#x91CC;&#xFF0C;&#x5C31;&#x5DF2;&#x7ECF;&#x79FB;&#x9664;&#x4E86;&#x957F;&#x6309;&#x7684;&#x56DE;&#x8C03;&#x3002; &#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x521A;&#x624D;&#x7684;&#x5206;&#x6790;&#x603B;&#x7ED3;&#x51FA;View&#x5B9E;&#x73B0;&#x70B9;&#x51FB;&#x548C;&#x957F;&#x6309;&#x7684;&#x4F2A;&#x4EE3;&#x7801;&#xFF1A; 12345678910111213switch(event.getAction()){ case UP: post performClick Runnable remove checkForTap CallBack break; case DOWN: if (in scroll layout){ post checkForTap Runnable } else { post checkForLong Runnable } break;} How To Use?&#x9996;&#x5148;&#x6A21;&#x4EFF;View&#x4E00;&#x6837;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;&#x957F;&#x6309;&#x68C0;&#x6D4B;&#x7684;Runnable&#xFF1A; &#x6211;&#x4EEC;&#x8FD9;&#x91CC;&#x901A;&#x8FC7;&#x70B9;&#x51FB;&#x4F4D;&#x7F6E;&#x6765;&#x5224;&#x65AD;&#x800C;&#x4E0D;&#x662F;attachCount&#x3002; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263/** * &#x6A21;&#x4EFF;&#x7CFB;&#x7EDF;&#x7684; &#x957F;&#x6309;&#x4E8B;&#x4EF6;&#x4EFB;&#x52A1; * &#x6BCF;&#x6B21;&#x5728; {@link #onTouch(View, MotionEvent)} &#x4E2D; MotionEvent.ACTION_DOWN &#x7684;&#x65F6;&#x5019; * &#x5411; {@link #touchEventHandler} &#x4F20;&#x9012;&#x4E00;&#x4E2A; {@link #CheckForLongPress(float, float)} &#x7684;&#x5EF6;&#x65F6;&#x4E8B;&#x4EF6; * &#x5EF6;&#x65F6;&#x65F6;&#x95F4;&#x4E3A; ViewConfiguration.getLongPressTimeout() * &#x662F;&#x7528;&#x4E8E;&#x68C0;&#x6D4B;&#x662F;&#x4E0D;&#x662F;&#x957F;&#x6309;&#x7684;&#x65F6;&#x95F4;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;500&#x6BEB;&#x79D2; */ private class CheckForLongPress implements Runnable { /** * &#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x7684;x/y &#x662F;&#x89E6;&#x6478;&#x503C;&#x800C;&#x4E0D;&#x662F; &#x89E6;&#x6478;&#x503C;+&#x504F;&#x79FB; * &#x504F;&#x79FB;&#x5728;&#x957F;&#x6309;&#x4E8B;&#x4EF6;&#x8FD0;&#x884C;&#x7684;&#x65F6;&#x5019;&#x518D;&#x62FF;&#x53BB; */ float x, y; public CheckForLongPress(float x, float y) { this.x = x; this.y = y; } /** * &#x4E3A;&#x4E86;&#x8BA9;&#x4EFB;&#x52A1;&#x4FDD;&#x6301;&#x590D;&#x7528; &#x4E0D;&#x521B;&#x5EFA;&#x65B0;&#x7684;&#x4E8B;&#x4EF6; &#x800C;&#x9009;&#x62E9;&#x590D;&#x7528;&#x4E4B;&#x524D;&#x7684;&#x4E8B;&#x4EF6; * * @param x newX * @param y newY */ public void setXY(float x, float y) { this.x = x; this.y = y; } /** * &lt;p&gt; * &#x5728; 500ms &#x4E4B;&#x540E;&#x4E8B;&#x4EF6;&#x8FD0;&#x884C; * &#x8FD9;&#x91CC;&#x7684; {@link #lastEvent} &#x5728; {@link #onTouch(View, MotionEvent)} &#x4E2D;&#x8FDB;&#x884C;&#x4FEE;&#x6539; * &#x6BCF;&#x6B21;&#x5904;&#x7406; MotionEvent &#x4E8B;&#x4EF6;&#x4E4B;&#x540E;&#x90FD;&#x4F1A;&#x5BF9;&#x5176;&#x8FDB;&#x884C;&#x66F4;&#x65B0; * &lt;/p&gt; * &#x957F;&#x6309;&#x6761;&#x4EF6;&#x5224;&#x5B9A;: * &lt;ol&gt; * &lt;li&gt;&#x4E0A;&#x4E00;&#x6B21;&#x7684;&#x70B9;&#x51FB;&#x4E8B;&#x4EF6;&#x8FD8;&#x662F; MotionEvent.ACTION_DOWN * (&#x591A;&#x534A;&#x4E0D;&#x53EF;&#x80FD;,&#x603B;&#x662F;&#x4F1A;&#x53D1;&#x751F; MotionEvent.ACTION_MOVE)&lt;/li&gt; * &lt;li&gt; * &#x4E0A;&#x4E00;&#x6B21;&#x7684;&#x70B9;&#x51FB;&#x4E8B;&#x4EF6;&#x662F; MotionEvent.ACTION_MOVE * (&#x4F46;&#x662F;&#x4E4B;&#x524D;&#x7684;&#x70B9;&#x51FB;&#x4F4D;&#x7F6E;&#x548C;&#x5F53;&#x524D;&#x7684;&#x4F4D;&#x7F6E;&#x4E0D;&#x8D85;&#x8FC7;&#x5341;&#x4E2A;&#x50CF;&#x7D20;&#x503C;) * &lt;/li&gt; * &lt;/ol&gt; */ public void run() { if (lastEvent == MotionEvent.ACTION_DOWN || (lastEvent == MotionEvent.ACTION_MOVE &amp;&amp; (Math.abs(globalX - x) &lt; 4) &amp;&amp; Math.abs(globalY - y) &lt; 4)) { // &#x5904;&#x7406;&#x957F;&#x6309;&#x4E8B;&#x4EF6; setCourseOnClick(globalX + scrollX, globalY + scrollY, TouchMode.LongClick); /** * &#x4E0D;&#x5141;&#x8BB8;&#x591A;&#x4E2A;&#x65F6;&#x95F4;&#x540C;&#x65F6;&#x54CD;&#x5E94; &#x5728;&#x6D4B;&#x8BD5;&#x4E2D;&#x53D1;&#x73B0;&#x7ECF;&#x5E38;&#x4F1A;&#x56E0;&#x4E3A;&#x8BEF;&#x5DEE; * &#x5BFC;&#x81F4;&#x4E00;&#x6B21;&#x957F;&#x6309;&#x51FA;&#x73B0;&#x4E24;&#x4E2A;&#x8FDE;&#x7EED;&#x7684;&#x54CD;&#x5E94;&#x4E8B;&#x4EF6; * &#x56E0;&#x6B64;&#x5F53;&#x4E00;&#x4E2A;&#x5F00;&#x59CB;&#x54CD;&#x5E94;&#x4E4B;&#x540E; &#x628A;&#x5F53;&#x524D;&#x7684;&#x4EFB;&#x52A1;&#x90FD;&#x4ECE; * {@link #touchEventHandler}&#x7684;&#x4EFB;&#x52A1;&#x961F;&#x5217;&#x4E2D;&#x79FB;&#x9664; */ touchEventHandler.removeCallbacks(press); } } } &#x5BF9;&#x5B83;&#x7684;&#x8C03;&#x7528;&#x4E5F;&#x662F;&#x540C;&#x6837;&#xFF0C;&#x5728;ACTION_DOWN&#x4E2D;&#x53D1;&#x9001;&#x5224;&#x65AD;&#xFF1A; 123456789101112131415161718192021/** * ACTION_DOWN&#x4E2D;&#x505A;&#x4E86;&#x4E09;&#x4EF6;&#x4E8B; * 1.&#x62FF;&#x5230;&#x4E86;&#x6309;&#x4E0B;&#x65F6;&#x95F4; * 2.&#x53D1;&#x9001;&#x4E86;&#x957F;&#x6309;&#x4E8B;&#x4EF6; * 3.&#x8BB0;&#x5F55;&#x4E86;&#x6309;&#x4E0B;&#x7684;&#x70B9; */case MotionEvent.ACTION_DOWN: downTime = System.currentTimeMillis(); x_temp1 = x; lastEvent = MotionEvent.ACTION_DOWN; if (press == null) press = new CheckForLongPress(x, y); else press.setXY(x, y); touchEventHandler.postDelayed(press, ViewConfiguration.getLongPressTimeout()); break; &#x518D;&#x5224;&#x65AD;&#x4F60;&#x7684;&#x70B9;&#x51FB;&#x533A;&#x57DF;&#xFF1A; 123456789101112131415161718/** * &#x5224;&#x65AD;&#x70B9;&#x51FB;&#x4E8B;&#x4EF6; * * @param button &#x62FF;&#x5230;&#x6309;&#x94AE; * @param x &#x70B9;&#x51FB;&#x7684;X * @param y &#x70B9;&#x51FB;&#x7684;Y * @return &#x662F;&#x5426;&#x6210;&#x529F;&#x70B9;&#x51FB; */private boolean contains(Button button, int x, int y) { int offset = ClassTableDefaultInfo.timeLineWidth; int left = button.getLeft() + offset; int right = left + button.getWidth(); int top = button.getTop(); int bottom = top + button.getHeight(); return left &lt; right &amp;&amp; top &lt; bottom // check for empty first &amp;&amp; x &gt;= left &amp;&amp; x &lt; right &amp;&amp; y &gt;= top &amp;&amp; y &lt; bottom;} &#x5F53;&#x4F60;&#x7684;&#x70B9;&#x51FB;&#x533A;&#x57DF;&#x5728;&#x63A7;&#x4EF6;&#x77E9;&#x5F62;&#x533A;&#x57DF;&#x5185;&#x5373;&#x53EF;&#x54CD;&#x5E94;&#x957F;&#x6309;&#x6216;&#x8005;&#x70B9;&#x51FB;&#x7684;&#x56DE;&#x8C03;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; &#x6700;&#x540E;&#x518D;&#x8BF4;&#x4E24;&#x53E5;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x4E2D;&#x6211;&#x4EEC;&#x4E86;&#x89E3;&#x4E86;View&#x7684;&#x70B9;&#x51FB;&#x548C;&#x957F;&#x6309;&#x5224;&#x65AD;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x5176;&#x5B9E;&#x4ECE;&#x8FD9;&#x4E2A;&#x77E5;&#x8BC6;&#x70B9;&#x53EF;&#x4EE5;&#x53D1;&#x6563;&#x7684;&#x53BB;&#x60F3;&#xFF0C;&#x8FD9;&#x79CD;&#x53D1;&#x9001;&#x5EF6;&#x65F6;Runnable&#x7684;&#x65B9;&#x5F0F;&#x8FD8;&#x53EF;&#x4EE5;&#x653E;&#x5728;&#x5F88;&#x591A;&#x7684;&#x6761;&#x4EF6;&#x4E0B;&#x4F7F;&#x7528;&#xFF0C;&#x6BD4;&#x5982;&#x5728;&#x4F7F;&#x7528;smoothScroll&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x624B;&#x52A8;&#x7684;&#x53BB;&#x63A7;&#x5236;&#x591A;&#x4E2A;&#x65B9;&#x5411;&#x7684;&#x6EDA;&#x52A8;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x53D1;&#x9001;&#x4E00;&#x4E2A;&#x5EF6;&#x65F6;&#x7684;&#x5224;&#x65AD;&#x6761;&#x4EF6;&#x6765;&#x5224;&#x65AD;&#x6211;&#x4EEC;&#x7684;&#x5E73;&#x79FB;&#x662F;&#x5426;&#x505C;&#x6B62;&#x3002;&#x5F53;&#x7136;&#x6211;&#x4EEC;&#x5E76;&#x6CA1;&#x6709;&#x4E00;&#x5B9A;&#x8981;&#x50CF;View&#x6E90;&#x7801;&#x90A3;&#x6837;&#x7684;&#x53BB;&#x5206;&#x7740;&#x5904;&#x7406;&#x70B9;&#x51FB;&#x548C;&#x957F;&#x6309;&#x4E8B;&#x4EF6;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x5B83;&#x548C;&#x5728;&#x4E00;&#x4E2A;Runnable&#x91CC;&#x9762;&#xFF0C;&#x4EC5;&#x4EC5;&#x901A;&#x8FC7;&#x65F6;&#x95F4;&#x6765;&#x5224;&#x65AD;&#x3002;","categories":[],"tags":[{"name":"AndroidTips","slug":"AndroidTips","permalink":"https://lfkdsk.github.io/tags/AndroidTips/"}]},{"title":"MVP In Android","slug":"mvpInAndroid","date":"2016-09-05T23:57:49.000Z","updated":"2016-09-06T03:37:25.000Z","comments":true,"path":"2016/09/06/mvpInAndroid/","link":"","permalink":"https://lfkdsk.github.io/2016/09/06/mvpInAndroid/","excerpt":"","text":"&#x4F17;&#x6240;&#x5468;&#x77E5;&#xFF0C;Android&#x7684;&#x8BBE;&#x8BA1;&#x67B6;&#x6784;&#x4E00;&#x76F4;&#x4E3A;&#x4EBA;&#x6240;&#x8BDF;&#x75C5;&#xFF0C;&#x6A21;&#x5757;&#x7684;&#x5206;&#x5272;&#x4E0D;&#x6E05;&#xFF0C;&#x5F88;&#x5BB9;&#x6613;&#x9020;&#x6210;&#x65B0;&#x624B;&#x7684;&#x56F0;&#x60D1;&#x548C;&#x8FF7;&#x832B;&#xFF0C;&#x5E76;&#x4E14;&#x5199;&#x51FA;&#x6765;&#x7684;&#x4EE3;&#x7801;&#x975E;&#x5E38;&#x6DF7;&#x6742;&#xFF0C;Activity&#x5373;&#x5305;&#x542B;UI&#x7684;&#x5904;&#x7406;&#xFF0C;&#x8FD8;&#x5305;&#x62EC;&#x6570;&#x636E;&#x7684;&#x5177;&#x4F53;&#x5904;&#x7406;&#xFF0C;&#x8BA9;&#x4E00;&#x4E2A;Activity&#x5F04;&#x51FA;&#x597D;&#x51E0;&#x5343;&#x884C;&#x7684;&#x5BB9;&#x91CF;&#xFF0C;&#x800C;&#x4E14;&#x4EE3;&#x7801;&#x975E;&#x5E38;&#x4E0D;&#x6E05;&#x6670;&#xFF0C;&#x53EF;&#x8BFB;&#x6027;&#x6BD4;&#x8F83;&#x5DEE;&#x3002; &#x6240;&#x4EE5;&#x5728;Android&#x7684;&#x5F00;&#x53D1;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x4E00;&#x76F4;&#x6CA1;&#x6709;&#x4E00;&#x4E2A;&#x7EDF;&#x4E00;&#x7684;&#x5F00;&#x53D1;&#x6A21;&#x5F0F;&#xFF0C;MVC&#x3001;MVP&#x3001;MVVM&#x90FD;&#x6709;&#x51FA;&#x73B0;&#xFF0C;&#x4E0D;&#x8FC7;&#x4E4B;&#x524D;Google&#x5728;Github&#x5F00;&#x6E90;&#x7684;&#x4E00;&#x4E2A;&#x5F00;&#x6E90;&#x5E93;to-do-mvp &#xFF0C;Google&#x63D0;&#x4F9B;&#x4E86;&#x4ED6;&#x4EEC;&#x5BF9;MVP&#x7684;&#x4E00;&#x4E2A;&#x8303;&#x5F0F;&#xFF0C;&#x6211;&#x4EEC;&#x4E00;&#x6B21;&#x4E3A;&#x57FA;&#x7840;&#x8C08;&#x8C08;Android &#x7684;MVP&#x7684;&#x5E94;&#x7528;&#x3002; What is MVP?MVP &#x6307;&#x7684;&#x662F;&#x201C;models-views-presenters&#x201D;&#x7684;&#x7F29;&#x5199;&#xFF0C;&#x901A;&#x8FC7;&#x628A;&#x903B;&#x8F91;&#x64CD;&#x4F5C;&#x548C;UI&#x64CD;&#x4F5C;&#x5206;&#x79BB;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x6765;&#x8BA9;&#x903B;&#x8F91;&#x7684;&#x7ED3;&#x6784;&#x66F4;&#x4E3A;&#x6E05;&#x6670;&#x3002;Activity&#x662F;&#x4E00;&#x4E2A;&#x901A;&#x7528;&#x7684;&#x201C;God Object&#x201D;&#x4EC0;&#x4E48;&#x90FD;&#x80FD;&#x653E;&#x8FDB;&#x53BB;&#xFF0C;&#x5BFC;&#x81F4;&#x4E86;Android&#x5F00;&#x53D1;&#x901A;&#x5E38;&#x4F7F;&#x7528;&#x7684;&#x662F;&#x201C;models-views&#x201D;&#x7684;&#x6A21;&#x5F0F;&#xFF0C;&#x4EC5;&#x4EC5;&#x628A;&#x6570;&#x636E;&#x5C42;&#x5355;&#x72EC;&#x7684;&#x5206;&#x79BB;&#x4E86;&#x51FA;&#x6765;&#xFF0C;&#x5BFC;&#x81F4;&#x4E86;&#x903B;&#x8F91;&#x64CD;&#x4F5C;&#x653E;&#x5728;&#x4E86;Activity&#x91CC;&#x9762;&#x3002; MVP&#x4E2D;&#x7684;Presenter&#x4EE3;&#x7406;&#x7C7B;&#x662F;&#x5BF9;MVC&#x6A21;&#x5F0F;&#x4E2D;Controller&#x7684;&#x4E00;&#x79CD;&#x66F4;&#x65B0;&#xFF0C;&#x901A;&#x8FC7;&#x4EE3;&#x7406;&#x7C7B;&#x548C;UI&#x5BF9;&#x8C61;&#x7684;&#x7ED1;&#x5B9A;&#x6765;&#x5B9E;&#x73B0;&#x903B;&#x8F91;&#x64CD;&#x4F5C;&#x7684;&#x5206;&#x79BB;&#xFF0C;View&#x548C;Presenter&#x53EF;&#x4EE5;&#x4E92;&#x89C1;&#xFF0C;Model&#x5B8C;&#x5168;&#x7531;Presenter&#x64CD;&#x4F5C;&#xFF0C;&#x5C31;&#x662F;&#x8FD9;&#x79CD;&#x6A21;&#x5F0F;&#x7684;&#x6838;&#x5FC3;&#x7406;&#x5FF5;&#x3002; Structure&#x8FD9;&#x91CC;&#x53C2;&#x7167;Google&#x7684;&#x5B98;&#x65B9;&#x63A8;&#x8350;&#x6807;&#x51C6;&#x6765;&#x8BB2;&#x89E3;&#x5982;&#x4F55;&#x4F7F;&#x7528;MVP&#x7684;&#x6A21;&#x5F0F;&#x3002; &#x6309;&#x7167;MVP&#x7684;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#xFF0C;Model&#x5F88;&#x6E05;&#x6670;&#x4E86;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x62BD;&#x8C61;&#x51FA;&#x6765;&#x7684;&#x6570;&#x636E;&#x6A21;&#x578B;&#xFF0C;&#x8FD9;&#x4E2A;&#x6709;&#x7684;&#x662F;&#x53EA;&#x662F;Bean&#x7C7B;&#x578B;&#x7684;&#x6570;&#x636E;&#x6A21;&#x578B;&#xFF0C;&#x6216;&#x8005;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x62BD;&#x8C61;&#x63A5;&#x53E3;&#x6765;&#x5B9E;&#x73B0;&#x63D0;&#x4F9B;&#x6570;&#x636E;&#x7684;Model&#x6A21;&#x578B;&#xFF0C;&#x8FD9;&#x4E2A;&#x6211;&#x8BA4;&#x4E3A;&#x90FD;&#x53EF;&#x4EE5;&#xFF0C;&#x770B;&#x60C5;&#x51B5;&#x800C;&#x5B9A;&#xFF0C;&#x6709;&#x7684;&#x65F6;&#x5019;&#x8FC7;&#x4E8E;&#x62C6;&#x5206;&#x4E5F;&#x4F1A;&#x5BFC;&#x81F4;&#x8FC7;&#x5EA6;&#x4F7F;&#x7528;&#x7684;&#x95EE;&#x9898;&#x51FA;&#x73B0;&#x3002;View&#x7C7B;&#x4E00;&#x822C;&#x8BA4;&#x4E3A;&#x662F;Activity&#xFF0F;Fragment&#x8FD9;&#x79CD;&#x548C;UI&#x5173;&#x8054;&#x5EA6;&#x9AD8;&#x7684;&#x63A7;&#x4EF6;&#x3002;Presenter&#x662F;&#x62BD;&#x8C61;&#x51FA;&#x6765;&#x7684;&#x4EE3;&#x7406;&#x7C7B;&#xFF0C;&#x5904;&#x7406;&#x903B;&#x8F91;&#x95EE;&#x9898;&#x3002; &#x5982;&#x4F55;&#x5C06;View&#x548C;Presenter&#x94FE;&#x63A5;&#x8D77;&#x6765;&#x5462;&#xFF1F;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x4E86;&#x4E00;&#x4E2A;&#x5951;&#x7EA6;&#x7C7B;&#x7684;&#x65B9;&#x5F0F;&#x5B9A;&#x4E49;&#x4E86;View&#x548C;Presenter&#x7684;&#x66B4;&#x9732;&#x63A5;&#x53E3;&#x3002; Contract Interface123456789101112131415161718192021public class ExamArrangeContract { /** * @link ExamArrange &#x8003;&#x573A;&#x5B89;&#x6392; */ interface View extends BaseView&lt;Presenter&gt; { void initialRecycler(List&lt;ExamArrange&gt; arranges); void notifyRefreshRecycler(); void stopRefresh(); } interface Presenter extends BasePresenter { void initialDataForRecycler(); void beginLoad(PtrFrameLayout frame); void loadMore(); }} &#x5951;&#x7EA6;&#x7C7B;&#x5927;&#x591A;&#x662F;&#x5F62;&#x5982;&#x4EE5;&#x4E0A;&#x4EE3;&#x7801;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x91CD;&#x70B9;&#x5B9A;&#x4E49;&#x4E86;View&#x548C;Presenter&#x7684;&#x66B4;&#x9732;&#x63A5;&#x53E3;&#xFF0C;&#x91CC;&#x9762;&#x5B9A;&#x4E49;&#x4E86;&#x4E8C;&#x8005;&#x7684;&#x804C;&#x80FD;&#x3002;&#x6BD4;&#x5982;&#x8BF4;View&#x8D1F;&#x8D23;&#x5237;&#x65B0;RecyclerView&#x7684;&#x89C6;&#x56FE;&#xFF0C;Presenter&#x8D1F;&#x8D23;&#x7ED9;RecyclerView&#x52A0;&#x8F7D;&#x66F4;&#x591A;&#x63D0;&#x4F9B;&#x6570;&#x636E;&#x3002; Activity&#xFF0F;Fragment&#x7EE7;&#x627F;&#x5176;&#x4E2D;&#x7684;View&#x7C7B;&#xFF0C;&#x53E6;&#x5916;&#x518D;&#x5B9A;&#x4E00;&#x4E2A;&#x4E00;&#x4E2A;&#x5BF9;Presenter&#x7684;&#x5B9E;&#x73B0;&#x7C7B;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; Base Interface12345public interface BaseView&lt;T&gt; { void setPresenter(T presenter);} Contract&#x7C7B;&#x91CC;&#x9762;View&#x7EE7;&#x627F;&#x7684;BaseView&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x5C31;&#x662F;&#x548C;&#x6570;&#x636E;&#x7ED1;&#x5B9A;&#x3002; 12345public interface BasePresenter { void start();} &#x53E6;&#x5916;Presenter&#x7684;Base&#x7C7B;&#x4E2D;&#x4E5F;&#x53EA;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;start()&#x51FD;&#x6570;&#x7528;&#x4F5C;Presenter&#x7684;&#x542F;&#x52A8;&#x51FD;&#x6570;&#x3002;&#x4E00;&#x822C;&#x653E;&#x5728;Activity&#x7684;onStart()&#x6216;&#x8005;&#x662F;onResume()&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; Implemention&#x5B9E;&#x73B0;&#x7C7B;&#x53EA;&#x9700;&#x8981;&#x5206;&#x522B;&#x7EE7;&#x627F;&#x5951;&#x7EA6;&#x7C7B;&#x91CC;&#x9762;&#x7684;&#x63A5;&#x53E3;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; &#x4E0B;&#x9762;&#x653E;&#x4E0A;&#x8DDF;&#x90A3;&#x4E2A;&#x5951;&#x7EA6;&#x7C7B;&#x76F8;&#x5173;&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x6CD5;&#x3002; &#x9996;&#x5148;&#x662F;&#x5728;Fragment&#x91CC;&#x5B9E;&#x73B0;View&#x63A5;&#x53E3;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394public class ExamArrangeFragment extends RecyclerFragment implements ExamArrangeContract.View { public static ExamArrangeFragment newInstance() { Bundle args = new Bundle(); ExamArrangeFragment fragment = new ExamArrangeFragment(); fragment.setArguments(args); return fragment; } private ExamArrangeContract.Presenter examArrangePresenter; private CommonAdapter&lt;ExamArrange&gt; adapter; @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { View wrapper = super.onCreateView(inflater, container, savedInstanceState); ButterKnife.bind(this, wrapper); titleBar.setTitle(&quot;&#x8003;&#x573A;&#x5B89;&#x6392;&quot;); return wrapper; } @Override public void beginLoad(PtrFrameLayout frame) { examArrangePresenter.beginLoad(frame); } @Override public void loadMore() { examArrangePresenter.loadMore(); } @Override public void onResume() { super.onResume(); examArrangePresenter.start(); } @Override public void onDestroyView() { super.onDestroyView(); ButterKnife.unbind(this); } @Override public void setPresenter(ExamArrangeContract.Presenter presenter) { this.examArrangePresenter = presenter; } @Override public void initialRecycler(List&lt;ExamArrange&gt; arranges) { adapter = new CommonAdapter&lt;ExamArrange&gt;( getContext(), R.layout.item_exam_room, arranges) { @Override public void bind(ViewHolder holder, ExamArrange examArrange) {// holder.setText(R.id.exam_item_score_name, examArrange.getName()); } }; LinearLayoutManager manager = new LinearLayoutManager(getContext()); baseRecycler.setLayoutManager(manager); baseRecycler.setAdapter(adapter); baseRecycler.addOnScrollListener(new EndlessRecyclerOnScrollListener(manager) { @Override public void onLoadMore(int currentPage) { examArrangePresenter.loadMore(); } }); createFooterView(); } private void createFooterView() { View view = LayoutInflater.from(getContext()) .inflate(R.layout.cube_views_load_more_default_footer, baseRecycler, false); HeaderViewRecyclerAdapter headerViewRecyclerAdapter = new HeaderViewRecyclerAdapter(adapter); baseRecycler.setAdapter(headerViewRecyclerAdapter); headerViewRecyclerAdapter.addFooterView(view); } @Override public void notifyRefreshRecycler() { adapter.notifyDataSetChanged(); } @Override public void stopRefresh() { ptrFrameLayout.refreshComplete(); }} &#x5728;setPresenter&#x4E2D;&#x7ED1;&#x5B9A;&#x4E00;&#x4E2A;&#x5F15;&#x7528;&#xFF0C;&#x7136;&#x540E;&#x5728;UI&#x91CC;&#x9762;&#x5C31;&#x53EF;&#x4EE5;&#x8C03;&#x7528;&#x6570;&#x636E;&#x4E86;&#x3002; Presenter&#x5B9E;&#x73B0;&#x7C7B;Presenter&#x5B9E;&#x73B0;&#x7C7B; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public class ExamArrangePresenter implements ExamArrangeContract.Presenter { private ExamArrangeContract.View mView; private ArrayList&lt;ExamArrange&gt; arranges; public ExamArrangePresenter(ExamArrangeContract.View mView) { this.mView = mView; this.mView.setPresenter(this); this.arranges = new ArrayList&lt;&gt;(); } @Override public void start() { mView.initialRecycler(arranges); } @Override public void initialDataForRecycler() { ... } @Override public void beginLoad(PtrFrameLayout frame) { for (int i = 0; i &lt; 10; i++) { arranges.add(new ExamArrange()); } mView.notifyRefreshRecycler(); mView.stopRefresh(); } @Override public void loadMore() { simulateLoadMoreData(); } private void simulateLoadMoreData() { Observable.timer(2, TimeUnit.SECONDS, AndroidSchedulers.mainThread()) .map(new Func1&lt;Long, Object&gt;() { @Override public Object call(Long aLong) { loadMoreData(); mView.notifyRefreshRecycler(); return null; } }).subscribe(); } private void loadMoreData() { List&lt;ExamArrange&gt; moreList = new ArrayList&lt;&gt;(); for (int i = 1; i &lt; 13; i++) { ExamArrange arrange = new ExamArrange(); arrange.setName(&quot;fuck &quot; + 1); moreList.add(arrange); } arranges.addAll(moreList); }} Bind&#x6700;&#x540E;&#x5728;Activity&#x4E2D;&#x5C06;&#x4E24;&#x8005;&#x7ED1;&#x5B9A;&#x3002; 12345678910111213141516171819public class ExamArrangeActivity extends AppCompatActivity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_exam_arrange); ExamArrangeFragment fragment = (ExamArrangeFragment) getSupportFragmentManager().findFragmentById(R.id.exam_arrangement_contain); if (fragment == null) { fragment = ExamArrangeFragment.newInstance(); ActivityUtils.addFragmentToActivity(getSupportFragmentManager(), fragment, R.id.exam_arrangement_contain); } ExamArrangePresenter presenter = new ExamArrangePresenter(fragment); }} &#x6700;&#x540E;&#x518D;&#x8BF4;&#x4E24;&#x53E5;&#x4E0A;&#x9762;&#x4ECB;&#x7ECD;&#x7684;&#x65B9;&#x6CD5;&#x4E5F;&#x53EA;&#x662F;MVP&#x5728;Android&#x4E0A;&#x7684;&#x4E00;&#x79CD;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#xFF0C;&#x5176;&#x5B9E;&#x8FD8;&#x6709;&#x628A;Acivity&#x5F53;&#x6210;presenter&#x7684;&#x505A;&#x6CD5;&#xFF0C;&#x591A;&#x79CD;&#x65B9;&#x5F0F;&#x4E0D;&#x4E00;&#x800C;&#x8DB3;&#x3002;&#x4E0D;&#x8FC7;&#x4F7F;&#x7528;&#x4E86;MVP&#x67B6;&#x6784;&#x4E4B;&#x540E;UI&#x548C;&#x903B;&#x8F91;&#x90FD;&#x66F4;&#x4E3A;&#x6E05;&#x6670;&#x8FD9;&#x4E5F;&#x662F;&#x663E;&#x800C;&#x6613;&#x89C1;&#x7684;&#xFF0C;&#x5E0C;&#x671B;&#x5927;&#x5BB6;&#x80FD;&#x6709;&#x6240;&#x6536;&#x83B7;&#xFF0C;&#x8BA9;Android&#x5DE5;&#x7A0B;&#x66F4;&#x4E3A;&#x6E05;&#x6670;&#x3002;","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://lfkdsk.github.io/tags/Android/"}]},{"title":"源码阅读0:ArrayList/LinkedList","slug":"sr0","date":"2016-09-05T23:13:32.000Z","updated":"2016-09-08T01:05:37.000Z","comments":true,"path":"2016/09/06/sr0/","link":"","permalink":"https://lfkdsk.github.io/2016/09/06/sr0/","excerpt":"","text":"ArrayList &#x548C; LinkedList &#x662F;&#x5728;&#x5F00;&#x53D1;&#x8FC7;&#x7A0B;&#x4E2D; &#x5E38;&#x7528;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784; &#x5206;&#x522B;&#x4EE3;&#x8868;&#x4E86;&#x6570;&#x7EC4;&#x548C;&#x94FE;&#x8868;&#xFF0C;&#x5176;&#x5B9E;&#x672C;&#x8EAB;&#x7684;&#x5B9E;&#x73B0;&#x90FD;&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF0C;&#x6240;&#x4EE5;Source Code Read &#x5C31;&#x5148;&#x4ECE;&#x8FD9;&#x4E24;&#x4E2A;&#x5F00;&#x59CB;&#x3002; ArrayListArrayList &#x4ECE;&#x540D;&#x5B57;&#x4E0A;&#x5C31;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x8FD9;&#x4E2A;&#x5BB9;&#x5668;&#x7684;&#x672C;&#x8D28;&#xFF0C;&#x662F;&#x7528;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x53CD;&#x590D;&#x7684;&#x8FDB;&#x884C;&#x81EA;&#x589E;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;ArrayList&#x51E0;&#x4E4E;&#x662F;&#x6700;&#x7ECF;&#x5E38;&#x88AB;&#x4F7F;&#x7528;&#x7684;List&#x7684;&#x5B9E;&#x73B0;&#x4E86;&#xFF0C;&#x5E73;&#x65F6;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7EBF;&#x6027;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x901A;&#x5E38;&#x90FD;&#x4F1A;&#x9009;&#x62E9;ArrayList&#x3002;&#x4F46;&#x662F;&#x5BB9;&#x5668;&#x7684;&#x9009;&#x53D6;&#x4E5F;&#x8981;&#x8003;&#x8651;&#x5230;&#x5B9E;&#x73B0;&#x7684;&#x65B9;&#x5F0F;&#x548C;&#x4F60;&#x9700;&#x8981;&#x7684;&#x5E94;&#x7528;&#x3002;&#x6BD4;&#x5982;&#x8BF4;&#x6570;&#x7EC4;&#x957F;&#x4E8E;&#x7D22;&#x5F15;&#xFF0C;&#x5F31;&#x4E8E;&#x6269;&#x5BB9;&#x548C;&#x5220;&#x9664;&#xFF0C;&#x4F46;&#x662F;&#x94FE;&#x8868;&#x957F;&#x4E8E;&#x6269;&#x5BB9;&#x548C;&#x5220;&#x9664;&#xFF0C;&#x4F46;&#x662F;&#x5BFB;&#x627E;&#x67D0;&#x4E2A;&#x5177;&#x4F53;&#x8282;&#x70B9;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6CA1;&#x529E;&#x6CD5;&#x9760;&#x57FA;&#x5740;&#x5BFB;&#x5740;&#x6765;&#x5B9E;&#x73B0;&#xFF0C;&#x800C;&#x662F;&#x8981;&#x7528;&#x6307;&#x9488;&#x4E0D;&#x65AD;&#x7684;&#x8D70;&#x624D;&#x80FD;&#x8D70;&#x5230;&#xFF0C;&#x8FD9;&#x90FD;&#x662F;&#x6211;&#x4EEC;&#x9009;&#x62E9;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x65F6;&#x5019;&#x9700;&#x8981;&#x8003;&#x8651;&#x7684;&#x3002; &#x6700;&#x5C0F;&#x5B9E;&#x73B0;&#x4E0B;&#x9762;&#x7ED9;&#x51FA;ArrayList&#x80FD;&#x7528;&#x7684;&#x6700;&#x5C0F;&#x5B9E;&#x73B0;&#xFF1A; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128import java.util.Iterator;import java.util.NoSuchElementException;/** * MyArrayList * * @author liufengkai * Created by liufengkai on 16/7/8. */public class MyArrayList&lt;AnyType&gt; { private static final int DEFAULTS_CAPACITY = 10; private int theSize; private AnyType[] theItems; public MyArrayList() { clear(); } public void clear() { theSize = 0; ensureCapacity(DEFAULTS_CAPACITY); } public int size() { return theSize; } public boolean isEmpty() { return size() == 0; } public void trimToSize() { ensureCapacity(size()); } public AnyType get(int idx) { if (idx &lt; 0 || idx &gt;= size()) { throw new ArrayIndexOutOfBoundsException(); } return theItems[idx]; } public AnyType set(int idx, AnyType newVal) { if (idx &lt; 0 || idx &gt;= size()) { throw new ArrayIndexOutOfBoundsException(); } AnyType old = theItems[idx]; theItems[idx] = newVal; return old; } public void ensureCapacity(int newCapacity) { if (newCapacity &lt; theSize) return; AnyType[] old = theItems; theItems = (AnyType[]) new Object[newCapacity]; for (int i = 0; i &lt; size(); i++) { theItems[i] = old[i]; } } public boolean add(AnyType x) { add(size(), x); return true; } public void add(int index, AnyType x) { if (theItems.length == size()) { ensureCapacity(size() * 2 + 1); } for (int i = theSize; i &gt; index; i--) { theItems[i] = theItems[i - 1]; } theItems[index] = x; theSize++; } public AnyType remove(int index) { AnyType removeItem = theItems[index]; for (int i = index; i &lt; size() - 1; i++) { theItems[i] = theItems[i + 1]; } theSize--; return removeItem; } public Iterator&lt;AnyType&gt; iterator() { return new ArrayListIterator(); } private class ArrayListIterator implements Iterator&lt;AnyType&gt; { private int current = 0; @Override public boolean hasNext() { return current &lt; size(); } @Override public AnyType next() { if (!hasNext()) throw new NoSuchElementException(); return theItems[current++]; } @Override public void remove() { MyArrayList.this.remove(--current); } }} ArrayList&#x7684;&#x5B9E;&#x9645;&#x5B58;&#x50A8;&#x662F;&#x901A;&#x8FC7;&#x6CDB;&#x578B;&#x6570;&#x7EC4;theItems&#x6765;&#x5B58;&#x50A8;&#x7684;&#xFF0C;&#x5176;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x7684;&#x65B9;&#x6CD5; 123456789101112public void ensureCapacity(int newCapacity) { if (newCapacity &lt; theSize) return; AnyType[] old = theItems; theItems = (AnyType[]) new Object[newCapacity]; for (int i = 0; i &lt; size(); i++) { theItems[i] = old[i]; }} &#x91CD;&#x8BBE;ArrayList&#x7684;&#x5BB9;&#x91CF;&#xFF0C;&#x5E76;&#x4E14;&#x628A;&#x539F;&#x6765;&#x7684;&#x6570;&#x636E;&#x62F7;&#x8D1D;&#x8FC7;&#x6765;&#x3002; ArrayList&#x662F;&#x4E00;&#x4E2A;&#x81EA;&#x589E;&#x7684;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#xFF0C;&#x6240;&#x4EE5;&#x8BF4;&#x5F53;&#x5BB9;&#x91CF;&#x6EE1;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x4F1A;&#x81EA;&#x52A8;&#x8FD0;&#x884C;&#x4E0A;&#x8FF0;&#x51FD;&#x6570;&#x589E;&#x52A0;&#x5BB9;&#x91CF;&#xFF0C;&#x589E;&#x52A0;&#x591A;&#x5C11;&#x5462;&#xFF1F;&#x6839;&#x636E;&#x4E4B;&#x524D;&#x5B66;&#x8FC7;&#x7684;&#x77E5;&#x8BC6;&#x5E94;&#x8BE5;&#x81EA;&#x589E;&#x4E3A;&#x539F;&#x6765;&#x7684;&#x4E8C;&#x500D;&#x3002; &#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x53D1;&#x751F;&#x5728;ArrayList&#x4E2D;add&#x53D1;&#x73B0;&#x81EA;&#x5DF1;&#x7684;&#x5BB9;&#x91CF;&#x4E0D;&#x8DB3;&#x7684;&#x65F6;&#x5019;: 123if (theItems.length == size()) { ensureCapacity(size() * 2 + 1);} &#x7531;&#x4E8E;&#x662F;&#x6570;&#x7EC4;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x63D2;&#x5165;&#x548C;&#x5220;&#x9664;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x90FD;&#x4F1A;&#x8FDB;&#x884C;&#x6570;&#x7EC4;&#x7684;&#x79FB;&#x52A8;&#xFF1A; 123for (int i = index; i &lt; size() - 1; i++) { theItems[i] = theItems[i + 1];} &#x9664;&#x6B64;&#x4E4B;&#x5916;&#xFF0C;&#x5C31;&#x662F;&#x96C6;&#x6210;Iterator&#x63A5;&#x53E3;&#x5B9E;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;&#x8FED;&#x4EE3;&#x5668;&#xFF0C;&#x6211;&#x4EEC;&#x80FD;&#x4ECE;&#x4E2D;&#x770B;&#x51FA;&#x8FED;&#x4EE3;&#x5668;&#x7684;&#x5B9E;&#x73B0;&#x539F;&#x7406;&#x5341;&#x5206;&#x7684;&#x7B80;&#x5355;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x8FED;&#x4EE3;&#x5668;&#x4E5F;&#x53EA;&#x9700;&#x8981;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;current&#x6307;&#x5411;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x6574;&#x5F62;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x8D8A;&#x6CA1;&#x8D8A;&#x754C;&#x53EA;&#x9700;&#x8981;&#x5224;&#x65AD;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x548C;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x7684;&#x5C3A;&#x5BF8;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; PS&#xFF1A;Iterator&#x5B9E;&#x73B0;&#x7684;&#x65B9;&#x6CD5;remove()&#x5220;&#x9664;&#x7684;&#x662F;&#x6700;&#x540E;&#x4E00;&#x6B21;hasNext()&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x5220;&#x9664;&#x7684;&#x65F6;&#x5019;&#x4E5F;&#x5C31;&#x662F;&#x5220;&#x9664;current&#x66F4;&#x65B0;&#x524D;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x5E76;&#x4E14;&#x56E0;&#x4E3A;&#x5220;&#x9664;&#x4E86;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x7684;&#x6570;&#x636E;&#x8981;&#x5411;&#x524D;&#x79FB;&#x52A8;&#xFF0C;&#x6240;&#x4EE5;&#x662F;&#x2014;current&#x3002; &#x7CFB;&#x7EDF;&#x5B9E;&#x73B0;&#x7CFB;&#x7EDF;&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x6CD5;&#x6CA1;&#x6709;&#x589E;&#x52A0;&#x4EC0;&#x4E48;&#x7279;&#x522B;&#x7684;&#xFF0C;&#x6BD4;&#x5982;&#x91CD;&#x8BBE;&#x5927;&#x5C0F;&#x7684;&#x65F6;&#x5019;&#x4F7F;&#x7528;: 12System.arraycopy(elementData, index+1, elementData, index, numMoved); &#x6765;&#x91CD;&#x65B0;&#x62F7;&#x8D1D;&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x4E00;&#x4E9B;SubList&#x7684;&#x65B9;&#x6CD5;&#xFF0C;restrainAll&#x65B9;&#x6CD5;&#x3002; &#x53E6;&#x5916;&#x5C31;&#x662F;&#xFF1A; 1transient Object[] elementData; // non-private to simplify nested class access &#x7528;transient&#x6765;&#x6807;&#x793A;&#x5B9E;&#x9645;&#x5B58;&#x50A8;&#x7684;&#x6CDB;&#x578B;&#x5BF9;&#x8C61; &#xFF0C;&#x8FD9;&#x6837;&#x6CDB;&#x578B;&#x6570;&#x7EC4;&#x7684;&#x5C31;&#x4E0D;&#x4F1A;&#x88AB;&#x7CFB;&#x7EDF;&#x4FDD;&#x62A4;&#xFF0C;&#x4E0D;&#x53C2;&#x4E0E;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x52A8;&#x4F5C;&#x3002; &#x53E6;&#x5916;ArrayList&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x5E76;&#x53D1;&#x5BB9;&#x5668;&#xFF0C;&#x6240;&#x4EE5;&#x590D;&#x6742;&#x7684;&#x7EBF;&#x7A0B;&#x95EE;&#x9898;&#x4E2D;&#x4E0D;&#x8981;&#x4F7F;&#x7528;ArrayList&#x3002; LinkedListLinkedList&#x662F;&#x4F7F;&#x7528;&#x94FE;&#x8868;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002; &#x6700;&#x5C0F;&#x5B9E;&#x73B0;","categories":[],"tags":[{"name":"源码阅读","slug":"源码阅读","permalink":"https://lfkdsk.github.io/tags/源码阅读/"}]},{"title":"AndroidTips0:动态生成ID？","slug":"generate-view-id","date":"2016-07-14T07:24:39.000Z","updated":"2016-09-06T11:36:46.000Z","comments":true,"path":"2016/07/14/generate-view-id/","link":"","permalink":"https://lfkdsk.github.io/2016/07/14/generate-view-id/","excerpt":"","text":"&#x52A8;&#x6001;ID&#xFF1F;1234&lt;android.support.v7.widget.RecyclerView android:id=&quot;@+id/box_subscribe_home_page_recycler&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;/&gt; &#x6211;&#x4EEC;&#x6700;&#x4E60;&#x60EF;&#x7684;ID&#x8BBE;&#x7F6E;&#x65B9;&#x5F0F;&#x5927;&#x6982;&#x5C31;&#x662F;&#x8FD9;&#x6837;&#x4E86;&#xFF0C;&#x5728;xml&#x4E2D;&#x76F4;&#x63A5;&#x4F7F;&#x7528;android:id&#x4E3A;&#x4E00;&#x4E2A;View&#x6DFB;&#x52A0;ID&#x3002;&#x4F46;&#x662F;&#x8FD9;&#x5E76;&#x4E0D;&#x80FD;&#x89E3;&#x51B3;&#x6240;&#x6709;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x4EEC;&#x6709;&#x5F88;&#x591A;&#x7684;View&#x90FD;&#x662F;&#x52A8;&#x6001;&#x521B;&#x5EFA;&#xFF0C;&#x8FD8;&#x6709;&#x7684;&#x662F;&#x81EA;&#x5B9A;&#x4E49;&#x63A7;&#x4EF6;&#x751F;&#x6210;&#x7684;&#xFF0C;&#x4F8B;&#x5982;&#x6211;&#x4EEC;&#x8981;&#x5728;&#x4EE3;&#x7801;&#x91CC;&#x5B9E;&#x73B0;&#x76F8;&#x5BF9;&#x5E03;&#x5C40;&#xFF0C;&#x90A3;&#x6211;&#x4EEC;&#x5C31;&#x5FC5;&#x987B;&#x62FF;&#x5230;&#x76F8;&#x5BF9;&#x7684;&#x57FA;&#x51C6;View&#x7684;ID&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x6837;&#x5C31;&#x6CA1;&#x529E;&#x6CD5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;xml&#x8FDB;&#x884C;&#x5B9A;&#x4E49;&#x4E86;&#x3002; &#x4E0D;&#x8FC7;&#x6211;&#x60F3;&#x5927;&#x5BB6;&#x90FD;&#x77E5;&#x9053;&#x5C31;&#x60F3;&#x6211;&#x4EEC;&#x901A;&#x5E38;&#x80FD;&#x591F;&#x7528;view.getId()&#x4E00;&#x6837;&#x83B7;&#x53D6;&#x5230;View&#x7684;ID&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x80FD;&#x591F;&#x7528;view.setId(int id)&#x6765;&#x4E3A;View&#x8BBE;&#x5B9A;ID&#x3002;&#x4E0D;&#x8FC7;&#x8FD9;&#x5C31;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;&#x5F88;&#x4E25;&#x91CD;&#x7684;&#x95EE;&#x9898;ID&#x662F;&#x4E2A;int&#x7C7B;&#x578B;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x90A3;&#x6211;&#x4EEC;&#x4EC0;&#x4E48;&#x90FD;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x5417;&#xFF1F; ID&#x7684;&#x4F7F;&#x7528;&#x65B9;&#x5F0F;&#x968F;&#x4FBF;&#x7684;&#x6253;&#x5F00;&#x4E00;&#x4E2A;Android&#x5DE5;&#x7A0B;&#x7684;R&#x6587;&#x4EF6;&#x6211;&#x4EEC;&#x90FD;&#x80FD;&#x770B;&#x5230;&#x4E0B;&#x9762;&#x7684;&#x573A;&#x666F;&#xFF1A; 1234567891011121314151617181920212223public final class R { public static final class anim { public static final int abc_fade_in=0x7f050000; public static final int abc_fade_out=0x7f050001; public static final int abc_grow_fade_in_from_bottom=0x7f050002; public static final int abc_popup_enter=0x7f050003; public static final int abc_popup_exit=0x7f050004; public static final int abc_shrink_fade_out_from_bottom=0x7f050005; public static final int abc_slide_in_bottom=0x7f050006; public static final int abc_slide_in_top=0x7f050007; public static final int abc_slide_out_bottom=0x7f050008; public static final int abc_slide_out_top=0x7f050009; public static final int course_in=0x7f05000a; public static final int course_item_in=0x7f05000b; public static final int course_item_out=0x7f05000c; public static final int course_out=0x7f05000d; public static final int dialog_fade_in_center=0x7f05000e; public static final int dialog_fade_out_center=0x7f05000f; public static final int dialog_slide_in_bottom=0x7f050010; public static final int dialog_slide_in_top=0x7f050011; public static final int dialog_slide_out_bottom=0x7f050012; public static final int dialog_slide_out_top=0x7f050013; ... &#x6BCF;&#x4E00;&#x4E2A;&#x6211;&#x4EEC;&#x7684;&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#xFF0C;&#x65E0;&#x8BBA;&#x662F;&#x52A8;&#x753B;&#xFF0C;&#x56FE;&#x7247;&#xFF0C;View&#xFF0C;&#x5168;&#x90E8;&#x90FD;&#x5728;R&#x6587;&#x4EF6;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x5BF9;&#x5E94;&#x7684;16&#x8FDB;&#x5236;&#x7684;&#x6570;&#x636E;&#x4E0E;&#x4E4B;&#x5BF9;&#x5E94;&#xFF0C;&#x6211;&#x4EEC;&#x5411;&#x4E0B;&#x770B;&#x5C31;&#x80FD;&#x770B;&#x5230;&#x6211;&#x4EEC;&#x4E3A;View&#x6CE8;&#x518C;&#x7684;ID&#x3002; 123456789101112131415 public static final int TwoSideStyleRangeSlider_pressedTargetRadius = 3; /** &lt;p&gt;This symbol is the offset where the {@link com.lfk.classtabledemo.R.attr#startMax} attribute&apos;s value can be found in the {@link #TwoSideStyleRangeSlider} array. &lt;p&gt;Must be an integer value, such as &quot;&lt;code&gt;100&lt;/code&gt;&quot;.&lt;p&gt;This may also be a reference to a resource (in the form&quot;&lt;code&gt;@[&lt;i&gt;package&lt;/i&gt;:]&lt;i&gt;type&lt;/i&gt;:&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;&quot;) ortheme attribute (in the form&quot;&lt;code&gt;?[&lt;i&gt;package&lt;/i&gt;:][&lt;i&gt;type&lt;/i&gt;:]&lt;i&gt;name&lt;/i&gt;&lt;/code&gt;&quot;)containing a value of this type. @attr name com.lfk.classtabledemo:startMax */ public static final int TwoSideStyleRangeSlider_startMax = 8; &#x8FD9;&#x4E24;&#x4E2A;&#x662F;&#x4E00;&#x4E2A;&#x53CC;&#x5411;&#x6EDA;&#x52A8;&#x6761;&#x7684;styleable&#x7684;&#x5B9A;&#x4E49;&#x6570;&#x636E;&#xFF0C;&#x6211;&#x4EEC;&#x89C2;&#x5BDF;&#x5230;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x7684;&#x5B9A;&#x4E49;&#x6570;&#x636E;&#x7684;&#x5341;&#x516D;&#x8FDB;&#x5236;&#x6570;&#x662F;&#x975E;&#x5E38;&#x7684;&#x5C0F;&#x7684;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x6CE8;&#x518C;&#x7684;&#x5C11;&#x751A;&#x81F3;&#x662F;&#x4E2A;&#x4F4D;&#x6570;&#xFF0C;&#x90A3;&#x6211;&#x4EEC;&#x5728;&#x624B;&#x52A8;&#x6CE8;&#x518C;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x66F4;&#x4E0D;&#x80FD;&#x8F7B;&#x4E3E;&#x5984;&#x52A8;&#x4E86;&#xFF0C;&#x56E0;&#x4E3A;&#x4E00;&#x4E0D;&#x5C0F;&#x5FC3;&#x6211;&#x4EEC;&#x53EF;&#x80FD;&#x5C31;&#x4F1A;&#x91CD;&#x590D;&#x5B9A;&#x4E49;&#x4E24;&#x4E2A;View&#x5230;&#x4E00;&#x4E2A;ID&#x4E0A;&#xFF0C;&#x8FD9;&#x79CD;&#x672A;&#x5B9A;&#x4E49;&#x7684;&#x884C;&#x4E3A;&#x7684;&#x540E;&#x679C;&#x4E5F;&#x662F;&#x672A;&#x77E5;&#x7684;&#x3002;&#x5E76;&#x4E14;IDE&#x4E5F;&#x4F1A;&#x5728;&#x4F60;&#x8BD5;&#x56FE;&#x624B;&#x52A8;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;int&#x503C;&#x7684;&#x65F6;&#x5019;&#x7ED9;&#x4F60;&#x8B66;&#x544A;&#x3002; &#x65B9;&#x6848;&#x4E00;&#xFF1A;&#x628A;&#x7533;&#x8BF7;&#x5230;&#x7684;id&#x4ECE;xml&#x4F20;&#x5165;&#x7A0B;&#x5E8F;&#x4E2D;&#x8FD9;&#x662F;&#x4E00;&#x79CD;&#x6BD4;&#x8F83;&#x53D6;&#x5DE7;&#x7684;&#x529E;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x7533;&#x8BF7;&#x5BF9;&#x5E94;View&#x7684;ID&#x5199;&#x8FDB;&#x6574;&#x4E2A;&#x81EA;&#x5B9A;&#x4E49;&#x63A7;&#x4EF6;&#x7684;styleable&#x53C2;&#x6570;&#x91CC;&#x9762;&#x7136;&#x540E;&#x5F53;&#x6210;&#x53C2;&#x6570;&#x4F20;&#x5165;&#x3002; 1234567891011121314&lt;declare-styleable name=&quot;TwoSideEditorMenuLine&quot;&gt; &lt;attr name=&quot;iconImage&quot; format=&quot;reference&quot; /&gt; &lt;attr name=&quot;labelText&quot; format=&quot;string&quot; /&gt; &lt;attr name=&quot;editorHintText&quot; format=&quot;string&quot; /&gt; &lt;attr name=&quot;editorHintColor&quot; format=&quot;color&quot; /&gt; &lt;attr name=&quot;editorColor&quot; format=&quot;color&quot; /&gt; &lt;attr name=&quot;iconID&quot; format=&quot;reference&quot; /&gt; &lt;attr name=&quot;editorID&quot; format=&quot;reference&quot; /&gt; &lt;attr name=&quot;labelID&quot; format=&quot;reference&quot; /&gt; &lt;attr name=&quot;editorBackGroundColor&quot; format=&quot;color|reference&quot; /&gt; &lt;attr name=&quot;editorTextSize&quot; format=&quot;dimension&quot; /&gt; &lt;attr name=&quot;editorInputType&quot; format=&quot;integer&quot; /&gt;&lt;/declare-styleable&gt; 1234567891011&lt;com.lfk.classtabledemo.View.TwoSideEditorMenuLine android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;48dp&quot; android:layout_marginTop=&quot;2dp&quot; lfkdsk:editorHintColor=&quot;@color/circle_button_gray&quot; lfkdsk:editorHintText=&quot;&#x6DFB;&#x52A0;&#x4E0A;&#x8BFE;&#x5730;&#x70B9;&quot; lfkdsk:editorInputType=&quot;@integer/input_text&quot; lfkdsk:iconID=&quot;@+id/class_table_manual_add_class_location_icon&quot; lfkdsk:iconImage=&quot;@mipmap/icon_classdetail_location&quot; lfkdsk:labelID=&quot;@+id/class_table_manual_add_class_location_label&quot; lfkdsk:labelText=&quot;&#x5730;&#x70B9;&quot; /&gt; &#x6548;&#x679C;&#x56FE;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF1A; &#x6211;&#x4EEC;&#x628A;icon&#x7684;ID&#x901A;&#x8FC7;&#x6CE8;&#x518C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x4F20;&#x5165;&#xFF0C;&#x5728;&#x4EE3;&#x7801;&#x4E2D;&#x8BBE;&#x7F6E;&#x8FBE;&#x5230;&#x4F7F;&#x7528;&#x76F8;&#x5BF9;&#x5E03;&#x5C40;&#x7684;&#x6548;&#x679C;&#x3002; 123iconID = array.getResourceId(R.styleable.TwoSideEditorMenuLine_iconID, 0);labelID = array.getResourceId(R.styleable.TwoSideEditorMenuLine_labelID, 0); &#x5728;&#x5E03;&#x5C40;&#x4E2D;&#x83B7;&#x53D6;&#x7136;&#x540E;&#x8BBE;&#x7F6E;&#x3002; &#x65B9;&#x6CD5;&#x4E8C;&#xFF1A;View.generateViewId();Google&#x5728;API17&#x4E4B;&#x540E;&#x7EC8;&#x4E8E;&#x610F;&#x8BC6;&#x5230;&#x4E86;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x6240;&#x4EE5;&#x6B64;&#x540E;&#x7684;View&#x6E90;&#x7801;&#x4E2D;&#x5C31;&#x591A;&#x4E86;&#x51E0;&#x4E2A;&#x65B9;&#x6CD5;&#x548C;&#x52A8;&#x6001;id&#x76F8;&#x5173;&#x7684;&#x65B9;&#x6CD5;&#x3002; 12345678910111213141516171819/** * Sets the identifier for this view. The identifier does not have to be * unique in this view&apos;s hierarchy. The identifier should be a positive * number. * * @see #NO_ID * @see #getId() * @see #findViewById(int) * * @param id a number used to identify the view * * @attr ref android.R.styleable#View_id */public void setId(@IdRes int id) { mID = id; if (mID == View.NO_ID &amp;&amp; mLabelForId != View.NO_ID) { mID = generateViewId(); }} &#x6BD4;&#x5982;&#x8BBE;&#x7F6E;Id&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;17&#x4E4B;&#x524D;&#x662F;&#x6CA1;&#x6709;&#x8FD9;&#x4E2A;if&#x8BED;&#x53E5;&#x7684;&#xFF0C;&#x8FD9;&#x4E2A;if&#x8BED;&#x53E5;&#x5C31;&#x662F;&#x8BF4;&#x5982;&#x679C;&#x4F60;&#x7ED9;&#x4ED6;&#x8BBE;&#x7F6E;&#x4E86;&#x4E00;&#x4E2A;NO_ID&#x7CFB;&#x7EDF;&#x9ED8;&#x8BA4;&#x662F;&#xFF0D;1&#x7684;&#x503C;&#xFF0C;View&#x5C31;&#x4F1A;&#x81EA;&#x52A8;&#x7528;generateViewId()&#x6765;&#x7ED9;&#x81EA;&#x5DF1;&#x7533;&#x8BF7;&#x4E00;&#x4E2A;ID&#xFF0C;&#x6240;&#x4EE5;&#x8BF4;&#x76F4;&#x63A5;&#x5199;: 1view.setId(View.NO_ID); &#x5C31;&#x53EF;&#x4EE5;&#x81EA;&#x52A8;&#x6CE8;&#x518C;ID&#x4E86;&#x3002; &#x4ECE;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x5B9E;&#x9645;&#x4E0A;&#x7684;&#x8C03;&#x7528;&#x65B9;&#x6CD5;&#x662F;View.generateViewId();&#xFF0C;&#x4F46;&#x662F;&#x4E0A;&#x9762;&#x7684;&#x6CE8;&#x91CA;&#x91CC;&#x9762;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x53E5;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x8BDD;&#xFF1A; Sets the identifier for this view. The identifier does not have to be unique in this view&#x2019;s hierarchy. The identifier should be a positive number. &#x4ECE;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x4E86;&#x5176;&#x5B9E;View&#x7684;id&#x5E76;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x8981;&#x5B8C;&#x5168;&#x76F8;&#x540C;&#x7684;&#x5728;View&#x6811;&#x4E2D;&#xFF0C;&#x53EA;&#x8981;identifier&#x662F;&#x6B63;&#x6570;&#x5C31;&#x597D;&#x4E86;&#x3002;&#x4F46;&#x662F;&#x6211;&#x8FD8;&#x662F;&#x5EFA;&#x8BAE;&#x80FD;&#x6709;&#x4E00;&#x4E2A;&#x552F;&#x4E00;&#x7684;id&#x7ED9;View&#xFF0C;&#x56E0;&#x4E3A;findViewById&#x65F6;&#x5BF9;View&#x6811;&#x8FDB;&#x884C;&#x4E86;depth-first&#x904D;&#x5386;&#xFF0C;&#x5F88;&#x53EF;&#x80FD;&#x627E;&#x5230;&#x7684;&#x4E0D;&#x662F;&#x6211;&#x4EEC;&#x60F3;&#x8981;&#x7684;View&#x3002; &#x65B9;&#x6CD5;&#x4E09;&#xFF1A;&#x770B;&#x770B;generateViewId()&#x7684;&#x6E90;&#x7801;&#x662F;&#x600E;&#x4E48;&#x5B9E;&#x73B0;&#x7684;12345678910111213141516171819 private static final AtomicInteger sNextGeneratedId = new AtomicInteger(1); /** * Generate a value suitable for use in {@link #setId(int)}. * This value will not collide with ID values generated at build time by aapt for R.id. * * @return a generated ID value */ public static int generateViewId() { for (;;) { final int result = sNextGeneratedId.get(); // aapt-generated IDs have the high byte nonzero; clamp to the range under that. int newValue = result + 1; if (newValue &gt; 0x00FFFFFF) newValue = 1; // Roll over to 1, not 0. if (sNextGeneratedId.compareAndSet(result, newValue)) { return result; } } } &#x56E0;&#x4E3A;&#x5F88;&#x591A;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x9879;&#x76EE;&#x7684;minSDK&#x7248;&#x672C;&#x90FD;&#x5C0F;&#x4E8E;17&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x53EF;&#x80FD;&#x6839;&#x672C;&#x5C31;&#x4E0D;&#x80FD;&#x7528;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x6765;&#x770B;&#x4E00;&#x4E0B;generateViewId()&#x65B9;&#x6CD5;&#x7684;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x3002; &#x9996;&#x5148;&#x4EE3;&#x7801;&#x91CC;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;&#x5E38;&#x91CF;0x00ffffff&#x8FD9;&#x662F;&#x7CFB;&#x7EDF;&#x4E3A;View&#x7684;Id&#x5206;&#x914D;&#x7684;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x5E38;&#x6570;&#xFF0C;&#x660E;&#x663E;&#x770B;&#x5230;&#xFF0C;&#x8D85;&#x8FC7;&#x5C31;&#x5F52;&#x4E00;&#xFF0C;&#x91CD;&#x65B0;&#x5F00;&#x59CB;&#x6392;&#x5E8F;&#xFF0C;&#x4E0D;&#x8FC7;&#x8FD9;&#x4E2A;&#x5E38;&#x6570;&#x7684;&#x5341;&#x8FDB;&#x5236;&#x5927;&#x6982;&#x6709;160&#x4E07;&#x591A;&#xFF0C;&#x666E;&#x901A;&#x5E94;&#x7528;&#x5E76;&#x4E0D;&#x5BB9;&#x6613;&#x8D85;&#x8FC7;&#x3002; &#x5176;&#x4E2D;&#x7684;AtomicInteger&#xFF0C;&#x4ECE;&#x540D;&#x5B57;&#x4E5F;&#x80FD;&#x770B;&#x51FA;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x6574;&#x5F62;&#x53D8;&#x91CF;&#xFF0C;&#x548C;&#x666E;&#x901A;&#x7684;Integer&#x7684;&#x533A;&#x522B;&#x5C31;&#x662F;AtomicInteger&#x662F;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x7684;&#x589E;&#x51CF;&#x5168;&#x662F;&#x9760;&#x786C;&#x4EF6;&#x5B9E;&#x73B0;&#x7684;&#x539F;&#x5B50;&#x6307;&#x4EE4;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x9700;&#x8981;&#x5173;&#x952E;&#x5B57;&#x6216;&#x662F;&#x52A0;&#x9501;&#x5C31;&#x80FD;&#x5B9E;&#x73B0;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x3002; &#x6240;&#x4EE5;&#x8BF4;&#x770B;&#x6765;&#x5728;&#x6E90;&#x7801;&#x4E2D;&#x8FD8;&#x8003;&#x8651;&#x5230;&#x4E86;&#x5927;&#x91CF;View&#x540C;&#x65F6;&#x7533;&#x8BF7;ID&#x65F6;&#x5019;&#x7684;&#x5E76;&#x53D1;&#x95EE;&#x9898;&#xFF0C;sNextGeneratedId.compareAndSet(result, newValue)&#x662F;&#x4E00;&#x4E2A;CAS&#x64CD;&#x4F5C;&#xFF0C;CAS&#x5C31;&#x662F;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x540D;&#x7684;&#x4E00;&#x4E2A;&#x7F29;&#x5199;&#xFF0C;&#x8FD9;&#x662F;&#x4FDD;&#x8BC1;&#x6570;&#x636E;&#x5728;&#x5E76;&#x53D1;&#x60C5;&#x51B5;&#x4E0B;&#x4FDD;&#x6301;&#x5B8C;&#x6574;&#x6027;&#x7684;&#x4E00;&#x79CD;&#x65E0;&#x9501;&#x7B97;&#x6CD5;&#xFF0C;&#x52A0;&#x9501;&#x4F1A;&#x5E26;&#x6765;&#x5F88;&#x591A;&#x6027;&#x80FD;&#x95EE;&#x9898;&#xFF0C;&#x6240;&#x4EE5;CAS&#x91C7;&#x7528;&#x4E86;&#x6BD4;&#x8F83;&#x8BBE;&#x5B9A;&#x7684;&#x65B9;&#x5F0F;&#x5B9E;&#x73B0;&#x7B97;&#x6CD5;&#xFF0C;&#x4ECE;&#x7A0B;&#x5E8F;&#x4E2D;&#x53EF;&#x4EE5;&#x770B;&#x5230;result&#x548C;newValue&#x5176;&#x5B9E;&#x7684;&#x503C;&#x5E94;&#x8BE5;&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x540C;&#x65F6;&#x4F20;&#x5165;&#x5C31;&#x662F;&#x4E3A;&#x4E86;&#x5728;&#x4F7F;&#x7528;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C31;&#x662F;&#x8BF4;&#x6211;&#x4EEC;&#x628A;&#x8FD9;&#x4E2A;result&#x8FD4;&#x56DE;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6BD4;&#x8F83;&#x8FD9;&#x4E24;&#x4E2A;&#x503C;&#xFF0C;&#x56E0;&#x4E3A;&#x4E00;&#x6BB5;&#x7A0B;&#x5E8F;&#x53EF;&#x80FD;&#x7531;&#x591A;&#x6B21;&#x8FDB;&#x5165;&#xFF0C;&#x6240;&#x4EE5;&#x53D8;&#x91CF;&#x7684;&#x503C;&#x53EF;&#x80FD;&#x4F1A;&#x4FEE;&#x6539;&#xFF0C;CAS&#x7684;&#x6BD4;&#x8F83;&#x5C31;&#x662F;&#x4F7F;&#x7528;&#x539F;&#x503C;&#x7684;&#x5907;&#x4EFD;&#xFF0C;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#xFF0C;&#x5F53;&#x8FD4;&#x56DE;&#x65F6;&#xFF0C;&#x5982;&#x679C;&#x6BD4;&#x8F83;&#x76F8;&#x540C;&#x5C31;&#x4FEE;&#x6539;&#x6210;&#x65B0;&#x7684;&#x6570;&#x503C;&#xFF0C;&#x4E0D;&#x540C;&#x5C31;&#x4E0D;&#x6539;&#x53D8;&#x3002; &#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x8FD9;&#x4E2A;&#x9759;&#x6001;&#x65B9;&#x6CD5;&#x62F7;&#x8D1D;&#x51FA;&#x6765;&#xFF0C;&#x653E;&#x5230;&#x5DE5;&#x5177;&#x7C7B;&#x91CC;&#xFF0C;&#x7ED9;AtomicInteger&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x8F83;&#x5927;&#x7684;&#x8D77;&#x59CB;&#x503C;&#x3002; 1private static final AtomicInteger sNextGeneratedId = new AtomicInteger(2000); &#x5C31;&#x80FD;&#x4F7F;&#x7528;&#x4E86;&#x3002;","categories":[],"tags":[{"name":"Android：动态生成ID","slug":"Android：动态生成ID","permalink":"https://lfkdsk.github.io/tags/Android：动态生成ID/"}]},{"title":"使用DFA做文本编辑器的自动提示","slug":"dfa-auto-suggestion","date":"2016-07-10T23:59:17.000Z","updated":"2016-07-11T00:49:35.000Z","comments":true,"path":"2016/07/11/dfa-auto-suggestion/","link":"","permalink":"https://lfkdsk.github.io/2016/07/11/dfa-auto-suggestion/","excerpt":"","text":"&#x4E4B;&#x524D;&#x770B;&#x9F99;&#x4E66;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x9F99;&#x4E66;&#x63D0;&#x5230;&#x53EF;&#x4EE5;&#x5728;&#x7F16;&#x8BD1;&#x5668;&#x91CC;&#x7528;&#x52A8;&#x6001;&#x7684;&#x751F;&#x6210;&#x7684;NFA&#x81EA;&#x52A8;&#x673A;&#x6765;&#x52A8;&#x6001;&#x5339;&#x914D;&#x81EA;&#x5DF1;&#x7684;&#x8F93;&#x5165;&#x4E32;&#xFF0C;NFA&#x7684;&#x7B80;&#x5355;&#x5B9E;&#x73B0;&#x5176;&#x5B9E;&#x5199;&#x8D77;&#x6765;&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x662F;&#x5B9E;&#x9645;&#x51ED;&#x611F;&#x89C9;&#x5199;&#x5B8C;&#x4E4B;&#x540E;&#xFF0C;&#x5374;&#x89C9;&#x5F97;&#x5E76;&#x4E0D;&#x662F;&#x975E;&#x5E38;&#x7684;&#x597D;&#x7528;&#xFF0C;&#x5728;&#x5904;&#x7406;&#x81EA;&#x5DF1;&#x5DF2;&#x7ECF;&#x8F93;&#x5165;&#x8FC7;&#x7684;&#x4E32;&#xFF0C;&#x5982;&#x679C;&#x8FD8;&#x8981;&#x5904;&#x7406;&#x7A7A;&#x4E32;&#x548C;&#x4E00;&#x4E2A;&#x7B26;&#x53F7;&#x5BF9;&#x5E94;&#x591A;&#x79CD;&#x8DEF;&#x5F84;&#x5C31;&#x52BF;&#x5FC5;&#x6D89;&#x53CA;&#x56DE;&#x6EAF;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x5C31;&#x52A8;&#x6001;&#x751F;&#x6210;&#x4E86;&#x4E00;&#x4E2A;DFA&#xFF0C;&#x5E94;&#x8BE5;&#x4E0D;&#x662F;&#x6700;&#x7B80;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x4E5F;&#x80FD;&#x6EE1;&#x8DB3;&#x9700;&#x6C42;&#x3002; DFA&#x72B6;&#x6001;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116package sample;import java.util.ArrayList;import java.util.HashMap;import java.util.Map;/** * Dfa &#x72B6;&#x6001; * * @author liufengkai * Created by liufengkai on 16/7/10. */public class DfaState implements Comparable&lt;DfaState&gt; { private static int DFA_ID_COUNT = 0; /** * state id */ private int stateId; /** * transition set * char / set of dfaState */ private Map&lt;Integer, DfaState&gt; transitionSet; private DfaState parentState; private Integer parentInput; /** * &#x6784;&#x9020;&#x65B9;&#x6CD5; * * @param input &#x8F93;&#x5165;&#x4E32; * @param parentState &#x7236;&#x8282;&#x70B9; */ public DfaState(Integer input, DfaState parentState) { this.parentInput = input; this.parentState = parentState; this.stateId = DFA_ID_COUNT++; this.transitionSet = new HashMap&lt;&gt;(); } /** * &#x6DFB;&#x52A0;&#x4E00;&#x6761;&#x8F6C;&#x79FB;&#x8BED;&#x53E5; * * @param input &#x8F93;&#x5165;&#x5B57;&#x7B26; * @param state &#x4E0B;&#x4E00;&#x4E2A;&#x72B6;&#x6001; * @return &#x8FD4;&#x56DE;&#x6DFB;&#x52A0;&#x72B6;&#x6001; */ public DfaState addTransition(int input, DfaState state) { if (!transitionSet.containsKey(input)) { transitionSet.put(input, state); } return state; } public DfaState getTransitionInput(int input) { return getTransitionSet().get(input); } public int getStateId() { return stateId; } public static int getTotalNumber() { return DFA_ID_COUNT; } public Map&lt;Integer, DfaState&gt; getTransitionSet() { return transitionSet; } public DfaState getParentState() { return parentState; } @Override public int compareTo(DfaState o) { return 0; } public int getParentInput() { return parentInput; } /** * &#x6253;&#x5370;&#x72B6;&#x6001; */ public void printState() { System.out.println(&quot;state : &quot; + getStateId()); for (Integer integer : transitionSet.keySet()) { System.out.println(&quot;symbol: &quot; + (char) integer.intValue() + &quot; to :&quot; + transitionSet.get(integer).getStateId()); transitionSet.get(integer).printState(); } } /** * &#x8FD4;&#x56DE;&#x7ED3;&#x675F;&#x72B6;&#x6001; * * @param list &#x4F20;&#x5165;&#x7ED3;&#x675F;&#x72B6;&#x6001; */ public void returnEndList(ArrayList&lt;DfaState&gt; list) { for (Integer key : transitionSet.keySet()) { DfaState cur = transitionSet.get(key); if (cur.getTransitionSet().isEmpty()) { list.add(cur); } else { cur.returnEndList(list); } } }} DFAState&#x5B9A;&#x4E49;&#x4E86;&#x5F88;&#x591A;&#x57FA;&#x7840;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6BD4;&#x5982;&#x6BCF;&#x4E2A;&#x72B6;&#x6001;&#x90FD;&#x6709;&#x552F;&#x4E00;&#x7684;ID&#x503C;&#x4E0E;&#x4E4B;&#x5BF9;&#x5E94;&#xFF0C;&#x867D;&#x7136;&#x662F;&#x4E00;&#x4E2A;DFA&#x4F46;&#x662F;&#x63D2;&#x5165;&#x7684;&#x8FC7;&#x7A0B;&#x662F;&#x53D1;&#x73B0;&#x4E0B;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x4E0D;&#x540C;&#x624D;&#x5206;&#x53C9;&#xFF0C;&#x7531;&#x6B64;&#x770B;&#x6765;&#x6BCF;&#x4E2A;&#x72B6;&#x6001;&#x90FD;&#x5E94;&#x8BE5;&#x6709;&#x552F;&#x4E00;&#x7684;&#x7236;&#x8282;&#x70B9;&#x4E0E;&#x4E4B;&#x5BF9;&#x5E94;&#xFF0C;&#x4F7F;&#x7528;&#x4E86;&#x4E00;&#x4E2A;Map&#x6765;&#x8BB0;&#x5F55;&#x6211;&#x4EEC;&#x6709;&#x54EA;&#x4E9B;&#x8DEF;&#x5F84;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x6765;&#x9012;&#x5F52;&#x67E5;&#x627E;&#x7EC8;&#x7ED3;&#x8282;&#x70B9;&#xFF0C;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x6765;&#x5012;&#x5E8F;&#x67E5;&#x627E;&#x9884;&#x6D4B;&#x5206;&#x6790;&#x51FA;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x8FD9;&#x5E76;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x6548;&#x7387;&#x5F88;&#x9AD8;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4E4B;&#x540E;&#x4E5F;&#x4F1A;&#x88AB;&#x66FF;&#x6362;&#x3002; DFABuilder&#x521B;&#x5EFA;DFA123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133package sample;import java.util.ArrayList;import java.util.HashMap;/** * Created by liufengkai on 16/7/10. */public class DfaBuilder { /** * NFA &#x72B6;&#x6001;&#x673A;&#x7684;&#x8D77;&#x59CB;&#x72B6;&#x6001; */ public DfaState startState = null; /** * &#x72B6;&#x6001;&#x673A;&#x7684;&#x5F53;&#x524D;&#x72B6;&#x6001; */ public DfaState currentState = null; /** * &#x63A5;&#x53D7;&#x72B6;&#x6001; */ public HashMap&lt;Integer, DfaState&gt; acceptState; private static final int RETURN_ID = 13; private static final int CHANGE_LINE_ID = 10; private static final int TAB_ID = 9; private static final int SPACE_ID = 32; private ArrayList&lt;Integer&gt; endIdList; private DfaCallBack dfaCallBack = null; public DfaBuilder() { // parent is null this(new DfaState(null, null)); } public DfaBuilder(DfaState startState) { this.startState = startState; this.currentState = startState; initial(); } /** * &#x6DFB;&#x52A0;&#x63A5;&#x53D7;&#x72B6;&#x6001; */ public void addAcceptState(int input, DfaState accept) { if (!acceptState.containsKey(input)) { acceptState.put(input, accept); } } private void initial() { this.acceptState = new HashMap&lt;&gt;(); this.endIdList = new ArrayList&lt;&gt;(); initialEndIdList(); } private void initialEndIdList() { endIdList.add(RETURN_ID); endIdList.add(CHANGE_LINE_ID); endIdList.add(TAB_ID); endIdList.add(SPACE_ID); } public DfaState input(int input) { // parser &#x4E86;&#x6240;&#x6709;&#x7279;&#x6B8A;&#x60C5;&#x51B5; &#x5BF9;&#x4E8E;&#x5355;&#x8BCD;&#x7684;&#x63D0;&#x793A; // &#x4E00;&#x4E2A;&#x5355;&#x8BCD;&#x5185;&#x662F;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x7A7A;&#x683C;&#x5236;&#x8868;&#x7B26;&#x548C;&#x6362;&#x884C;&#x7684;// System.out.println(input + &quot;sss&quot;); if (endIdList.contains(input)) { this.currentState = startState; return null; } // &#x5904;&#x7406;&#x4E86;&#x5F53;&#x8F93;&#x5165;&#x4E32;&#x8FD8;&#x5728;&#x8D77;&#x59CB;&#x72B6;&#x6001;&#x7684;&#x60C5;&#x51B5; if (currentState.getStateId() == startState.getStateId()) { return startInput(input); } // &#x8BF4;&#x660E;&#x72B6;&#x6001;&#x4E0D;&#x5728;&#x8D77;&#x59CB;&#x72B6;&#x6001; DfaState tempCurrent = currentState.getTransitionInput(input); if (tempCurrent == null) { tempCurrent = new DfaState(input, currentState); currentState.addTransition(input, tempCurrent); } else { if (dfaCallBack != null) dfaCallBack.onMultipleSetBack(tempCurrent, tempCurrent.getTransitionSet()); } currentState = tempCurrent; return currentState; } /** * &#x5904;&#x7406;&#x8FD8;&#x5728;&#x8F93;&#x5165;&#x4E32;&#x8D77;&#x59CB;&#x72B6;&#x6001;&#x7684;&#x60C5;&#x51B5; * * @param input &#x8F93;&#x5165; * @return current&#x72B6;&#x6001; */ public DfaState startInput(int input) { DfaState current; // &#x8F6C;&#x5165;&#x7B2C;&#x4E00;&#x4E2A;&#x8D77;&#x59CB;&#x72B6;&#x6001; if (!acceptState.containsKey(input)) { current = new DfaState(input, currentState); this.addAcceptState(input, current); } else { current = acceptState.get(input); if (dfaCallBack != null) dfaCallBack.onMultipleSetBack(current, current.getTransitionSet()); } this.currentState = current; return current; } public void setDfaCallBack(DfaCallBack dfaCallBack) { this.dfaCallBack = dfaCallBack; } public void printDfa() { for (Integer integer : acceptState.keySet()) { System.out.println(&quot;&#x63A5;&#x53D7;&#x72B6;&#x6001; &quot; + acceptState.get(integer).getStateId()); acceptState.get(integer).printState(); } } /** * &#x91CD;&#x8BBE;startState */ public void resetStartState() { this.currentState = startState; }} DFABuilder&#x5B9A;&#x4E49;&#x4E86;DFA&#x7684;&#x5F00;&#x59CB;&#x72B6;&#x6001;&#x548C;&#x73B0;&#x5728;&#x7684;&#x5339;&#x914D;&#x7684;&#x72B6;&#x6001;&#x8FD8;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E9B;&#x5982;&#x4F55;&#x7EE7;&#x7EED;&#x5904;&#x7406;&#x8282;&#x70B9;&#x7684;&#x65B9;&#x6CD5;&#x3002; &#x91CD;&#x70B9;&#x5E94;&#x8BE5;&#x770B;&#x5982;&#x4E0B;&#x7684;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#xFF1A; 1234567891011121314151617181920212223242526 public DfaState input(int input) { // parser &#x4E86;&#x6240;&#x6709;&#x7279;&#x6B8A;&#x60C5;&#x51B5; &#x5BF9;&#x4E8E;&#x5355;&#x8BCD;&#x7684;&#x63D0;&#x793A; // &#x4E00;&#x4E2A;&#x5355;&#x8BCD;&#x5185;&#x662F;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x7A7A;&#x683C;&#x5236;&#x8868;&#x7B26;&#x548C;&#x6362;&#x884C;&#x7684;// System.out.println(input + &quot;sss&quot;); if (endIdList.contains(input)) { this.currentState = startState; return null; } // &#x5904;&#x7406;&#x4E86;&#x5F53;&#x8F93;&#x5165;&#x4E32;&#x8FD8;&#x5728;&#x8D77;&#x59CB;&#x72B6;&#x6001;&#x7684;&#x60C5;&#x51B5; if (currentState.getStateId() == startState.getStateId()) { return startInput(input); } // &#x8BF4;&#x660E;&#x72B6;&#x6001;&#x4E0D;&#x5728;&#x8D77;&#x59CB;&#x72B6;&#x6001; DfaState tempCurrent = currentState.getTransitionInput(input); if (tempCurrent == null) { tempCurrent = new DfaState(input, currentState); currentState.addTransition(input, tempCurrent); } else { if (dfaCallBack != null) dfaCallBack.onMultipleSetBack(tempCurrent, tempCurrent.getTransitionSet()); } currentState = tempCurrent; return currentState; } endIdList&#x91CC;&#x9762;&#x5305;&#x542B;&#x4E00;&#x4E9B;&#x63D0;&#x793A;&#x5339;&#x914D;&#x65B9;&#x6CD5;&#x7ED3;&#x675F;&#x7684;&#x6807;&#x5FD7;&#xFF0C;&#x6BD4;&#x5982;&#x7A7A;&#x683C;&#xFF0C;&#x6362;&#x884C;&#xFF0C;&#x56DE;&#x8F66;&#xFF0C;&#x5236;&#x8868;&#x7B26;&#xFF0C;&#x6BCF;&#x6B21;&#x5339;&#x914D;&#x5230;&#x8FD9;&#x4E2A;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x628A;&#x72B6;&#x6001;&#x5207;&#x6362;&#x56DE;&#x521D;&#x59CB;&#x72B6;&#x6001;&#x3002;&#x5982;&#x679C;&#x8F93;&#x5165;&#x4E32;&#x8FD8;&#x5728;&#x521D;&#x59CB;&#x72B6;&#x6001;&#x5373;&#x7B2C;&#x4E00;&#x6B21;&#x8F93;&#x5165;&#xFF0C;&#x5C31;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x63A5;&#x53D7;&#x72B6;&#x6001;&#xFF0C;&#x5176;&#x4F59;&#x7684;&#x5C31;&#x627E;&#x5230;&#x5BF9;&#x5E94;&#x7684;DFAState&#x6B65;&#x8FDB;&#x6216;&#x662F;&#x63D2;&#x5165;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002;&#x53E6;&#x5916;&#x8FD8;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#x7528;&#x4E8E;&#x8FD4;&#x56DE;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x5904;&#x7406;&#x3002; 12345678910package sample;import java.util.Map;/** * Created by liufengkai on 16/7/10. */public interface DfaCallBack { void onMultipleSetBack(DfaState current, Map&lt;Integer, DfaState&gt; states);} &#x8FD4;&#x56DE;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x548C;&#x63A5;&#x7EED;&#x7684;&#x72B6;&#x6001;&#x96C6;&#x3002; 123456789101112131415161718192021222324 DfaBuilder builder = new DfaBuilder(); builder.setDfaCallBack((current, states) -&gt; { System.out.println(&quot;current list &quot; + getCurrentString(current)); ArrayList&lt;DfaState&gt; list = new ArrayList&lt;&gt;(); for (Integer key : states.keySet()) { states.get(key).returnEndList(list); } for (DfaState state : list) { System.out.println(&quot;prediction list &quot; + getCurrentString(state)); } });public static String getCurrentString(DfaState currentState) { String tempString = &quot;&quot;; DfaState tempState = currentState; while (tempState.getParentState() != null) { tempString = (char) tempState.getParentInput() + tempString; tempState = tempState.getParentState(); } return tempString;} &#x4F7F;&#x7528;&#x7684;&#x65F6;&#x5019;&#x4F7F;&#x7528;&#x7C7B;&#x4F3C;&#x8FD9;&#x6837;&#x7684;&#x65B9;&#x5F0F;&#x5C31;&#x80FD;&#x5B9E;&#x73B0;&#x7B80;&#x5355;&#x7684;&#x9884;&#x6D4B;&#x63D0;&#x793A;&#x4E86;&#x3002; &#x6548;&#x679C;&#x56FE;&#x6211;&#x6253;&#x7B97;&#x770B;&#x770B;javaFx&#xFF0C;&#x5199;&#x4E00;&#x4E2A;&#x5E26;gui&#x7684;&#xFF0C;&#x4E0D;&#x8FC7;&#x73B0;&#x5728;&#x6709;&#x70B9;&#x61D2;&#xFF0C;&#x8FD8;&#x6CA1;&#x5199;&#x5B8C;&#x3002;","categories":[],"tags":[{"name":"自动机","slug":"自动机","permalink":"https://lfkdsk.github.io/tags/自动机/"}]},{"title":"编译原理：状态机相关的三种算法","slug":"learnparser1","date":"2016-07-04T15:39:38.000Z","updated":"2016-07-20T05:40:39.000Z","comments":true,"path":"2016/07/04/learnparser1/","link":"","permalink":"https://lfkdsk.github.io/2016/07/04/learnparser1/","excerpt":"","text":"&#x6709;&#x7A77;&#x81EA;&#x52A8;&#x673A;&#x4E3A;&#x4E86;&#x5B9E;&#x73B0;&#x5BF9;&#x4E8E;&#x6B63;&#x89C4;&#x5F0F;&#xFF08;&#x53EF;&#x7406;&#x89E3;&#x4E3A;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#xFF09;&#x7684;&#x8BC6;&#x522B;&#xFF0C;&#x6211;&#x4EEC;&#x63D0;&#x51FA;&#x4E86;&#x6709;&#x7A77;&#x81EA;&#x52A8;&#x673A;&#x7406;&#x8BBA;&#xFF0C;&#x6709;&#x7A77;&#x81EA;&#x52A8;&#x673A;&#x63A5;&#x53D7;&#x6B63;&#x89C4;&#x5F0F;&#x7684;&#x5B9A;&#x4E49;&#x7B26;&#xFF0C;&#x5E76;&#x4E0D;&#x65AD;&#x7684;&#x8BC6;&#x522B;&#x7B26;&#x53F7;&#xFF0C;&#x79FB;&#x52A8;&#x5230;&#x65B0;&#x7684;&#x72B6;&#x6001;&#xFF0C;&#x5982;&#x679C;&#x51FA;&#x73B0;&#x4E86;&#x8BC6;&#x522B;&#x9519;&#x8BEF;&#x5C31;&#x4F1A;&#x62A5;&#x9519;&#x3002; &#x6709;&#x7A77;&#x81EA;&#x52A8;&#x673A;&#x5305;&#x542B;&#x786E;&#x5B9A;&#x7684;&#x6709;&#x7A77;&#x81EA;&#x52A8;&#x673A;&#xFF08;DFA&#xFF09;&#xFF0C;&#x548C;&#x4E0D;&#x786E;&#x5B9A;&#x7684;&#x6709;&#x7A77;&#x81EA;&#x52A8;&#x673A;&#xFF08;NFA&#xFF09;&#x3002;&#x4E24;&#x8005;&#x7684;&#x4E3B;&#x8981;&#x533A;&#x522B;&#x5728;&#x4E8E;&#xFF0C;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x72B6;&#x6001;&#x65F6;&#xFF0C;&#x662F;&#x5426;&#x901A;&#x8FC7;&#x540C;&#x6837;&#x7684;&#x7B26;&#x53F7;&#x8F93;&#x5165;&#x80FD;&#x8FBE;&#x5230;&#x4E0D;&#x540C;&#x7684;&#x72B6;&#x6001;&#x3002;&#x5982;&#x679C;&#x80FD;&#x5C31;&#x662F;&#x4E0D;&#x786E;&#x5B9A;&#x7684;&#xFF0C;&#x53CD;&#x4E4B;&#x5C31;&#x662F;&#x786E;&#x5B9A;&#x7684;&#x3002;&#x53E6;&#x5916;&#xFF1A;NFA&#x8FD8;&#x53EF;&#x4EE5;&#x63A5;&#x53D7;&#x7A7A;&#x5B57;&#x4E32;&#x5DF2;&#x8FBE;&#x5230;&#x4E0D;&#x540C;&#x7684;&#x72B6;&#x6001;&#x3002; &#x4E09;&#x4E2A;&#x4E3B;&#x8981;&#x7684;&#x7B97;&#x6CD5;&#x8FD9;&#x5176;&#x4E2D;&#x6709;&#x4E09;&#x4E2A;&#x4E3B;&#x8981;&#x7684;&#x7B97;&#x6CD5;&#xFF1A; &#x6B63;&#x89C4;&#x5F0F; =&gt; NFA Thompson&#x7B97;&#x6CD5;&#x8FD9;&#x4E2A;&#x7B97;&#x6CD5;&#x4F7F;&#x7528;&#x4E86;&#x4E00;&#x4E9B;&#x6A21;&#x7248;&#x53BB;&#x5BF9;&#x5E94;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x4E2D;&#x7684;&#x7B26;&#x53F7;&#xFF0C;&#x53EA;&#x8981;&#x8BB0;&#x4F4F;&#x6A21;&#x7248;&#xFF0C;&#x5C31;&#x80FD;&#x63A8;&#x51FA;&#x76F8;&#x5E94;&#x7684;NFA&#x3002; &#x8FD9;&#x5176;&#x4E2D;&#x7684;S&#x662F;&#x6307;&#x5F00;&#x59CB;&#x72B6;&#x6001;&#x3002; a: ab a|b: &#x2202; &#x5E26;&#x8868;&#x7A7A;&#x4E32; a*: &#x628A;&#x5BF9;&#x5E94;&#x7684;&#x6B63;&#x89C4;&#x5F0F;&#x6309;&#x7167;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x9010;&#x5C42;&#x5206;&#x89E3;&#xFF0C;&#x5C31;&#x80FD;&#x5F97;&#x5230;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x7684;NFA&#x4E86;&#x3002;","categories":[],"tags":[{"name":"编译原理","slug":"编译原理","permalink":"https://lfkdsk.github.io/tags/编译原理/"}]},{"title":"编译原理：First|Follow集的求法","slug":"learnparser","date":"2016-07-02T16:12:20.000Z","updated":"2016-07-02T17:23:53.000Z","comments":true,"path":"2016/07/03/learnparser/","link":"","permalink":"https://lfkdsk.github.io/2016/07/03/learnparser/","excerpt":"","text":"&#x539F;&#x6587;&#x94FE;&#x63A5; : https://lfkdsk.github.io/ &#x539F;&#x6587;&#x4F5C;&#x8005;&#xFF1A;lfkdsk &#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x6211;&#x5199;&#x5F97;&#x4EE3;&#x7801;&#xFF1A;First&amp;Follow &#x8FD9;&#x6B21;&#x6211;&#x4EEC;&#x6765;&#x8BB2;&#x4E00;&#x4E2A;&#x5B66;&#x4E60;&#x7F16;&#x8BD1;&#x539F;&#x7406;&#x7684;&#x5E38;&#x89C1;&#x9879;&#x76EE;&#xFF0C;&#x5BF9;&#x4E00;&#x4E2A;&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x548C;&#x4E00;&#x4E2A;&#x4EA7;&#x751F;&#x5F0F;&#x96C6;&#x6C42;First&amp;Follow&#x96C6;&#x3002;&#x8FD9;&#x662F;&#x5F88;&#x7B80;&#x5355;&#x548C;&#x57FA;&#x7840;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x4F46;&#x662F;&#x56FD;&#x5185;&#x7684;&#x6559;&#x79D1;&#x4E66;&#xFF0C;&#x53C8;&#x72AF;&#x4E86;&#x8BA1;&#x79D1;&#x7C7B;&#x6559;&#x6750;&#x7ECF;&#x5E38;&#x51FA;&#x73B0;&#x7684;&#x6BDB;&#x75C5;&#xFF0C;&#x7231;&#x4E71;&#x7ED9;&#x4E1C;&#x897F;&#x8D77;&#x540D;&#x5B57;&#xFF0C;&#x800C;&#x4E14;&#x8FD8;&#x8BB2;&#x4E0D;&#x6E05;&#x6982;&#x5FF5;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x5B66;&#x4E60;&#x7F16;&#x8BD1;&#x539F;&#x7406;&#x7684;&#x65F6;&#x5019;&#x6211;&#x8BB0;&#x4E86;&#x4E00;&#x672C;&#x7B14;&#x8BB0;&#xFF0C;&#x4E13;&#x95E8;&#x7528;&#x6765;&#x7FFB;&#x8BD1;&#x56FD;&#x5185;&#x6559;&#x6750;&#x4E66;&#x4E0A;&#x7684;&#x6982;&#x5FF5;&#x5230;&#x5E95;&#x662F;&#x600E;&#x4E48;&#x56DE;&#x4E8B;&#x3002; &#x95F2;&#x8BDD;&#x5C11;&#x8BF4;&#x6211;&#x4EEC;&#x5148;&#x6765;&#x628A;First&amp;Follow&#x96C6;&#x8BF4;&#x6E05;&#x3002; 1.First&#x96C6;&#x6C42;&#x6CD5;First&#x7684;&#x672C;&#x8D28;&#x610F;&#x4E49;&#x5728;&#x4E8E;&#x5904;&#x7406;&#x5B57;&#x7B26;&#x6D41;&#x7684;&#x524D;&#x9A71;&#x5B50;&#x4E32;&#xFF0C;&#x6BD4;&#x5982;&#x5728;LL&#x6784;&#x5EFA;&#x9884;&#x6D4B;&#x5206;&#x6790;&#x8868;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x5BF9;&#x6240;&#x6709;&#x7684;&#x4EA7;&#x751F;&#x5F0F;&#x53F3;&#x90E8;&#x6C42;&#x4E86;First&#x96C6;&#xFF0C;&#x6765;&#x9884;&#x6D4B;&#x5206;&#x6790;&#x5C06;&#x8981;&#x63A5;&#x53D7;&#x7684;&#x5B50;&#x4E32;&#x662F;&#x4EC0;&#x4E48;&#x3002; &#x6C42;First&#x5927;&#x6982;&#x6709;&#x5982;&#x4E0B;&#x4E09;&#x79CD;&#x60C5;&#x51B5;&#xFF1A; E -&gt; empty E -&gt; A&#x2026; E -&gt; a &#x6C42;&#x89E3;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x4E2A;&#x8981;&#x70B9;&#xFF1A; 1.&#x9996;&#x5148;&#x5728;&#x4EA7;&#x751F;&#x5F0F;&#x7684;&#x5DE6;&#x4FA7;&#x627E;&#xFF0C;&#x627E;&#x5230;&#x6240;&#x6709;&#x4EE5;&#x8BE5;&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x5F00;&#x59CB;&#x7684;&#x4EA7;&#x751F;&#x5F0F;&#xFF0C;&#x5BF9;&#x4ED6;&#x4EEC;&#x8FDB;&#x884C;&#x5206;&#x522B;&#x67E5;&#x627E;(&#x7531;&#x4E8E;&#x662F;&#x4E0A;&#x4E0B;&#x6587;&#x65E0;&#x5173;&#x6587;&#x6CD5;&#xFF0C;&#x6240;&#x4EE5;&#x8BF4;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x5DE6;&#x4FA7;&#x6709;&#x591A;&#x4E2A;&#x7B26;&#x53F7;&#x7684;&#x60C5;&#x51B5;&#x3002;) 2.&#x5982;&#x679C;&#x8BF4;&#x53F3;&#x4FA7;&#x5F00;&#x59CB;&#x662F;&#x7EC8;&#x7ED3;&#x7B26;&#xFF0F;&#x7A7A;&#x4E32;&#x90A3;&#x5C31;&#x5C06;&#x4E4B;&#x52A0;&#x5165;&#x3002;&#x5982;&#x679C;&#x662F;&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x5C31;&#x8FDB;&#x884C;&#x9012;&#x5F52;&#x67E5;&#x627E;&#x8BE5;&#x7EC8;&#x7ED3;&#x7B26;&#x3002;&#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x7684;&#x591A;&#x6B65;&#x63A8;&#x5012;&#x4E2D;&#x80FD;&#x591F;&#x751F;&#x6210;&#x7EC8;&#x7ED3;&#x7B26;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x8FD4;&#x56DE;&#x7ED3;&#x675F;&#x67E5;&#x627E;&#x5E76;&#x52A0;&#x5165;first&#x96C6;&#x3002;&#x5982;&#x679C;&#x8BF4;&#x591A;&#x6B65;&#x63A8;&#x5012;&#x4E2D;&#x51FA;&#x73B0;&#x4E86;&#x7A7A;&#x4E32;&#xFF0C;&#x90A3;&#x5C31;&#x56DE;&#x5411;&#x540E;&#x4F20;&#x9012;&#x3002; &#x4F8B;&#xFF1A;X -&gt; ABCDEFG &#x200B; A-&gt;empty|aAB &#x200B; &#x6240;&#x4EE5;&#x6C42;X&#x7684;first&#x96C6;&#x65F6;&#x8981;&#x52A0;&#x5165;A&#x7684;first&#x96C6;&#xFF0C;&#x4F46;&#x662F;A-&gt;empty&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x8981;&#x7EE7;&#x7EED;&#x6C42;B&#x7684;first&#x96C6;&#x5E76;&#x52A0;&#x5165;&#x3002; &#x6CE8;&#x610F;&#x6B64;&#x65F6;A&#x63A8;&#x5BFC;&#x51FA;empty&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x628A;empty&#x52A0;&#x5165;X&#x7684;first&#x96C6; 3.&#x5728;&#x5411;&#x540E;&#x9012;&#x5F52;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x5728;&#x672C;&#x4EA7;&#x751F;&#x5F0F;&#x4E2D;&#x9047;&#x5230;&#x7EC8;&#x7ED3;&#x7B26;&#x5C31;&#x7ACB;&#x5373;&#x7ED3;&#x675F;&#x3002; &#x4F8B;&#xFF1A;X-&gt;ABCDaB &#x200B; &#x5F53;&#x6C42;&#x5230;a&#x7684;&#x65F6;&#x5019;&#x5C31;&#x52A0;&#x5165;X&#x7684;first&#x96C6;&#x5E76;&#x4E14;&#x7ED3;&#x675F;&#x3002; 4.&#x5728;&#x9012;&#x5F52;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x76F4;&#x5230;&#x5934;&#x6240;&#x6709;&#x7684;&#x7EC8;&#x7ED3;&#x7B26;&#x90FD;&#x80FD;&#x63A8;&#x5012;empty&#x4E32;&#xFF0C;&#x8FD9;&#x65F6;&#x6211;&#x4EEC;&#x624D;&#x628A;empty&#x52A0;&#x5165;First&#x96C6;&#x3002; &#x4F8B;&#xFF1A;X-&gt;ABCDEFGH &#x200B; &#x5982;&#x679C;A-H&#x90FD;&#x80FD;&#x63A8;&#x5012;&#x51FA;&#x7A7A;&#x4E32;&#xFF0C;&#x6211;&#x4EEC;&#x5728;&#x5C06;empty&#x52A0;&#x5165;First&#x96C6;&#x3002; 2.Follow&#x96C6;&#x6C42;&#x6CD5;&#x5728;&#x6C42;Follow&#x96C6;&#x7684;&#x4E4B;&#x524D;&#x6A21;&#x4EEC;&#x4E00;&#x5B9A;&#x8981;&#x8FDB;&#x884C;&#x62D3;&#x5C55;&#x6587;&#x6CD5;&#xFF1A; &#x4F8B;&#xFF1A;S-&gt;EAK &#x62D3;&#x5C55;&#x6210; &#x200B; S&#x2019; -&gt; S &#x200B; S -&gt; EAK&#x624B;&#x52A8;&#x589E;&#x52A0;&#x5F00;&#x59CB;&#x72B6;&#x6001; &#x6C42;&#x89E3;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x4E2A;&#x8981;&#x70B9;&#xFF1A; &#x8FD9;&#x6B21;&#x6211;&#x4EEC;&#x6C42;Follow&#x5C31;&#x8981;&#x5173;&#x6CE8;&#x4EA7;&#x751F;&#x5F0F;&#x7684;&#x53F3;&#x90E8;&#xFF0C;&#x627E;&#x5230;&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#xFF0C;&#x56E0;&#x4E3A;&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x6839;&#x672C;&#x5C31;&#x6CA1;&#x7528;follow&#x96C6; &#x90A3;&#x4E48;Follow(S) &#x4E00;&#x5B9A;&#x6709;$(&#x5B57;&#x7B26;&#x6D41;&#x7ED3;&#x675F;&#x7B26;&#x53F7;)&#xFF0C;&#x56E0;&#x4E3A;S&#x2019;-&gt;S&#x5728;S&#x53F3;&#x90E8;&#x4E4B;&#x540E;&#x5C31;&#x662F;&#x7ED3;&#x675F;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x52A0;&#x5165;&#x7ED3;&#x675F;&#x7B26;&#x53F7; &#x6211;&#x4EEC;&#x6765;&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#x8BF4;&#x660E;&#xFF0C; A &#x2014;&gt; aBc &#x200B; &#x5982;&#x679C;&#x6211;&#x4EEC;&#x8981;&#x6C42;B&#x7684;follow&#x96C6;&#xFF0C;&#x5C31;&#x4F1A;&#x51FA;&#x73B0;&#x8FD9;&#x6837;&#x7684;&#x60C5;&#x666F;&#xFF0C;c&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x786E;&#x5B9A;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x53EF;&#x80FD;&#x4EC0;&#x4E48;&#x90FD;&#x6CA1;&#x6709;&#x5373;empty&#xFF0C;&#x4E5F;&#x53EF;&#x80FD;&#x662F;&#x7EC8;&#x7ED3;&#x7B26;&#xFF0F;&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x3002;&#x5982;&#x679C;&#x662F;&#x7EC8;&#x7ED3;&#x7B26;&#x5C31;&#x76F4;&#x63A5;&#x52A0;&#x5165;B&#x7684;Follow&#x96C6;&#x7ED3;&#x675F;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x5C31;&#x628A;c&#x7684;First&#x96C6;&#x6392;&#x51FA;&#x7A7A;&#x4E32;&#x52A0;&#x5165;Follow&#x96C6;&#xFF0C;&#x5199;&#x6210;&#x8868;&#x8FBE;&#x5F0F;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF1A; follow(B) += first(c) - empty &#x5982;&#x679C;&#x5BF9;first(c)&#x6C42;&#x5B8C;&#x4E4B;&#x540E;&#x8FD8;&#x6709;&#x7A7A;&#x4E32;&#x5C31;&#x628A;follow(A) &#xFF08;&#x6CE8;&#x610F;&#x662F;&#x4EA7;&#x751F;&#x5F0F;&#x5DE6;&#x4FA7;&#x7684;A&#xFF09;&#x5168;&#x90E8;&#x52A0;&#x5165;follow(B) follow(B) += (if first(c) exist empty) follow(A) &#x200B; &#x8FD8;&#x6709;&#x4E00;&#x79CD;&#x60C5;&#x51B5;&#x5C31;&#x662F;&#x5C31;&#x662F;&#x5982;&#x679C;c&#x672C;&#x8EAB;&#x5C31;&#x662F;&#x7A7A;&#x4E32;&#xFF0C;&#x8FD9;&#x4E2A;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x975E;&#x7EC8;&#x7ED3;&#x7B26;&#x7684;&#x5904;&#x7406;&#x65B9;&#x6CD5;&#xFF0C;&#x76F4;&#x63A5;&#x662F;&#x7A7A;&#x4E32;&#x90A3;&#x76F4;&#x63A5;&#x5C31;&#x76F4;&#x63A5;&#x628A;follow(A)&#x52A0;&#x5165;follow(B)&#x3002; &#x4F8B;&#xFF1A;A &#x2014;&gt; aBc &#x200B; c &#x2014;&gt; aBc &#x200B; &#x5982;&#x679C;&#x662F;&#x8FD9;&#x6837;&#x7684;&#x8BDD;&#xFF0C;&#x76F4;&#x63A5;&#x628A;first(c) &#x5373; a&#x52A0;&#x5165;&#x5C31;&#x884C; &#x200B; &#x200B; A &#x2014;&gt; aBc &#x200B; c &#x2014;&gt; empty | aBc &#x200B; &#x6B64;&#x65F6;&#x8FD8;&#x8981;&#x628A;follow(c)&#x52A0;&#x5165;follow (B). &#x200B; &#x200B; A &#x2014;&gt; aBc &#x200B; c &#x2014;&gt; empty &#x200B; &#x4E0D;&#x7528;&#x60F3;&#x4E86;&#x76F4;&#x63A5;&#x628A;follow(c) &#x52A0;&#x5165;follow(B). &#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x6211;&#x5199;&#x5F97;&#x4EE3;&#x7801;&#xFF1A;First&amp;Follow","categories":[],"tags":[{"name":"编译原理","slug":"编译原理","permalink":"https://lfkdsk.github.io/tags/编译原理/"}]},{"title":"学习制作一门有趣的编程语言－0x04","slug":"make-new-language-4","date":"2016-06-25T14:33:35.000Z","updated":"2016-06-25T14:37:26.000Z","comments":true,"path":"2016/06/25/make-new-language-4/","link":"","permalink":"https://lfkdsk.github.io/2016/06/25/make-new-language-4/","excerpt":"","text":"&#x51E0;&#x79CD;&#x5E38;&#x7528;&#x7B97;&#x6CD5;&#x6211;&#x4EEC;&#x65E5;&#x5E38;&#x4F1A;&#x7528;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x4F1A;&#x53D1;&#x73B0;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x7528;&#x4E86;&#x975E;&#x5E38;&#x7CBE;&#x7B80;&#x7684;&#x8BED;&#x6CD5;&#x5C31;&#x80FD;&#x6982;&#x62EC;&#x591A;&#x79CD;&#x8F93;&#x5165;&#x4E32;&#x7684;&#x7279;&#x5F81;&#xFF0C;","categories":[],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://lfkdsk.github.io/tags/编程语言/"}]},{"title":"我们来写一些魔法","slug":"some-magic-things","date":"2016-06-16T13:30:29.000Z","updated":"2016-07-14T12:35:16.000Z","comments":true,"path":"2016/06/16/some-magic-things/","link":"","permalink":"https://lfkdsk.github.io/2016/06/16/some-magic-things/","excerpt":"","text":"&#x8BF7;&#x95EE;&#x8981;&#x6765;&#x70B9;&#x9B54;&#x6CD5;&#x4E48;&#xFF1F;&#x4F46;&#x51E1;&#x5927;&#x578B;&#x5E94;&#x7528;&#x5F00;&#x53D1;&#x5B8C;&#x6210;&#x4E4B;&#x540E;&#x5927;&#x591A;&#x90FD;&#x4F1A;&#x7559;&#x4E00;&#x4E9B;&#x7528;&#x4E8E;&#x8C03;&#x8BD5;&#x7684;&#x5EFA;&#x8BAE;&#x63A5;&#x53E3;&#xFF0C;&#x5C31;&#x50CF;&#x5FAE;&#x4FE1;&#x4E4B;&#x524D;&#x7684;&#x901A;&#x8FC7;&#x8F93;&#x5165;&#x547C;&#x51FA;&#x7684;&#x9690;&#x85CF;&#x6309;&#x94AE;&#xFF0C;&#x7CFB;&#x7EDF;&#x4E0A;&#x7684;&#x9690;&#x85CF;&#x529F;&#x80FD;&#x4E5F;&#x4E0D;&#x4F8B;&#x5916;&#xFF0C;&#x4ECE;&#x7EAF;&#x7CB9;&#x7684;java&#x673A;&#x65F6;&#x4EE3;&#x5C31;&#x6709;&#x5404;&#x5BB6;&#x5382;&#x5546;&#x7559;&#x4E0B;&#x6765;&#x7684;&#x9690;&#x85CF;&#x547C;&#x51FA;&#x4EE3;&#x7801;&#xFF0C;&#x4E00;&#x822C;&#x7528;&#x4E8E;&#x67E5;&#x770B;&#x5185;&#x5B58;&#x554A;&#xFF0C;&#x5F3A;&#x5236;&#x91CD;&#x542F;&#x554A;&#xFF0C;&#x67E5;&#x770B;&#x7535;&#x91CF;&#x6D88;&#x8017;&#x4EC0;&#x4E48;&#x7684;&#xFF0C;&#x591A;&#x6570;&#x7528;&#x7EC4;&#x5408;&#x952E;&#x6216;&#x8005;&#x662F;&#x53F7;&#x7801;&#x7C3F;&#x547C;&#x51FA;&#x7684;&#x3002;Android&#x5E73;&#x53F0;&#x4E4B;&#x524D;&#x4E5F;&#x6D41;&#x4F20;&#x8FC7;&#x5F88;&#x591A;&#x5047;&#x7684;SecretCode&#xFF0C;&#x4F46;&#x662F;&#x5176;&#x5B9E;SecretCode&#x662F;&#x771F;&#x5B9E;&#x5B58;&#x5728;&#x4E8E;Android&#x5E73;&#x53F0;&#x4E0A;&#x7684;&#xFF0C;&#x5E76;&#x4E14;&#x6211;&#x4EEC;&#x4E5F;&#x6709;&#x673A;&#x4F1A;&#x5B9E;&#x73B0;&#x81EA;&#x5DF1;&#x7684;SecretCode&#x3002; SecretCode&#x5728;Android&#x4E0A;&#x5927;&#x591A;&#x6570;&#x662F;&#x7531;&#x62E8;&#x53F7;&#x76D8;&#x8F93;&#x5165;&#x7279;&#x5B9A;&#x5E8F;&#x5217;&#x89E6;&#x53D1;&#x7684;&#xFF0C;&#x5176;&#x5B9E;&#x8D28;&#x4E0A;&#x4E5F;&#x4E0D;&#x8FC7;&#x662F;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x5168;&#x5C40;&#x5E7F;&#x64AD;&#x7684;&#x6536;&#x53D1;&#xFF0C;&#x6211;&#x4EEC;&#x4E4B;&#x524D;&#x5E94;&#x8BE5;&#x5B66;&#x8FC7;&#x5E7F;&#x64AD;&#x63A5;&#x6536;&#x5668;&#xFF0C;&#x90A3;&#x7406;&#x89E3;&#x8D77;&#x6765;&#x5C31;&#x5F88;&#x5BB9;&#x6613;&#xFF0C;&#x6240;&#x8C13;&#x7684;SecretCode&#x4E5F;&#x5C31;&#x53EA;&#x662F;&#x4E2A;&#x5F88;&#x6709;&#x8DA3;&#x7684;&#x5C0F;&#x529F;&#x80FD;&#x4E86;&#x3002; &#x9996;&#x5148;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5E7F;&#x64AD;&#x63A5;&#x6536;&#x5668;12345678910111213141516package com.lfk.myapplication;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;public class SecretReceiver extends BroadcastReceiver { public SecretReceiver() { } @Override public void onReceive(Context context, Intent intent) { SpUtils.put(context, &quot;key&quot;, 1); }} &#x8FD9;&#x91CC;&#x9762;&#x6CA1;&#x505A;&#x4EC0;&#x4E48;&#x590D;&#x6742;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x53EA;&#x662F;&#x628A;SharePerference&#x7684;&#x4E00;&#x4E2A;key&#x503C;&#x53D8;&#x6210;1&#x3002; &#x540C;&#x65F6;&#x5728;AndroidManifest&#x6587;&#x4EF6;&#x4E2D;&#xFF1A; 123456789101112&lt;receiver android:name=&quot;.SecretReceiver&quot; android:enabled=&quot;true&quot; android:exported=&quot;true&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.provider.Telephony.SECRET_CODE&quot; /&gt; &lt;data android:host=&quot;12467&quot; android:scheme=&quot;android_secret_code&quot; /&gt; &lt;/intent-filter&gt;&lt;/receiver&gt; &#x6DFB;&#x52A0;&#x5BF9;&#x5E94;&#x7684;&#x9759;&#x6001;&#x6CE8;&#x518C;&#x7684;&#x5E7F;&#x64AD;&#x63A5;&#x6536;&#x5668;&#x7684;&#x8FC7;&#x6EE4;&#x5668;&#xFF0C;&#x9009;&#x62E9;SECRET_CODE&#x9009;&#x9879;&#x5E76;&#x4E14;&#x52A0;&#x5165;host&#x548C;scheme&#x503C;&#x3002; host&#x4EE3;&#x8868;&#x4E86;&#x5339;&#x914D;&#x4EC0;&#x4E48;&#x7B26;&#x53F7;&#x8FDB;&#x884C;&#x89E6;&#x53D1;&#xFF0C;&#x867D;&#x7136;&#x5199;&#x7684;&#x65F6;&#x5019;&#x662F;12467&#x4F46;&#x662F;&#x8F93;&#x5165;&#x7684;&#x65F6;&#x5019;&#x8981;&#x8F93;&#x5165;*#*#12467#*#* &#x624D;&#x80FD;&#x6B63;&#x786E;&#x7684;&#x54CD;&#x5E94;&#xFF1A; &#x6DFB;&#x52A0;&#x5904;&#x7406;&#x903B;&#x8F91;12345678910111213141516171819202122232425package com.lfk.myapplication;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.widget.TextView;public class MainActivity extends AppCompatActivity { private TextView textView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); SpUtils.put(this, &quot;key&quot;, 0); textView = (TextView) findViewById(R.id.text_view); } @Override protected void onResume() { super.onResume(); if ((int) SpUtils.get(this, &quot;key&quot;, 0) != 0) { textView.setText(&quot;HAHAHA&quot;); } }} &#x8FD9;&#x91CC;&#x53EA;&#x5B9A;&#x4E49;&#x4E86;&#x7B80;&#x5355;&#x7684;&#x4E00;&#x4E2A;&#x663E;&#x793A;&#x903B;&#x8F91;&#xFF0C;&#x5F53;&#x68C0;&#x6D4B;&#x5230;key&#x503C;&#x53D8;&#x5316;&#x7684;&#x65F6;&#x5019;&#x4FEE;&#x6539;&#x6587;&#x5B57;&#x7684;&#x663E;&#x793A;&#xFF0C;&#x4F46;&#x5B9E;&#x9645;&#x4E0A;SecretCode&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x4F60;&#x5E94;&#x7528;&#x91CC;&#x7684;&#x4E00;&#x4E2A;&#x5F69;&#x86CB;&#x6216;&#x662F;&#x9690;&#x85CF;&#x5F00;&#x5173;(&#x4F60;&#x53EF;&#x4EE5;&#x501F;&#x7531;&#x8FD9;&#x4E2A;&#x529F;&#x80FD;&#x5B8C;&#x6210;&#x4F60;&#x5947;&#x602A;&#x5185;&#x5BB9;&#x7684;&#x9690;&#x85CF;&#xFF09;&#x3002; &#x663E;&#x793A;&#x6548;&#x679C; PS&#xFF1A;&#x5E38;&#x7528;&#x7684;SecretCode &#xFF1A;If you are an Android User, Than you Should try these 32 Secret Codes!","categories":[],"tags":[{"name":"Interesting!","slug":"Interesting","permalink":"https://lfkdsk.github.io/tags/Interesting/"}]},{"title":"2014to2016梦回吹角连营","slug":"2014to2016","date":"2016-06-08T16:23:04.000Z","updated":"2016-06-08T17:49:21.000Z","comments":true,"path":"2016/06/09/2014to2016/","link":"","permalink":"https://lfkdsk.github.io/2016/06/09/2014to2016/","excerpt":"","text":"&#x200B; &#x4ECA;&#x5E74;&#x7684;&#x9AD8;&#x8003;&#x5728;&#x4ECA;&#x5929;&#x7ED3;&#x675F;&#x4E86;&#xFF0C;&#x8FD9;&#x5BF9;&#x6211;&#x5B9E;&#x5728;&#x6CA1;&#x4EC0;&#x4E48;&#x5B9E;&#x611F;&#xFF0C;&#x4ED4;&#x7EC6;&#x4E00;&#x60F3;&#x9AD8;&#x8003;&#x90FD;&#x662F;&#x4E24;&#x5E74;&#x524D;&#x7684;&#x4E8B;&#x60C5;&#x4E86;&#x3002;&#x4E24;&#x5E74;&#x8FC7;&#x53BB;&#x4E86;&#x5F53;&#x5E74;&#x7684;&#x9AD8;&#x4E2D;&#x540C;&#x5B66;&#x4E5F;&#x90FD;&#x98CE;&#x6D41;&#x4E91;&#x6563;&#x4E86;&#xFF0C;&#x4FDD;&#x6301;&#x8054;&#x7CFB;&#x7684;&#x4EBA;&#x4E5F;&#x4E0D;&#x662F;&#x592A;&#x591A;&#x4E86;&#x3002;&#x8FD9;&#x90FD;&#x662F;&#x65E0;&#x53EF;&#x907F;&#x514D;&#x7684;&#x4E8B;&#x60C5;&#xFF0C;&#x6D3B;&#x7740;&#x4E0D;&#x8FC7;&#x662F;&#x8FCE;&#x6765;&#x9001;&#x5F80;&#x3002;&#x4E0D;&#x8FC7;&#x4ECA;&#x5929;&#x542C;&#x5988;&#x63D0;&#x5230;&#x5979;&#x7684;&#x4E00;&#x4E2A;&#x540C;&#x4E8B;&#x7684;&#x4F84;&#x5B50;&#xFF0C;&#x4ED6;&#x6BD4;&#x6211;&#x5C0F;&#x4E00;&#x5C4A;&#x5427;&#xFF0C;&#x4E4B;&#x524D;&#x4ED6;&#x7684;&#x4E8B;&#x6211;&#x9AD8;&#x4E2D;&#x7684;&#x65F6;&#x5019;&#x4E5F;&#x6709;&#x6240;&#x8033;&#x95FB;&#xFF0C;&#x4E0A;&#x4E00;&#x6B21;&#x8003;&#x8BD5;&#x5931;&#x5229;&#xFF0C;&#x8FD9;&#x6B21;&#x590D;&#x8BFB;&#x91CD;&#x8003;&#x3002;&#x542C;&#x5230;&#x8FD9;&#x4E2A;&#x6D88;&#x606F;&#x624D;&#x8BA9;&#x6211;&#x53C8;&#x60F3;&#x8D77;&#x6765;&#x6211;&#x7684;&#x9AD8;&#x8003;&#x4E86;&#x3002; &#x200B; &#x201C;&#x68A6;&#x56DE;&#x5439;&#x89D2;&#x8FDE;&#x8425;&#x201D;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x9898;&#x76EE;&#x6211;&#x89C9;&#x5F97;&#x8FD9;&#x53E5;&#x771F;&#x662F;&#x592A;&#x6070;&#x5F53;&#x4E86;&#xFF0C;&#x9AD8;&#x8003;&#x5BF9;&#x4E8E;&#x6211;&#x6765;&#x8BB2;&#x771F;&#x7684;&#x662F;&#x4E00;&#x573A;&#x6218;&#x4E89;&#xFF0C;&#x4E00;&#x751F;&#x7684;&#x68A6;&#x9B47;&#x3002;&#x6709;&#x7684;&#x65F6;&#x5019;&#x548C;&#x670B;&#x53CB;&#x8C08;&#x8D77;&#x9AD8;&#x8003;&#xFF0C;&#x6211;&#x90FD;&#x4F1A;&#x9009;&#x62E9;&#x4E00;&#x4E9B;&#x8F7B;&#x677E;&#x7684;&#x8BED;&#x8C03;&#x53BB;&#x63CF;&#x8FF0;&#x6211;&#x7684;&#x9AD8;&#x8003;&#xFF0C;&#x8BF4;&#x8BF4;&#x81EA;&#x5DF1;&#x90A3;&#x65F6;&#x5019;&#x4E5F;&#x8D2A;&#x73A9;&#xFF0C;&#x4E5F;&#x4E0D;&#x542C;&#x8BFE;&#xFF0C;&#x4E5F;&#x4F1A;&#x548C;&#x670B;&#x53CB;&#x53BB;&#x7F51;&#x5427;&#x3002;&#x4F46;&#x8BF4;&#x5B9E;&#x8BDD;&#x8FD9;&#x63CF;&#x8FF0;&#x867D;&#x662F;&#x5B9E;&#x60C5;&#xFF0C;&#x4F46;&#x662F;&#x8981;&#x8BF4;&#x6211;&#x6574;&#x4E2A;&#x9AD8;&#x4E09;&#x90FD;&#x5904;&#x5728;&#x8FD9;&#x79CD;&#x72B6;&#x6001;&#x4E0B;&#x6211;&#x90FD;&#x4E0D;&#x4FE1;&#xFF0C;&#x8FD9;&#x79CD;&#x8BF4;&#x6CD5;&#x53EF;&#x80FD;&#x662F;&#x771F;&#x7684;&#x5C5E;&#x4E8E;&#x4E00;&#x4E2A;&#x7ECF;&#x5386;&#x8FC7;&#x7684;&#x4EBA;&#x7684;&#x4E91;&#x6DE1;&#x98CE;&#x8F7B;&#x5427;&#x3002;&#x8981;&#x5355;&#x7EAF;&#x8BB2;&#x51FA;&#x6211;&#x9AD8;&#x4E09;&#x7684;&#x72B6;&#x6001;&#x53EF;&#x80FD;&#x5C31;&#x662F;&#x201C;&#x6655;&#x201D;&#x5427;&#x3002;&#x5176;&#x5B9E;&#x6211;&#x9AD8;&#x4E00;&#xFF0F;&#x9AD8;&#x4E8C;&#x4E5F;&#x633A;&#x6655;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x73A9;&#x5F97;&#x591A;&#x7761;&#x5F97;&#x5C11;&#xFF0C;&#x800C;&#x4E14;&#x4E0D;&#x7528;&#x592A;&#x4E0A;&#x5FC3;&#x5C31;&#x80FD;&#x8003;&#x51FA;&#x5DEE;&#x5F3A;&#x4EBA;&#x610F;&#x7684;&#x6210;&#x7EE9;&#xFF0C;&#x53EF;&#x80FD;&#x6211;&#x81EA;&#x5DF1;&#x90FD;&#x4E0D;&#x592A;&#x5728;&#x610F;&#x5427;&#x3002;&#x4F46;&#x662F;&#x9AD8;&#x4E09;&#x7684;&#x6655;&#x662F;&#x771F;&#x7684;&#x5934;&#x6655;&#x773C;&#x82B1;&#xFF0C;&#x6BCF;&#x5929;&#x7684;&#x7761;&#x7720;&#x65F6;&#x95F4;&#x90FD;&#x5C0F;&#x4E8E;5&#x4E2A;&#x5C0F;&#x65F6;&#xFF0C;2&#xFF0C;3&#x70B9;&#x7761;&#x89C9;&#x7684;&#x65F6;&#x5019;&#x4E5F;&#x5C61;&#x89C1;&#x4E0D;&#x9C9C;&#xFF0C;&#x6211;&#x751A;&#x81F3;&#x5230;&#x4E86;&#x5206;&#x4E0D;&#x6E05;&#x5F53;&#x5929;&#x662F;&#x5468;&#x51E0;&#xFF0C;&#x5206;&#x4E0D;&#x6E05;&#x4E00;&#x4EF6;&#x4E8B;&#x662F;&#x54EA;&#x5929;&#x53D1;&#x751F;&#x7684;&#xFF0C;&#x65E9;&#x4E0A;&#x4E0A;&#x5B66;&#x8FC7;&#x9A6C;&#x8DEF;&#x770B;&#x4E0D;&#x6E05;&#x8F66;&#x90FD;&#x88AB;&#x8F66;&#x64E6;&#x5230;&#x7684;&#x60C5;&#x51B5;&#x51FA;&#x73B0;&#x3002;&#x6211;&#x8BB0;&#x5F97;&#x4E2D;&#x5348;&#x53EF;&#x4EE5;&#x5348;&#x7761;&#xFF0C;&#x4F46;&#x662F;&#x53EA;&#x80FD;&#x7761;&#x5341;&#x5206;&#x949F;&#xFF0C;&#x5BF9;&#x4E8E;&#x91CD;&#x5EA6;&#x7F3A;&#x89C9;&#x7684;&#x4EBA;&#xFF0C;&#x8FD9;&#x70B9;&#x65F6;&#x95F4;&#x51E0;&#x4E4E;&#x53EF;&#x4EE5;&#x5FFD;&#x7565;&#x4E0D;&#x8BA1;&#x4E86;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x57FA;&#x672C;&#x4E0A;&#x5934;&#x78B0;&#x4E0A;&#x624B;&#x81C2;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x7761;&#x7740;&#x4E86;&#xFF0C;&#x7136;&#x540E;&#x9192;&#x7684;&#x65F6;&#x5019;&#x610F;&#x8BC6;&#x8FD8;&#x505C;&#x7559;&#x5728;&#x521A;&#x7761;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x66F4;&#x4E0D;&#x8981;&#x63D0;&#x6709;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x5728;&#x68A6;&#x91CC;&#x68A6;&#x5230;&#x8FD8;&#x5728;&#x5B66;&#x4E60;&#xFF0C;&#x7ED3;&#x679C;&#x9192;&#x4E86;&#x75B2;&#x52B3;&#x5EA6;&#x4E0D;&#x51CF;&#x53CD;&#x589E;&#x3002;&#x6700;&#x6709;&#x5370;&#x8C61;&#x7684;&#x662F;&#x6570;&#x5B66;&#x7684;&#xFF0C;&#x9AD8;&#x4E09;&#x8F6C;&#x6765;&#x4E86;&#x4E00;&#x4E2A;&#x8BB2;&#x5F97;&#x4E0D;&#x9519;&#x7684;&#x6570;&#x5B66;&#x8001;&#x5E08;&#xFF0C;&#x4ECE;&#x67D0;&#x79CD;&#x610F;&#x4E49;&#x4E0A;&#x662F;&#x633D;&#x6551;&#x4E86;&#x6211;&#x4EEC;&#x5168;&#x73ED;&#x7684;&#x6570;&#x5B66;&#x3002;&#x6570;&#x5B66;&#x8BFE;&#x81EA;&#x7136;&#x8981;&#x597D;&#x597D;&#x542C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x56F0;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x57FA;&#x672C;&#x4E0A;&#x6574;&#x5802;&#x8BFE;&#x90FD;&#x81EA;&#x52A8;&#x7684;&#x53BB;&#x540E;&#x9762;&#x7AD9;&#x7740;&#x3002;&#x6211;&#x8FD8;&#x662F;&#x633A;&#x4F69;&#x670D;&#x6211;&#x81EA;&#x5DF1;&#x7684;&#x4E34;&#x8003;&#x72B6;&#x6001;&#x7684;&#xFF0C;&#x6211;&#x867D;&#x7136;&#x7761;&#x7720;&#x5DF2;&#x7ECF;&#x4E25;&#x91CD;&#x4E0D;&#x8DB3;&#xFF0C;&#x751A;&#x81F3;&#x601D;&#x8DEF;&#x90FD;&#x4E0D;&#x6E05;&#x695A;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x80FD;&#x575A;&#x6301;&#x6B63;&#x786E;&#x7684;&#x505A;&#x9898;&#x3002;&#x53EF;&#x80FD;&#x771F;&#x7684;&#x662F;&#x6240;&#x8C13;&#x7684;&#x201C;&#x5B66;&#x4E60;&#x673A;&#x5668;&#x201D;&#x7684;&#x7A0B;&#x5EA6;&#x5427;&#xFF0C;&#x56F0;&#x7684;&#x5DF2;&#x7ECF;&#x5E72;&#x6270;&#x4E86;&#x6B63;&#x5E38;&#x751F;&#x6D3B;&#x4E86;&#xFF0C;&#x5374;&#x8FD8;&#x80FD;&#x6B63;&#x5E38;&#x7684;&#x505A;&#x9898;&#xFF0C;&#x60F3;&#x6765;&#x4E5F;&#x662F;&#x633A;&#x8BBD;&#x523A;&#x7684;&#x3002;&#x90A3;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x4EA7;&#x751F;&#x4E86;&#x4E00;&#x4E2A;&#x5F88;&#x5947;&#x602A;&#x7684;&#x5174;&#x8DA3;&#xFF0C;&#x5C31;&#x662F;&#x603B;&#x60F3;&#x53BB;&#x4E70;&#x7EC3;&#x4E60;&#x518C;&#x53BB;&#x505A;&#xFF0C;&#x603B;&#x60F3;&#x591A;&#x505A;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x5E78;&#x7684;&#x662F;&#x5BF9;&#x4E8E;&#x6211;&#x7CBE;&#x795E;&#x4E0A;&#x8FD8;&#x662F;&#x80FD;&#x575A;&#x6301;&#x7684;&#x4F4F;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x8EAB;&#x4F53;&#x7684;&#x75B2;&#x52B3;&#x5DF2;&#x7ECF;&#x6491;&#x4E0D;&#x4F4F;&#x4E86;&#xFF0C;&#x5C31;&#x662F;&#x8111;&#x5B50;&#x60F3;&#x7740;&#x201C;&#x6211;&#x8FD8;&#x80FD;&#x6253;&#x4E00;&#x5E74;&#x201D;&#xFF0C;&#x4F46;&#x5B9E;&#x9645;&#x5DF2;&#x7ECF;&#x8DB4;&#x7740;&#x5C31;&#x8D77;&#x4E0D;&#x6765;&#x4E86;&#x3002;&#x6211;&#x9AD8;&#x8003;&#x65F6;&#x5019;&#x7684;&#x72B6;&#x6001;&#x5C31;&#x5927;&#x62B5;&#x5982;&#x6B64;&#x3002; &#x200B; &#x8BF4;&#x4E86;&#x8FD9;&#x4E48;&#x591A;&#xFF0C;&#x5176;&#x5B9E;&#x4E0D;&#x662F;&#x60F3;&#x8BC9;&#x82E6;&#xFF0C;&#x6216;&#x8005;&#x6807;&#x699C;&#x4EC0;&#x4E48;&#x7684;&#x3002;&#x8BF4;&#x8D77;&#x6765;&#x90FD;&#x662F;&#x4E24;&#x5E74;&#x524D;&#x7684;&#x4E8B;&#x4E86;&#xFF0C;&#x5439;&#x5618;&#x4EC0;&#x4E48;&#x7684;&#x4E00;&#x70B9;&#x610F;&#x601D;&#x90FD;&#x6CA1;&#x6709;&#xFF0C;&#x800C;&#x4E14;&#x6709;&#x79CD;&#x94B1;&#x949F;&#x4E66;&#x6240;&#x8BF4;&#x7684;&#x201C;&#x5144;&#x5F1F;&#x6211;&#x5728;&#x82F1;&#x56FD;&#x7684;&#x65F6;&#x5019;&#x201D;&#x7684;&#x611F;&#x89C9;&#x3002;&#x4F46;&#x662F;&#x9AD8;&#x8003;&#x771F;&#x7684;&#x662F;&#x5BF9;&#x5B66;&#x751F;&#x4E00;&#x6B21;&#x5F88;&#x75DB;&#x82E6;&#x7684;&#x7ECF;&#x5386;&#xFF0C;&#x597D;&#x574F;&#x4F17;&#x8BF4;&#x7EB7;&#x7EAD;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x60F3;&#x6211;&#x8FD8;&#x4E0D;&#x81F3;&#x4E8E;&#x53D8;&#x6210;&#x65AF;&#x8FBE;&#x54E5;&#x5C14;&#x6469;&#x7EFC;&#x5408;&#x75C7;&#xFF0C;&#x7ECF;&#x5386;&#x8FC7;&#x5C31;&#x53BB;&#x8DEA;&#x8214;&#x8FD9;&#x4E2A;&#x75DB;&#x82E6;&#x7684;&#x7ECF;&#x5386;&#xFF0C;&#x5373;&#x4F7F;&#x6211;&#x6216;&#x8BB8;&#x4E5F;&#x7B97;&#x9AD8;&#x8003;&#x7684;&#x67D0;&#x79CD;&#x65E2;&#x5F97;&#x5229;&#x76CA;&#x8005;&#xFF08;&#xFF1F;&#xFF09;&#x3002;&#x5176;&#x5B9E;&#x6211;&#x5012;&#x662F;&#x8BA4;&#x8BC6;&#x5F88;&#x591A;&#x7684;&#x5B66;&#x9738;&#xFF0C;&#x4ED6;&#x4EEC;&#x7684;&#x4F5C;&#x606F;&#x65B9;&#x5F0F;&#x548C;&#x6211;&#x6709;&#x5F88;&#x5927;&#x533A;&#x522B;&#x7684;&#xFF0C;&#x542C;&#x8D77;&#x6765;&#x4F3C;&#x4E4E;&#x6CA1;&#x6211;&#x62FC;&#x547D;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x60F3;&#x6216;&#x8BB8;&#x4ED6;&#x4EEC;&#x4E5F;&#x6709;&#x4ED6;&#x4EEC;&#x81EA;&#x5DF1;&#x7684;&#x52AA;&#x529B;&#xFF0C;&#x6BD5;&#x7ADF;&#x4E16;&#x4E0A;&#x8FD8;&#x662F;&#x6CA1;&#x6709;&#x771F;&#x6B63;&#x7684;&#x4E0D;&#x52B3;&#x800C;&#x83B7;&#x3002;&#x6211;&#x8F9B;&#x82E6;&#x5230;&#x5982;&#x4E0A;&#x6240;&#x8BF4;&#x6216;&#x8BB8;&#x662F;&#x6211;&#x771F;&#x7684;&#x5F88;&#x7B28;&#x5427;&#xFF01; &#x200B; &#x6709;&#x4EBA;&#x8BF4;&#x6211;&#x6709;&#x88AB;&#x5BB3;&#x5984;&#x60F3;&#x75C7;&#xFF0C;&#x53EF;&#x80FD;&#x662F;&#x56E0;&#x4E3A;&#x6211;&#x5929;&#x5929;&#x60F3;&#x7740;&#x4F1A;&#x997F;&#x6B7B;&#x8857;&#x5934;&#xFF08;&#x4E0D;&#x4F1A;&#xFF1F;&#xFF09;&#x3002;&#x4F46;&#x662F;&#x8BF4;&#x771F;&#x7684;&#x8FD9;&#x79CD;&#x60E8;&#x70C8;&#x7684;&#x7ECF;&#x5386;&#x6CA1;&#x529E;&#x6CD5;&#x4E0D;&#x8BA9;&#x6211;&#x4E0D;&#x53BB;&#x60F3;&#x3002;&#x6211;&#x751A;&#x81F3;&#x90FD;&#x4E0D;&#x6562;&#x60F3;&#x5982;&#x679C;&#x9AD8;&#x8003;&#x843D;&#x699C;&#x73B0;&#x5728;&#x4F1A;&#x5728;&#x505A;&#x4EC0;&#x4E48;&#xFF0C;&#x662F;&#x518D;&#x6765;&#x4E00;&#x6B21;&#xFF0C;&#x8FD8;&#x662F;&#x4ECE;&#x6839;&#x672C;&#x4E0A;&#x5C31;&#x653E;&#x5F03;&#x6CBB;&#x7597;&#x7684;&#x9893;&#x5E9F;&#x7684;&#x4E00;&#x8D25;&#x6D82;&#x5730;&#x3002;&#x6211;&#x4E0D;&#x77E5;&#x9053;&#x3002;&#x6211;&#x867D;&#x7136;&#x7ECF;&#x5E38;&#x5199;&#x9E21;&#x6C64;&#xFF0C;&#x4F46;&#x4E5F;&#x5C31;&#x662F;&#x7ED9;&#x81EA;&#x5DF1;&#x6D17;&#x4E2A;&#x8111;&#x4EC0;&#x4E48;&#x7684;&#xFF0C;&#x4F30;&#x8BA1;&#x522B;&#x4EBA;&#x770B;&#x5230;&#x90FD;&#x4E0D;&#x4FE1;&#xFF0C;&#x4F46;&#x662F;&#x771F;&#x5B9E;&#x7684;&#x751F;&#x6D3B;&#x662F;&#x70ED;&#x8840;&#x6740;&#x51FA;&#x6765;&#x7684;&#x9053;&#x8DEF;&#xFF0C;&#x662F;&#x4E0D;&#x76F8;&#x4FE1;&#x9E21;&#x6C64;&#x7684;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x975E;&#x5E38;&#x53CD;&#x611F;&#x7ED9;&#x9AD8;&#x8003;&#x76F2;&#x704C;&#x9E21;&#x6C64;&#x7684;&#x4EBA;&#xFF0C;&#x8BF4;&#x4EC0;&#x4E48;&#x4E0D;&#x662F;&#x552F;&#x4E00;&#x7684;&#x51FA;&#x8DEF;&#x4E4B;&#x7C7B;&#x7684;&#xFF0C;&#x8FD9;&#x4E9B;&#x4EBA;&#x770B;&#x8D77;&#x6765;&#x90FD;&#x662F;&#x60B2;&#x5929;&#x60AF;&#x4EBA;&#x7684;&#x666E;&#x4E16;&#x60C5;&#x6000;&#xFF0C;&#x5176;&#x5B9E;&#x90FD;&#x662F;&#x4E00;&#x7FA4;&#x770B;&#x70ED;&#x95F9;&#x4E0D;&#x5ACC;&#x4E8B;&#x5927;&#x7684;&#x5E2E;&#x95F2;&#x3002;&#x4EC0;&#x4E48;&#x53EB;&#x8FD8;&#x6709;&#x5176;&#x4ED6;&#x51FA;&#x8DEF;&#x554A;&#xFF0C;&#x4F60;&#x8DDF;&#x6211;&#x63D0;&#x51FA;&#x8DEF;&#x4EC0;&#x4E48;&#x7684;&#x5148;&#x522B;&#x628A;&#x6211;&#x5176;&#x4ED6;&#x7684;&#x8DEF;&#x5835;&#x4E0A;&#x554A;&#x3002;&#x4E00;&#x4E2A;&#x666E;&#x901A;&#x7684;&#x5DE5;&#x85AA;&#x9636;&#x5C42;&#x7684;&#x5BB6;&#x5EAD;&#x51FA;&#x6765;&#x7684;&#x5B69;&#x5B50;&#xFF0C;&#x4F60;&#x8FD8;&#x80FD;&#x7ED9;&#x6211;&#x63D0;&#x51FA;&#x4E00;&#x4E2A;&#x9664;&#x4E86;&#x8BFB;&#x4E66;&#x7ACB;&#x547D;&#x7684;&#x4E4B;&#x5916;&#x7684;&#x51FA;&#x8DEF;&#x4E48;&#xFF1F;&#x4ECE;&#x5546;&#x505A;&#x751F;&#x610F;&#xFF1F;&#x95EE;&#x4E00;&#x4E0B;&#x672C;&#x91D1;&#x8C01;&#x51FA;&#x554A;&#xFF1F;&#x4ECE;&#x519B;&#x5165;&#x4F0D;&#xFF1F;&#x770B;&#x8D77;&#x6765;&#x4E0D;&#x9519;&#xFF0C;&#x4F46;&#x662F;&#x60F3;&#x63D0;&#x5E72;&#xFF0C;&#x519B;&#x6821;&#x7684;&#x7ECF;&#x5386;&#x4E0D;&#x624D;&#x662F;&#x6700;&#x91CD;&#x8981;&#x7684;&#xFF1F;&#x6240;&#x4EE5;&#x5F88;&#x591A;&#x4EBA;&#x8BF4;&#x5343;&#x519B;&#x4E07;&#x9A6C;&#x8FC7;&#x72EC;&#x6728;&#x6865;&#xFF0C;&#x8C01;&#x4E0D;&#x60F3;&#x66F4;&#x597D;&#x7684;&#x6D3B;&#x7740;&#x554A;&#xFF0C;&#x5C31;&#x50CF;&#x4F60;&#x8BF4;&#x56FD;&#x5BB6;&#x7684;&#x5C31;&#x4E1A;&#x4E3A;&#x4EC0;&#x4E48;&#x8FD9;&#x4E48;&#x56F0;&#x96BE;&#xFF0C;&#x8FD8;&#x4E0D;&#x662F;&#x90FD;&#x8981;&#x7559;&#x5728;&#x597D;&#x57CE;&#x5E02;&#xFF0C;&#x897F;&#x90E8;&#x5927;&#x5F00;&#x53D1;&#x5012;&#x662F;&#x804C;&#x4F4D;&#x8FC7;&#x5269;&#xFF0C;&#x8BF4;&#x5F97;&#x5C31;&#x8DDF;&#x4F60;&#x613F;&#x610F;&#x53BB;&#x4F3C;&#x7684;&#x3002;&#x6211;&#x8FD9;&#x4E2A;&#x4EBA;&#x770B;&#x8D77;&#x6765;&#x611F;&#x6027;&#xFF0C;&#x4F46;&#x662F;&#x8003;&#x8651;&#x8FD9;&#x4E9B;&#x95EE;&#x9898;&#x7684;&#x65F6;&#x5019;&#x6211;&#x771F;&#x7684;&#x4F1A;&#x53D8;&#x5F97;&#x5F88;&#x73B0;&#x5B9E;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x786E;&#x5B9E;&#x662F;&#x5F88;&#x73B0;&#x5B9E;&#x7684;&#x95EE;&#x9898;&#x554A;&#xFF01; &#x200B; &#x4ECA;&#x5E74;&#x6211;&#x4E8C;&#x5341;&#x5C81;&#x4E86;&#xFF0C;&#x65E0;&#x8BBA;&#x4ECA;&#x4EBA;&#x8FD8;&#x662F;&#x53E4;&#x4EBA;&#x7684;&#x6807;&#x51C6;&#x90FD;&#x662F;&#x771F;&#x6B63;&#x7684;&#x6210;&#x5E74;&#x4EBA;&#x4E86;&#x3002;&#x5F88;&#x591A;&#x95EE;&#x9898;&#x90FD;&#x8981;&#x63D0;&#x5230;&#x8BAE;&#x7A0B;&#x4E0A;&#x9762;&#x4E86;&#xFF0C;&#x5F88;&#x591A;&#x60F3;&#x6CD5;&#x4E5F;&#x90FD;&#x4E0D;&#x80FD;&#x4EC5;&#x4EC5;&#x6309;&#x7167;&#x4EE5;&#x524D;&#x7684;&#x6807;&#x51C6;&#x6765;&#x8981;&#x6C42;&#x81EA;&#x5DF1;&#x7684;&#x4E86;&#x3002;20-30&#x4E09;&#x5341;&#x5C81;&#x8FD9;&#x5341;&#x5E74;&#x6211;&#x4EEC;&#x90FD;&#x4F1A;&#x9047;&#x5230;&#x5F88;&#x591A;&#x5F88;&#x591A;&#x7684;&#x96BE;&#x9898;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x80FD;&#x8981;&#x53BB;&#x4E00;&#x4E2A;&#x964C;&#x751F;&#x7684;&#x57CE;&#x5E02;&#x5DE5;&#x4F5C;&#x5B66;&#x4E60;&#xFF0C;&#x8981;&#x548C;&#x4E0D;&#x540C;&#x7684;&#x964C;&#x751F;&#x4EBA;&#x7ED3;&#x8BC6;&#x5E76;&#x4E14;&#x6C9F;&#x901A;&#x4E86;&#x89E3;&#xFF0C;&#x8FD9;&#x5341;&#x5E74;&#x6211;&#x4EEC;&#x4E5F;&#x4F1A;&#x53D1;&#x73B0;&#x5370;&#x8C61;&#x91CC;&#x6211;&#x4EEC;&#x6B63;&#x5904;&#x5728;&#x58EE;&#x5E74;&#x7684;&#x7236;&#x6BCD;&#x4F3C;&#x4E4E;&#x6C38;&#x8FD0;&#x90FD;&#x4E0D;&#x4F1A;&#x8001;&#x7684;&#x7236;&#x6BCD;&#xFF0C;&#x5F00;&#x59CB;&#x663E;&#x51FA;&#x8001;&#x6001;&#xFF0C;&#x8BB0;&#x5FC6;&#x91CC;&#x8D8A;&#x6765;&#x8D8A;&#x4E0D;&#x597D;&#xFF0C;&#x4F60;&#x4EEC;&#x5206;&#x9694;&#x7684;&#x4E5F;&#x8D8A;&#x6765;&#x8D8A;&#x8FDC;&#xFF0C;&#x66FE;&#x7ECF;&#x7684;&#x671D;&#x5915;&#x76F8;&#x5904;&#x4E5F;&#x53EA;&#x80FD;&#x53D8;&#x6210;&#x9022;&#x5E74;&#x8FC7;&#x8282;&#x7684;&#x77ED;&#x77ED;&#x76F8;&#x805A;&#x3002;&#x751A;&#x81F3;&#xFF0C;&#x4F60;&#x8FD8;&#x4F1A;&#x9047;&#x89C1;&#x51E0;&#x573A;&#x4EBA;&#x751F;&#x7684;&#x751F;&#x79BB;&#x6B7B;&#x522B;&#xFF0C;&#x4E3A;&#x4F60;&#x66F4;&#x52A0;&#x60E8;&#x70C8;&#x7684;30-40&#x8FDB;&#x884C;&#x4E00;&#x4E9B;&#x94FA;&#x57AB;&#x3002;&#x4F60;&#x53EF;&#x80FD;&#x4F1A;&#x7ECF;&#x5386;&#x51E0;&#x6B21;&#x7231;&#x60C5;&#xFF0C;&#x6216;&#x8BB8;&#x4F1A;&#x51FA;&#x73B0;&#x4E0D;&#x987A;&#x5229;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F46;&#x4F60;&#x8FD8;&#x662F;&#x8981;&#x54AC;&#x7740;&#x7259;&#x5728;&#x8FD9;&#x4E2A;&#x4E0D;&#x5C5E;&#x4E8E;&#x81EA;&#x5DF1;&#x7684;&#x57CE;&#x5E02;&#x7EE7;&#x7EED;&#x6253;&#x62FC;&#x4E0B;&#x53BB;&#x3002;&#x4F60;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x5728;&#x5927;&#x57CE;&#x5E02;&#x4E70;&#x4E2A;&#x623F;&#x5B50;&#xFF0C;&#x8FD8;&#x6709;&#x8F66;&#x4EC0;&#x4E48;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E9B;&#x94B1;&#x90FD;&#x9700;&#x8981;&#x4F60;&#x52E4;&#x594B;&#x52AA;&#x529B;&#x7684;&#x5DE5;&#x4F5C;&#x53BB;&#x83B7;&#x53D6;&#x3002;&#x7236;&#x6BCD;&#x8001;&#x4E86;&#x4E4B;&#x540E;&#x96BE;&#x514D;&#x4F1A;&#x751F;&#x75C5;&#xFF0C;&#x56FD;&#x5185;&#x7684;&#x517B;&#x8001;&#x533B;&#x7597;&#x5927;&#x5BB6;&#x4E5F;&#x90FD;&#x77E5;&#x9053;&#xFF0C;&#x517B;&#x8001;&#x5F52;&#x6839;&#x7ED3;&#x5E95;&#x8FD8;&#x662F;&#x8981;&#x9760;&#x81EA;&#x5DF1;&#x52AA;&#x529B;&#xFF0C;&#x6240;&#x4EE5;&#x600E;&#x4E48;&#x8BA9;&#x7236;&#x6BCD;&#x80FD;&#x591F;&#x8001;&#x6709;&#x6240;&#x4F9D;&#xFF0C;&#x8001;&#x6709;&#x6240;&#x517B;&#x4E5F;&#x4F1A;&#x662F;&#x6210;&#x4E3A;&#x5373;&#x5C06;&#x9762;&#x5BF9;&#x7684;&#x4E00;&#x4E2A;&#x4E25;&#x91CD;&#x7684;&#x95EE;&#x9898;&#x3002;&#x4F60;&#x53EF;&#x80FD;&#x8FD8;&#x4F1A;&#x5728;&#x8FD9;&#x4E2A;&#x5E74;&#x9F84;&#x6BB5;&#x4E4B;&#x95F4;&#x6709;&#x5B69;&#x5B50;&#xFF0C;&#x90A3;&#x4E00;&#x4E2A;&#x5B69;&#x5B50;&#x5728;&#x7ED9;&#x4E00;&#x4E2A;&#x5BB6;&#x5EAD;&#x5E26;&#x6765;&#x5FEB;&#x4E50;&#x7684;&#x540C;&#x65F6;&#x4E5F;&#x4F1A;&#x5E26;&#x6765;&#x5F88;&#x591A;&#x7684;&#x8D1F;&#x62C5;&#xFF0C;&#x7167;&#x987E;&#xFF0C;&#x4E0A;&#x5B66;&#xFF0C;&#x5F88;&#x591A;&#x5F88;&#x591A;&#x590D;&#x6742;&#x7684;&#x4E8B;&#x60C5;&#x8981;&#x5904;&#x7406;&#x3002;&#x5F53;&#x7136;&#x8C08;&#x8BBA;&#x8FD9;&#x4E9B;&#x4E5F;&#x53EF;&#x80FD;&#x592A;&#x8FDC;&#xFF0C;&#x60F3;&#x8C08;&#x8BBA;&#x8FD9;&#x4E9B;&#x4F60;&#x9996;&#x5148;&#x5F97;&#x6709;&#x4E00;&#x4E2A;&#x2026;&#x2026;&#x3002;&#x662F;&#x5427;&#xFF1F; &#x200B; &#x8C08;&#x4E86;&#x6211;&#x5F88;&#x591A;&#x7684;&#x5FE7;&#x8651;&#x548C;&#x8981;&#x53BB;&#x505A;&#x5230;&#x548C;&#x5B8C;&#x6210;&#x7684;&#x4E8B;&#x60C5;&#x554A;&#xFF0C;&#x5F88;&#x591A;&#x4EBA;&#x4F1A;&#x8BF4;&#x6211;&#x60F3;&#x591A;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x201C;&#x4EBA;&#x65E0;&#x8FDC;&#x8651;&#xFF0C;&#x5FC5;&#x6709;&#x8FD1;&#x5FE7;&#x201D;&#xFF0C;&#x96BE;&#x9053;&#x4F60;&#x505A;&#x4E8B;&#x8FD8;&#x6307;&#x671B;&#x8239;&#x5230;&#x6865;&#x5934;&#x81EA;&#x7136;&#x76F4;&#x4E48;&#xFF1F;&#x8FD9;&#x4E9B;&#x4E8B;&#x60C5;&#x600E;&#x4E48;&#x5904;&#x7406;&#x5462;&#xFF1F;&#x6211;&#x4E5F;&#x60F3;&#x4E0D;&#x5230;&#x4EC0;&#x4E48;&#x597D;&#x65B9;&#x6CD5;&#xFF0C;&#x53EA;&#x6709;&#x6301;&#x7EED;&#x4E0D;&#x65AD;&#x7684;&#x52AA;&#x529B;&#x5427;&#xFF0C;&#x52AA;&#x529B;&#x7684;&#x505A;&#x597D;&#x624B;&#x5934;&#x7684;&#x4E8B;&#x60C5;&#x518D;&#x4E3A;&#x4E4B;&#x540E;&#x7684;&#x4E8B;&#x60C5;&#x505A;&#x597D;&#x51C6;&#x5907;&#x5427;&#x3002;&#x5199;&#x5230;&#x8FD9;&#x91CC;&#x624D;&#x53D1;&#x73B0;&#x6211;&#x5199;&#x7684;&#x4E1C;&#x897F;&#x771F;&#x662F;&#x8DD1;&#x9898;&#x4E25;&#x91CD;&#x554A;&#xFF0C;&#x4ECE;&#x9AD8;&#x8003;&#x5C45;&#x7136;&#x8DF3;&#x7740;&#x8DF3;&#x7740;&#x8DD1;&#x5230;&#x4E86;&#x5BF9;&#x672A;&#x6765;&#x7684;&#x8BA8;&#x8BBA;&#x4E86;&#x3002;&#x4F46;&#x662F;&#x6211;&#x60F3;&#x4ECE;&#x67D0;&#x79CD;&#x89D2;&#x5EA6;&#x8BF4;&#x4E5F;&#x4E0D;&#x7B97;&#x8DD1;&#x9898;&#x5427;&#xFF0C;&#x9AD8;&#x8003;&#x7684;&#x91CD;&#x8981;&#x6027;&#x771F;&#x7684;&#x662F;&#x5DF2;&#x7ECF;&#x5230;&#x4E86;&#x4E8B;&#x5173;&#x4EBA;&#x751F;&#x7684;&#x7A0B;&#x5EA6;&#x4E86;&#x3002;&#x6216;&#x8BB8;&#x6211;&#x771F;&#x7684;&#x6709;&#x4E00;&#x4E9B;&#x5BBF;&#x547D;&#x8BBA;&#x548C;&#x88AB;&#x5BB3;&#x5984;&#x60F3;&#x5427;&#xFF0C;&#x6211;&#x603B;&#x662F;&#x8981;&#x5F88;&#x52AA;&#x529B;&#x624D;&#x80FD;&#x548C;&#x5468;&#x56F4;&#x7684;&#x4EBA;&#x4E0D;&#x62C9;&#x5F00;&#x592A;&#x5927;&#x7684;&#x5DEE;&#x8DDD;&#x3002;&#x4E0D;&#x8FC7;&#x751F;&#x6D3B;&#x603B;&#x5F97;&#x7EE7;&#x7EED;&#xFF0C;&#x628A;&#x75DB;&#x82E6;&#x8BF4;&#x51FA;&#x6765;&#x53EA;&#x4F1A;&#x7F13;&#x89E3;&#x4E0D;&#x4F1A;&#x6D88;&#x706D;&#xFF0C;&#x4ECA;&#x5929;&#x8C08;&#x5B8C;&#x5F53;&#x5E74;&#x7684;&#x9AD8;&#x8003;&#xFF0C;&#x8FD8;&#x662F;&#x8981;&#x7EE7;&#x7EED;&#x671F;&#x672B;&#x590D;&#x4E60;&#xFF0C;&#x603B;&#x662F;&#x8981;&#x5411;&#x524D;&#x770B;&#x7684;&#x554A;&#x3002; &#x200B; &#x6211;&#x4F30;&#x8BA1;&#x5927;&#x5BB6;&#x90FD;&#x4E0D;&#x4F1A;&#x770B;&#x5230;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x5427;&#xFF0C;&#x6BD5;&#x7ADF;&#x591C;&#x5DF2;&#x7ECF;&#x6DF1;&#x4E86;&#xFF0C;&#x6211;&#x4E5F;&#x5FEB;&#x8981;&#x53BB;&#x7761;&#x4E86;&#xFF0C;&#x795D;&#x5927;&#x5BB6;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x524D;&#x7A0B;&#x4F3C;&#x9526;&#x7684;&#x524D;&#x7A0B;&#x5427;&#x3002; P,S:&#x6211;&#x5F88;&#x7684;&#x633A;&#x611F;&#x8C22;&#x73B0;&#x5728;&#x7684;&#x8FD9;&#x4E2A;&#x5927;&#x5B66;&#x7684;&#xFF0C;&#x867D;&#x7136;&#x67D0;&#x5DE5;&#x4E0D;&#x662F;&#x6211;&#x80FD;&#x8003;&#x4E0A;&#x7684;&#x6700;&#x597D;&#x7684;&#x5927;&#x5B66;&#xFF0C;&#x5F53;&#x5E74;&#x534E;&#x79D1;&#xFF0C;&#x534E;&#x5357;&#x7687;&#x5BB6;&#x7406;&#x5DE5;&#xFF0C;&#x6B66;&#x5927;&#x4EC0;&#x4E48;&#x7684;&#x6211;&#x4E5F;&#x90FD;&#x662F;&#x80FD;&#x8003;&#x4E0A;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x67D0;&#x5DE5;&#x5F00;&#x53D1;&#x533A;&#x8FD9;&#x4E2A;&#x5730;&#x65B9;&#x771F;&#x662F;&#x5E73;&#x65F6;&#x9664;&#x4E86;&#x5B66;&#x4E60;&#x4E4B;&#x5916;&#x627E;&#x4E0D;&#x5230;&#x4EC0;&#x4E48;&#x5176;&#x5B83;&#x80FD;&#x505A;&#x7684;&#xFF0C;&#x679C;&#x7136;&#x662F;&#x786C;&#x70B9;&#x7684;&#x5B66;&#x5728;&#x67D0;&#x5DE5;&#x554A;&#x3002;","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://lfkdsk.github.io/tags/随笔/"}]},{"title":"学习制作一门有趣的编程语言－0x03","slug":"make-new-language-3","date":"2016-06-01T14:28:06.000Z","updated":"2016-06-02T07:54:22.000Z","comments":true,"path":"2016/06/01/make-new-language-3/","link":"","permalink":"https://lfkdsk.github.io/2016/06/01/make-new-language-3/","excerpt":"","text":"&#x5206;&#x6790;&#x4E00;&#x4E2A;C&#x8BED;&#x8A00;&#x7684;Lex &amp; Yacc &#x7A0B;&#x5E8F;&#x535A;&#x5BA2;&#x5730;&#x5740;&#xFF1A; http://lfkdsk.github.io&#x4EE3;&#x7801;&#x5730;&#x5740;&#xFF1A; https://github.com/lfkdsk/CodeParse &#x672C;&#x8282;&#x6211;&#x4EEC;&#x6765;&#x5206;&#x6790;&#x4E00;&#x4E2A;&#x80FD;&#x5339;&#x914D;C&#x8BED;&#x8A00;&#x7684;Lex &amp; Yacc &#x7A0B;&#x5E8F; Lex&#x6587;&#x4EF6;:http://www.lysator.liu.se/c/ANSI-C-grammar-l.html Yacc&#x6587;&#x4EF6;:http://www.lysator.liu.se/c/ANSI-C-grammar-y.html &#x4E5F;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5728;&#x6211;&#x7684;github&#x4EE3;&#x7801;&#x5730;&#x5740;&#x4E2D;&#x8FDB;&#x884C;&#x4E0B;&#x8F7D;&#x3002; &#x5148;&#x6765;&#x5206;&#x6790;Lex&#x6587;&#x4EF6;123456D [0-9]L [a-zA-Z_]H [a-fA-F0-9]E [Ee][+-]?{D}+FS (f|F|l|L)IS (u|U|l|L)* &#x9996;&#x5148;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E9B;&#x6B63;&#x5219;&#x5F0F;&#xFF0C;&#x8FD9;&#x4E9B;&#x6B63;&#x5219;&#x7684;&#x529F;&#x80FD;&#x90FD;&#x662F;&#x4E00;&#x76EE;&#x4E86;&#x7136;&#x7684;&#x3002;&#x4ED6;&#x4EEC;&#x90FD;&#x4E0D;&#x662F;&#x5B8C;&#x6574;&#x7684;&#x529F;&#x80FD;&#x6027;&#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x800C;&#x662F;&#x4E3A;&#x4E86;&#x4E0B;&#x6587;&#x7EC4;&#x88C5;&#x65B9;&#x4FBF;&#x7684;&#x3002;&#x5176;&#x4E2D;FS \\ IS &#x7684;&#x4F5C;&#x7528;&#x662F;&#x5728;&#x6570;&#x5B57;&#x8DDF;&#x5728;&#x540E;&#x9762;&#x7684;&#x5C3E;&#x7F00;&#xFF08;&#x6D6E;&#x70B9;&#x578B;&#x3001;&#x65E0;&#x7B26;&#x53F7;&#x3001;&#x957F;&#x6574;&#x5F62;&#x4E4B;&#x7C7B;&#x7684;&#xFF09;&#x3002; 1&quot;/*&quot; { comment(); } &#x7B2C;16&#x884C;&#x5339;&#x914D;&#x4E86;C&#x8BED;&#x8A00;&#x7684;&#x6CE8;&#x91CA;&#x5F00;&#x59CB;&#xFF0C;&#x5E76;&#x4E14;&#x8C03;&#x7528;&#x4E86;comment()&#x51FD;&#x6570;&#x3002; 1234567891011121314151617comment(){ char c, c1;loop: while ((c = input()) != &apos;*&apos; &amp;&amp; c != 0) putchar(c); if ((c1 = input()) != &apos;/&apos; &amp;&amp; c != 0) { unput(c1); goto loop; } if (c != 0) putchar(c1);} comment()&#x51FD;&#x6570;&#x53EA;&#x505A;&#x4E86;&#x4E00;&#x4EF6;&#x4E8B;&#x5C31;&#x662F;&#x627E;&#x5230;&#x8FD9;&#x4E2A;&#x6CE8;&#x91CA;&#x7684;&#x7ED3;&#x5C3E;&#x4EE5;&#x5224;&#x65AD;&#x8FD9;&#x771F;&#x7684;&#x662F;&#x4E00;&#x4E2A;&#x6CE8;&#x91CA;&#xFF0C;&#x56E0;&#x4E3A;&#x662F;&#x6CE8;&#x91CA;&#xFF0C;&#x51FD;&#x6570;&#x6CA1;&#x6709;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;lex&#x91CC;&#x9762;&#x4E5F;&#x6CA1;&#x6709;&#x5BF9;&#x5E94;&#x7684;&#x8C03;&#x7528;&#x3002; 123456&quot;auto&quot; { count(); return(AUTO); }&quot;break&quot; { count(); return(BREAK); }&quot;case&quot; { count(); return(CASE); }&quot;char&quot; { count(); return(CHAR); }&quot;const&quot; { count(); return(CONST); }... 18-49&#x884C;&#x5B9A;&#x4E49;&#x4E86;C&#x8BED;&#x8A00;&#x7684;&#x5185;&#x7F6E;&#x5173;&#x952E;&#x5B57;&#x4ED6;&#x4EEC;&#x90FD;&#x8C03;&#x7528;&#x4E86;&#x4E00;&#x4E2A;count()&#x8FD4;&#x56DE;&#x4E86;&#x4E00;&#x4E2A;&#x5BF9;&#x5E94;&#x7684;Token&#x3002; 12345678910111213141516int column = 0;void count(){ int i; for (i = 0; yytext[i] != &apos;\\0&apos;; i++) if (yytext[i] == &apos;\\n&apos;) column = 0; else if (yytext[i] == &apos;\\t&apos;) column += 8 - (column % 8); else column++; ECHO;} &#x8FD9;&#x6BB5;&#x51FD;&#x6570;&#x5728;&#x6BCF;&#x6B21;&#x5339;&#x914D;&#x4E4B;&#x540E;&#x8BB0;&#x5F55;&#x4E86;&#x5F53;&#x524D;&#x884C;&#x4E2D;&#x7684;&#x5177;&#x4F53;&#x4F4D;&#x7F6E;(&#x6BCF;&#x5F53;\\n&#x65F6;&#x6362;&#x884C;\\t&#x65F6;&#x8BA1;&#x7B97;&#x4F4D;&#x7F6E;)&#x3002; ECHO&#x662F;&#x4E00;&#x6BB5;&#x5B8F;&#xFF1A; 1234567/* Copy whatever the last rule matched to the standard output. */#ifndef ECHO/* This used to be an fputs(), but since the string might contain NUL&apos;s, * we now use fwrite(). */#define ECHO fwrite( yytext, yyleng, 1, yyout )#endif 51-62&#x4E00;&#x4E9B;&#x7C7B;&#x578B;&#x5339;&#x914D;&#xFF1A; 123456789101112131415// &#x8FD9;&#x662F;C&#x4E2D;&#x53D8;&#x91CF;&#x540D;&#x7684;&#x5B9A;&#x4E49;{L}({L}|{D})* { count(); return(check_type()); }// 16&#x8FDB;&#x5236;&#x6570;0[xX]{H}+{IS}? { count(); return(CONSTANT); }// &#x5404;&#x79CD;&#x6570;&#x5B57;0{D}+{IS}? { count(); return(CONSTANT); }{D}+{IS}? { count(); return(CONSTANT); }// &#x5B57;&#x7B26;L?&apos;(\\\\.|[^\\\\&apos;])+&apos; { count(); return(CONSTANT); }// &#x79D1;&#x5B66;&#x8BA1;&#x6570;&#x6CD5;{D}+{E}{FS}? { count(); return(CONSTANT); }{D}*&quot;.&quot;{D}+({E})?{FS}? { count(); return(CONSTANT); }{D}+&quot;.&quot;{D}*({E})?{FS}? { count(); return(CONSTANT); }// &#x5B57;&#x7B26;&#x4E32;L?\\&quot;(\\\\.|[^\\\\&quot;])*\\&quot; { count(); return(STRING_LITERAL); } check_type()&#x4E2D;&#x5BF9;&#x7C7B;&#x578B;&#x8FDB;&#x884C;&#x68C0;&#x67E5;&#x3002; Lex&#x5C31;&#x53EA;&#x6709;&#x8FD9;&#x4E48;&#x591A;&#x4E86;&#x3002; &#x518D;&#x6765;&#x5206;&#x6790;Yacc&#x6587;&#x4EF6;12345678910111213141516%token IDENTIFIER CONSTANT STRING_LITERAL SIZEOF%token PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP%token AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN%token SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN%token XOR_ASSIGN OR_ASSIGN TYPE_NAME%token TYPEDEF EXTERN STATIC AUTO REGISTER%token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID%token STRUCT UNION ENUM ELLIPSIS%token CASE DEFAULT IF ELSE LOWER_THAN_ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN%start translation_unit%nonassoc LOWER_THAN_ELSE %nonassoc ELSE &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E9B;&#x5173;&#x952E;&#x5B57;&#x7684;Token&#xFF0C;&#x91CD;&#x70B9;&#x770B;&#x6700;&#x540E;&#x4E24;&#x884C;LOWER_THAN_ELSE &#x548C;ELSE&#x5206;&#x522B;&#x4EE3;&#x8868;&#x4E86;&#x4E24;&#x79CD;&#x7684;ELSE&#x7684;&#x4F18;&#x5148;&#x7EA7;&#xFF0C;&#x7528;&#x4E8E;&#x5904;&#x7406;ELSE&#x5E38;&#x89C1;&#x7684;&#x60AC;&#x7A7A;&#x51B2;&#x7A81;&#x95EE;&#x9898;&#x3002; &#x63A5;&#x4E0B;&#x6765;&#x6211;&#x4EEC;&#x770B;&#x770B;yacc&#x6587;&#x4EF6;&#x4E2D;&#x7684;BNF&#x5F0F;&#x90FD;&#x662F;&#x600E;&#x4E48;&#x5199;&#x7684;&#x3002; 123456primary_expression : IDENTIFIER | CONSTANT | STRING_LITERAL | &apos;(&apos; expression &apos;)&apos; ; &#x6700;&#x5C0F;&#x7684;&#x5B50;&#x96C6;&#x7531;ID&#xFF0C;&#x5E38;&#x91CF;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x8FD8;&#x6709;&#x62EC;&#x53F7;&#x8986;&#x76D6;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x6784;&#x6210;&#x3002; 12345678910postfix_expression : primary_expression | postfix_expression &apos;[&apos; expression &apos;]&apos; | postfix_expression &apos;(&apos; &apos;)&apos; | postfix_expression &apos;(&apos; argument_expression_list &apos;)&apos; | postfix_expression &apos;.&apos; IDENTIFIER | postfix_expression PTR_OP IDENTIFIER | postfix_expression INC_OP | postfix_expression DEC_OP ; &#x8FD9;&#x4E2A;&#x6307;&#x51FA;&#x4E86;postfix_expression&#x53EF;&#x4EE5;&#x4EE3;&#x8868;&#x6570;&#x7EC4;&#xFF0C;&#x51FD;&#x6570;&#x8C03;&#x7528;&#xFF0C;&#x5E26;&#x53C2;&#x6570;&#x7684;&#x51FD;&#x6570;&#x8C03;&#x7528;&#xFF0C;.&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;-&gt;&#x6307;&#x9488;&#xFF0C;++,&#x2014;&#x3002; 12345678910111213argument_expression_list : assignment_expression | argument_expression_list &apos;,&apos; assignment_expression ;unary_expression : postfix_expression | INC_OP unary_expression | DEC_OP unary_expression | unary_operator cast_expression | SIZEOF unary_expression | SIZEOF &apos;(&apos; type_name &apos;)&apos; ; &#x53C2;&#x6570;&#x8868;&#x8FBE;&#x5F0F;&#x5217;&#x8868;&#x7531;&#x591A;&#x4E2A;&#x2019;,&#x2019;&#x548C;assignment_expression&#x7EC4;&#x6210;&#xFF0C;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x51FD;&#x6570;&#x7684;&#x591A;&#x4E2A;&#x4F20;&#x53C2;&#x3002; &#x4E00;&#x5143;&#x8868;&#x8FBE;&#x5F0F;&#x5305;&#x542B;&#x4E4B;&#x524D;&#x7684;postfix&#x8FD8;&#x6709;&#x524D;&#x7F6E;&#x7684;++, &#x2014;&#x3002;&#x8FD8;&#x6709;&#x5C31;&#x662F;&#x5BF9;&#x4E00;&#x4E2A;&#x4E1C;&#x897F;&#x6C42;sizeof&#x4E5F;&#x662F;&#x3002; 12345678unary_operator : &apos;&amp;&apos; | &apos;*&apos; | &apos;+&apos; | &apos;-&apos; | &apos;~&apos; | &apos;!&apos; ; &#x4E00;&#x5143;&#x8FD0;&#x7B97;&#x7B26;&#x3002; 1234567891011121314151617cast_expression : unary_expression | &apos;(&apos; type_name &apos;)&apos; cast_expression ;multiplicative_expression : cast_expression | multiplicative_expression &apos;*&apos; cast_expression | multiplicative_expression &apos;/&apos; cast_expression | multiplicative_expression &apos;%&apos; cast_expression ;additive_expression : multiplicative_expression | additive_expression &apos;+&apos; multiplicative_expression | additive_expression &apos;-&apos; multiplicative_expression ; cast_expression:&#x5F3A;&#x5236;&#x7C7B;&#x578B;&#x8F6C;&#x6362; multiplicative_expression/additive_expression:&#x533A;&#x5206;&#x8FD9;&#x4E94;&#x79CD;&#x8FD0;&#x7B97;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x3002; 12345678910111213141516171819shift_expression : additive_expression | shift_expression LEFT_OP additive_expression | shift_expression RIGHT_OP additive_expression ;relational_expression : shift_expression | relational_expression &apos;&lt;&apos; shift_expression | relational_expression &apos;&gt;&apos; shift_expression | relational_expression LE_OP shift_expression | relational_expression GE_OP shift_expression ;equality_expression : relational_expression | equality_expression EQ_OP relational_expression | equality_expression NE_OP relational_expression ; shift-&gt;&#x4F4D;&#x8FD0;&#x7B97; &#xFF1B;relational_expression &#x5904;&#x7406;&#x6BD4;&#x8F83;&#xFF1B;equality_expression &#x5904;&#x7406;&#x76F8;&#x7B49;&#x5173;&#x7CFB;&#x3002; 1234567891011121314151617181920212223242526272829and_expression : equality_expression | and_expression &apos;&amp;&apos; equality_expression ;exclusive_or_expression : and_expression | exclusive_or_expression &apos;^&apos; and_expression ;inclusive_or_expression : exclusive_or_expression | inclusive_or_expression &apos;|&apos; exclusive_or_expression ;logical_and_expression : inclusive_or_expression | logical_and_expression AND_OP inclusive_or_expression ;logical_or_expression : logical_and_expression | logical_or_expression OR_OP logical_and_expression ;conditional_expression : logical_or_expression | logical_or_expression &apos;?&apos; expression &apos;:&apos; conditional_expression ; &#x4E0B;&#x9762;&#x662F;&#x51E0;&#x79CD;&#x903B;&#x8F91;&#x8FD0;&#x7B97;&#x7B26;&#x7684;&#x5339;&#x914D;&#x5173;&#x7CFB;&#xFF0C;&#x8FD8;&#x6709;&#x4E09;&#x76EE;&#x8FD0;&#x7B97;&#x7B26;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041assignment_expression : conditional_expression | unary_expression assignment_operator assignment_expression ;assignment_operator : &apos;=&apos; | MUL_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_ASSIGN | RIGHT_ASSIGN | AND_ASSIGN | XOR_ASSIGN | OR_ASSIGN ;expression : assignment_expression | expression &apos;,&apos; assignment_expression ;constant_expression : conditional_expression ;declaration : declaration_specifiers &apos;;&apos; | declaration_specifiers init_declarator_list &apos;;&apos; ;declaration_specifiers : storage_class_specifier | storage_class_specifier declaration_specifiers | type_specifier | type_specifier declaration_specifiers | type_qualifier | type_qualifier declaration_specifiers ; assignment_operator &#x6307;&#x5B9A;&#x4E86;&#x4E00;&#x7C7B;&#x7F29;&#x7565;&#x5F62;&#x5F0F;&#xFF0C;&#x8BF8;&#x5982;&#xFF1A;/= *= += -=&#x4E4B;&#x7C7B;&#x7684;&#x3002; declaration &#x6DFB;&#x52A0;&#x4E86;&#x2018;;&#x2019; declaration_specifiers&#x5B9A;&#x4E49;&#x4E86;&#x7C7B;&#x578B;&#x7684;&#x58F0;&#x660E;&#x3002; 1234567891011121314151617init_declarator_list : init_declarator | init_declarator_list &apos;,&apos; init_declarator ;init_declarator : declarator | declarator &apos;=&apos; initializer ;storage_class_specifier : TYPEDEF | EXTERN | STATIC | AUTO | REGISTER ; storage_class_specifier &#x5B9A;&#x4E49;&#x4E86;&#x51E0;&#x79CD;&#x7C7B;&#x578B;&#x3002;init_declarator&#x5B8C;&#x6210;&#x4E86;&#x521D;&#x59CB;&#x5316;&#x3002; init_declarator_list &#x2018;,&#x2019; init_declarator &#x662F;&#x5728;&#x5BF9;&#x4E8E;&#x591A;&#x4E2A;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x7684;&#x521D;&#x59CB;&#x5316;&#x3002; 12345678910111213141516171819202122232425type_specifier : VOID | CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED | struct_or_union_specifier | enum_specifier | TYPE_NAME ;struct_or_union_specifier : struct_or_union IDENTIFIER &apos;{&apos; struct_declaration_list &apos;}&apos; | struct_or_union &apos;{&apos; struct_declaration_list &apos;}&apos; | struct_or_union IDENTIFIER ;struct_or_union : STRUCT | UNION ; type_specifier &#x4E2D;&#x5B9A;&#x4E49;&#x4E86;&#x5F88;&#x591A;&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x3002;struct_or_union&#x662F;&#x7ED3;&#x6784;&#x4F53;&#x548C;&#x8054;&#x5408;&#x7684;&#x5B9A;&#x4E49;&#x3002; struct_or_union_specifier &#x7ED9;&#x51FA;&#x4E86;&#x5BF9;&#x7ED3;&#x6784;&#x4F53;&#x7684;&#x5B9A;&#x4E49;&#x3002; 123456789101112131415struct_declaration_list : struct_declaration | struct_declaration_list struct_declaration ;struct_declaration : specifier_qualifier_list struct_declarator_list &apos;;&apos; ;specifier_qualifier_list : type_specifier specifier_qualifier_list | type_specifier | type_qualifier specifier_qualifier_list | type_qualifier ; &#x7EE7;&#x7EED;&#x7ED9;&#x51FA;&#x4E86;&#x4E00;&#x4E9B;&#x7ED3;&#x6784;&#x4F53;&#x7684;&#x7533;&#x8BF7;&#x3002; 1234567891011121314151617181920212223242526struct_declarator_list : struct_declarator | struct_declarator_list &apos;,&apos; struct_declarator ;struct_declarator : declarator | &apos;:&apos; constant_expression | declarator &apos;:&apos; constant_expression ;enum_specifier : ENUM &apos;{&apos; enumerator_list &apos;}&apos; | ENUM IDENTIFIER &apos;{&apos; enumerator_list &apos;}&apos; | ENUM IDENTIFIER ;enumerator_list : enumerator | enumerator_list &apos;,&apos; enumerator ;enumerator : IDENTIFIER | IDENTIFIER &apos;=&apos; constant_expression ; struct_declarator_list &#x662F;&#x591A;&#x4E2A;&#x7ED3;&#x6784;&#x4F53;&#x7684;&#x7533;&#x8BF7;&#x8FC7;&#x7A0B;&#x3002; struct_declarator &#x7ED3;&#x6784;&#x4F53;&#x7684;&#x58F0;&#x660E;&#x7B26;&#x3002; constant_expression &#x6307;&#x5411;&#x4E86;&#x4E00;&#x4E9B;&#x903B;&#x8F91;&#x8868;&#x8FBE;&#x5F0F;&#x3002; enum_specifier &#x5B9A;&#x4E49;&#x4E86;&#x8054;&#x5408;&#x7684;&#x58F0;&#x660E;&#xFF0C;&#x540C;&#x6837;list&#x5C31;&#x662F;&#x591A;&#x4E2A;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x58F0;&#x660E;&#xFF0C;emumerator&#x662F;&#x5BF9;&#x7ED3;&#x6784;&#x4F53;&#x7684;&#x521D;&#x59CB;&#x5316;&#x3002; 12345678910111213141516171819type_qualifier : CONST | VOLATILE ;declarator : pointer direct_declarator | direct_declarator ;direct_declarator : IDENTIFIER | &apos;(&apos; declarator &apos;)&apos; | direct_declarator &apos;[&apos; constant_expression &apos;]&apos; | direct_declarator &apos;[&apos; &apos;]&apos; | direct_declarator &apos;(&apos; parameter_type_list &apos;)&apos; | direct_declarator &apos;(&apos; identifier_list &apos;)&apos; | direct_declarator &apos;(&apos; &apos;)&apos; ; type_qualifier &#x5B9A;&#x4E49;&#x4E86;const &#x548C; volatile &#x5173;&#x952E;&#x5B57;&#x3002; declarator &#x58F0;&#x660E;&#x7B26;&#x6307;&#x5411;&#x4E86;&#x6307;&#x9488;&#x7C7B;&#x578B;&#x548C;&#x57FA;&#x7840;&#x7C7B;&#x578B;&#x3002; direct_declarator &#x76F4;&#x63A5;&#x58F0;&#x660E;&#x7B26;&#xFF0C;&#x5305;&#x542B;&#x4E86;&#x6570;&#x7EC4;&#x3001;&#x5E26;&#x53C2;&#x6570;&#x7684;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;&#x7B49;&#x7B49;&#x7B49;&#x3002; pointer &#x6307;&#x9488;&#x7C7B;&#x578B;&#x3002; 1234567891011121314151617pointer : &apos;*&apos; | &apos;*&apos; type_qualifier_list | &apos;*&apos; pointer | &apos;*&apos; type_qualifier_list pointer ;type_qualifier_list : type_qualifier | type_qualifier_list type_qualifier ;parameter_type_list : parameter_list | parameter_list &apos;,&apos; ELLIPSIS ; pointer &#x6307;&#x660E;&#x4E86;&#x51E0;&#x79CD;&#x6307;&#x9488;&#x7684;&#x4E66;&#x5199;&#x65B9;&#x5F0F;&#x3002; parameter_type_list &#x4EE3;&#x8868;&#x53C2;&#x6570;&#x5217;&#x8868;&#x3002; 123456 /* &#x8FD9;&#x91CC;&#x7684;&#x65E0;else&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x662F;&#x4F4E;&#x4E8E;&#x7531;else &#x7684; */selection_statement : IF &apos;(&apos; expression &apos;)&apos; statement %prec LOWER_THAN_ELSE | IF &apos;(&apos; expression &apos;)&apos; statement ELSE statement | SWITCH &apos;(&apos; expression &apos;)&apos; statement ; &#x5176;&#x4F59;&#x7684;&#x53EA;&#x6709;&#x8FD9;&#x91CC;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x4E00;&#x4E0B;&#xFF0C;&#x8FD9;&#x91CC;&#x51FA;&#x73B0;&#x4E86;&#x8457;&#x540D;&#x7684;ELSE&#x60AC;&#x7A7A;&#x7684;&#x79FB;&#x8FDB;&#x89C4;&#x7EA6;bug&#xFF0C;&#x6240;&#x4EE5;&#x4F7F;&#x7528;&#x4E86;&#x4E00;&#x4E2A;&#x4F18;&#x5148;&#x7EA7;&#x4F4E;&#x4E8E;ELSE&#x7684;LOWER_THAN_ELSE&#x6765;&#x6307;&#x5B9A;&#x4F18;&#x5148;&#x7EA7;&#x3002;","categories":[],"tags":[]},{"title":"学习制作一门有趣的编程语言－0x02","slug":"make-new-language-2","date":"2016-06-01T04:13:17.000Z","updated":"2016-06-01T14:30:47.000Z","comments":true,"path":"2016/06/01/make-new-language-2/","link":"","permalink":"https://lfkdsk.github.io/2016/06/01/make-new-language-2/","excerpt":"","text":"&#x535A;&#x5BA2;&#x5730;&#x5740;&#xFF1A; http://lfkdsk.github.io&#x4EE3;&#x7801;&#x5730;&#x5740;&#xFF1A; https://github.com/lfkdsk/CodeParse &#x4E3A;&#x8BA1;&#x7B97;&#x5668;&#x6DFB;&#x52A0;&#x4E00;&#x4E9B;&#x65B0;&#x529F;&#x80FD; &#x672C;&#x8282;&#x4EE3;&#x7801;&#xFF1A;CalcWithTable &#x4E0A;&#x6B21;&#x6211;&#x4EEC;&#x4F7F;&#x7528;Lex &amp; Yacc&#x5236;&#x4F5C;&#x4E86;&#x4E00;&#x4E2A;&#x80FD;&#x591F;&#x5904;&#x7406;&#x4F18;&#x5148;&#x7EA7;&#x7684;&#x8BA1;&#x7B97;&#x5668;&#xFF0C;&#x5176;&#x4E2D;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x7684;&#x8BBE;&#x5B9A;&#x662F;&#x901A;&#x8FC7;&#x4FEE;&#x6539;&#x6587;&#x6CD5;&#xFF0C;&#x5C06;&#x4F18;&#x5148;&#x7EA7;&#x63D0;&#x5347;&#xFF0C;&#x8FD9;&#x6B21;&#x91CD;&#x5199;&#x8FD9;&#x4E2A;&#x8BA1;&#x7B97;&#x5668;&#x5E76;&#x6DFB;&#x52A0;&#x4E00;&#x4E9B;&#x65B0;&#x7684;&#x529F;&#x80FD;&#x3002; &#x5148;&#x770B;Lex&#x6587;&#x4EF6; %{ #include &quot;y.tab.h&quot; #include &lt;math.h&gt; #include &quot;link_list.h&quot; %} %% /* &#x8FD9;&#x6BB5;&#x6B63;&#x5219;&#x548C;&#x4E4B;&#x524D;&#x90FD;&#x6709;&#x6240;&#x4E0D;&#x540C; &#x660E;&#x663E;&#x7684;&#x589E;&#x52A0;&#x4E86;&#x5BF9;&#x4E8E;&#x79D1;&#x5B66;&#x6280;&#x672F;&#x6CD5;&#x7684;&#x652F;&#x6301; */ ([0-9]+|([0-9]*\\.[0-9]+)([eE][-+]?[0-9]+)?) { /* &#x8F6C;&#x6362;&#x4E3A;double&#x7C7B;&#x578B; */ yylval.dval = atof(yytext); /* &#x6211;&#x628A;&#x5B83;&#x6253;&#x5370;&#x51FA;&#x6765; */ printf(&quot;number : %s \\n&quot;, yytext); return NUMBER; } [ \\t] ; /* &#x8FD9;&#x91CC;&#x63D0;&#x4F9B;&#x4E86;&#x5BF9;&#x4E8E;&#x5B57;&#x6BCD;&#x548C;&#x5B57;&#x6BCD;&#x7EC4;&#x5408;&#x7684;&#x8BC6;&#x522B; &#x8FD9;&#x662F;&#x5BF9;&#x4E8E;&#x53D8;&#x91CF;&#x540D;&#x7684;&#x8BC6;&#x522B;&#x5339;&#x914D; */ [A-Za-z][A-Za-z0-9]* { /* addNode(char *)&#x662F;link_list.c&#x4E2D;&#x7684;&#x51FD;&#x6570; &#x5C06;&#x53D8;&#x91CF;&#x540D;&#x548C;&#x5BF9;&#x5E94;&#x7684;&#x53C2;&#x6570;&#x5B58;&#x50A8;&#x5728;&#x4E00;&#x4E2A;&#x94FE;&#x8868;&#x4E2D; */ /* &#x8FD4;&#x56DE;&#x503C;&#x4E3A;&#x5BF9;&#x5E94;&#x7684;&#x6307;&#x9488; */ yylval.name = addNode(yytext); printLink(); /* &#x8FD4;&#x56DE;&#x7684;Token&#x6307;&#x53D8;&#x91CF;&#x540D; */ return NAME; } &quot;$&quot; { return 0; } \\n | . { return yytext[0]; } %% &#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x548C;&#x4E4B;&#x524D;&#x7684;&#x533A;&#x522B;&#x4E0D;&#x5927;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x660E;&#x663E;&#x7684;&#x4E3A;&#x5B83;&#x589E;&#x52A0;&#x4E86;&#x4E00;&#x4E2A;&#x529F;&#x80FD;&#xFF0C;&#x5C31;&#x662F;&#x8BC6;&#x522B;&#x53D8;&#x91CF;&#x540D;&#x3002; &#x5728;&#x770B;yacc&#xFF1A; %{ #include &quot;link_list.h&quot; int yydebug=1; #include &lt;math.h&gt; %} %union{ double dval; /* &#x5B58;&#x50A8;&#x7684;&#x7C7B;&#x578B;&#x53D8;&#x4E86; &#x5B58;&#x50A8;&#x7684;&#x662F;&#x4E00;&#x4E2A;symtable&#x7C7B;&#x578B;&#x7684;&#x7ED3;&#x6784;&#x4F53;&#x6307;&#x9488; */ struct symtable *name; } /* &#x58F0;&#x660E;&#x4E86;&#x4E24;&#x4E2A;Token &#x6307;&#x9488;&#x7C7B;&#x578B;&#x7684;NAME double&#x7C7B;&#x578B;&#x7684;NUMBER */ %token &lt;name&gt; NAME %token &lt;dval&gt; NUMBER /* &#x8FD9;&#x91CC;&#x5F3A;&#x884C;&#x6307;&#x5B9A;&#x4E86;&#x5DE6;&#x7ED3;&#x5408;&#x4EE5;&#x53CA;&#x4F18;&#x5148;&#x6027; */ %left &apos;-&apos; &apos;+&apos; %left &apos;*&apos; &apos;/&apos; /* &#x4E3A;&#x4E00;&#x5143;&#x51CF;&#x53F7;&#x8BBE;&#x7F6E;&#x4E86;&#x6700;&#x9AD8;&#x7684;&#x4F18;&#x5148;&#x7EA7; */ %nonassoc UMINUS %type &lt;dval&gt; expression %% stament_list: stament &apos;\\n&apos; | stament_list stament &apos;\\n&apos; ; /* &#x589E;&#x52A0;&#x4E86;&#x4E00;&#x4E2A;&#x89C4;&#x5219;&#x5904;&#x7406;&#x53D8;&#x91CF;&#x540D;&#x8D4B;&#x503C; */ stament: NAME &apos;=&apos; expression { $1-&gt;value = $3; } | expression { printf(&quot;= %g \\n&quot;, $1); } ; expression: expression &apos;+&apos; expression { $$ = $1 + $3; } | expression &apos;-&apos; expression { $$ = $1 - $3; } | expression &apos;*&apos; expression { $$ = $1 * $3; } | expression &apos;/&apos; expression { if($3 == 0.0){ yyerror(&quot;devide by zero&quot;); }else{ $$ = $1 / $3; } } /* &#x8FD9;&#x91CC;&#x518D;&#x53EA;&#x6709;&#x4E00;&#x5143;&#x5EFA;&#x597D;&#x64CD;&#x4F5C;&#x7B26;&#x7684;&#x65F6;&#x5019;&#x5F3A;&#x5236;&#x4F7F;&#x7528;UMINUS&#x7684;&#x7ED3;&#x5408;&#x6027; */ | &apos;-&apos; expression %prec UMINUS { $$ = -$2; } | &apos;(&apos; expression &apos;)&apos; { $$ = $2; } | NUMBER /* &#x5F53;&#x51FA;&#x73B0;&#x53D8;&#x91CF;&#x540D;&#x7684;&#x65F6;&#x5019; &#x628A;&#x53D8;&#x91CF;&#x540D;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x8FD4;&#x56DE; */ | NAME { $$ = $1-&gt;value; } /* &#x8FD9;&#x4E5F;&#x662F;&#x65B0;&#x529F;&#x80FD; &#x8BA1;&#x7B97;&#x5668;&#x652F;&#x6301;&#x4F7F;&#x7528;&#x5185;&#x7F6E;&#x51FD;&#x6570; &#x5F53;&#x53D8;&#x91CF;&#x540D;&#x5B58;&#x5728;&#x51FD;&#x6570;&#x6307;&#x9488;&#x7684;&#x65F6;&#x5019; */ /* &#x5C06;&#x5176;&#x4F5C;&#x4E3A;&#x51FD;&#x6570;&#x5904;&#x7406; */ | NAME &apos;(&apos; expression &apos;)&apos; { if ($1-&gt;funcptr) { $$ = ($1-&gt;funcptr)($3); }else{ printf(&quot;%s is not a function \\n&quot;, $1-&gt;name); $$ = 0.0; } } ; %% int main(){ extern double sqrt(), exp(), log(); /* &#x73B0;&#x5728;&#x65E0;&#x6CD5;&#x52A8;&#x4E0B;&#x7684;&#x751F;&#x6210;&#x51FD;&#x6570; &#x6240;&#x4EE5;&#x53EA;&#x80FD;&#x6DFB;&#x52A0;&#x5185;&#x7F6E;&#x7684;&#x51E0;&#x79CD;&#x51FD;&#x6570; */ addFunction(&quot;sqrt&quot;, sqrt); addFunction(&quot;exp&quot;,exp); addFunction(&quot;log&quot;,log); yyparse(); } &#x73B0;&#x5728;&#x7684;yacc&#x6587;&#x4EF6;&#x4E2D;&#x6211;&#x4EEC;&#x652F;&#x6301;&#x4E86;&#x53D8;&#x91CF;&#x540D;&#x7684;&#x7533;&#x8BF7;&#xFF0C;&#x548C;&#x51FD;&#x6570;&#x7684;&#x8C03;&#x7528;&#xFF0C;&#x8FD9;&#x91CC;&#x9762;&#x6211;&#x4EEC;&#x7684;&#x51FD;&#x6570;&#x90FD;&#x6765;&#x81EA;&#x4E8E;link_list.h&#x4E2D;&#x7684;&#x5B9A;&#x4E49; link_list.h : #ifndef SYMBOL #include &lt;string.h&gt; #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; struct symtable { /* data */ char *name; double value; /* &#x51FD;&#x6570;&#x6307;&#x9488; */ double (*funcptr)(); struct symtable *next; }; struct symtable* addNode(char *symbol); void printLink(); void addFunction(char *name, double func()); #endif link_list.c : #include &quot;link_list.h&quot; struct symtable *head = 0; int flag = 0; struct symtable* addNode(char *symbol){ if (flag == 0) { flag = 1; head = (struct symtable*)malloc(sizeof(struct symtable)); head-&gt;name = strdup(symbol); head-&gt;next = 0; return head; } struct symtable *sp = head; while (sp != 0) { if (sp-&gt;name &amp;&amp; !strcmp(sp-&gt;name, symbol)) { /* &#x627E;&#x5230;&#x4E00;&#x6837;&#x7684;&#x4E86; */ return sp; } if (!sp-&gt;name) { sp-&gt;name = strdup(symbol); return sp; } sp = sp-&gt;next; } sp = head; while (sp-&gt;next != 0) { sp = sp-&gt;next; } struct symtable *tail; tail = (struct symtable*)malloc(sizeof(struct symtable)); tail-&gt;name = strdup(symbol); tail-&gt;next = 0; sp-&gt;next = tail; return tail; } void printLink(){ struct symtable* sp = head; while (sp != 0) { printf(&quot;name : %s index : %p value : %f \\n&quot;, sp-&gt;name, sp, sp-&gt;value); sp = sp-&gt;next; } } void addFunction(char *name, double func()){ struct symtable* sp = addNode(name); sp-&gt;funcptr = func; } &#x81F3;&#x6B64;&#x6211;&#x4EEC;&#x7684;&#x8BA1;&#x7B97;&#x5668;&#x5C31;&#x80FD;&#x652F;&#x6301;&#x53C2;&#x6570;&#x540D;&#x548C;&#x5185;&#x7F6E;&#x51FD;&#x6570;&#x4E86;&#x3002; &#x6211;&#x4EEC;&#x6765;&#x5199;&#x4E00;&#x4E0B;makefile&#x6587;&#x4EF6;: ex_calc: y.tab.o lex.yy.o link_list.o $ cc -o ex_calc link_list.c y.tab.c lex.yy.c -ly -ll link_list.o: link_list.c link_list.h lex.yy.o: lex.yy.c y.tab.h lex.yy.o y.tab.o: link_list.h y.tab.c y.tab.h: ex_calc.y $ yacc -d ex_calc.y lex.yy.c: ex_calc.l $ lex ex_calc.l &#x4E4B;&#x540E;&#x4F7F;&#x7528;make&#x547D;&#x4EE4;&#x7F16;&#x8BD1;&#x8FD0;&#x884C;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x6B63;&#x5E38;&#x4F7F;&#x7528;&#x4E86;&#x3002;","categories":[],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://lfkdsk.github.io/tags/编程语言/"}]},{"title":"学习制作一门有趣的编程语言－0x01","slug":"make-new-language-1","date":"2016-05-27T00:37:20.000Z","updated":"2016-06-01T15:34:40.000Z","comments":true,"path":"2016/05/27/make-new-language-1/","link":"","permalink":"https://lfkdsk.github.io/2016/05/27/make-new-language-1/","excerpt":"","text":"&#x719F;&#x6089;&#x4E00;&#x4E0B;Lex &#x548C; Yacc&#x7684;&#x7528;&#x6CD5; &#x535A;&#x5BA2;&#x5730;&#x5740;&#xFF1A; http://lfkdsk.github.io&#x4EE3;&#x7801;&#x5730;&#x5740;&#xFF1A; https://github.com/lfkdsk/CodeParse tips&#xFF1A;&#x9605;&#x8BFB;&#x6B64;&#x7BC7;&#x9700;&#x8981;&#x4E00;&#x5B9A;&#x7684;C&#x8BED;&#x8A00;&#x57FA;&#x7840;&#x548C;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x77E5;&#x8BC6; &#x9996;&#x5148;&#x4E0A;&#x4E00;&#x7BC7;&#x63D0;&#x5230;&#x4E86;&#x7B2C;&#x4E00;&#x6B65;&#x7684;&#x5DE5;&#x4F5C;&#x662F;&#x8981;&#x4F7F;&#x7528; Lex &#x548C; Yacc &#x8FDB;&#x884C;&#x7F16;&#x5199;&#xFF0C;&#x6240;&#x4EE5;&#x8BF4;&#x7B2C;&#x4E00;&#x6B65;&#x9996;&#x5148;&#x7B80;&#x5355;&#x7684;&#x5B66;&#x4E60;&#x4E00;&#x4E0B; Lex &amp; Yacc &#x7684;&#x7528;&#x6CD5;&#xFF0C;Lex &amp; Yacc &#x662F;&#x4E00;&#x5957;&#x5F88;&#x53E4;&#x8001;&#x7684;&#x7F16;&#x8BD1;&#x751F;&#x6210;&#x5957;&#x4EF6;&#xFF0C;&#x5927;&#x7EA6;&#x5728;&#x4E0A;&#x4E2A;&#x4E16;&#x7EAA;80&#x5E74;&#x4EE3;&#x5C31;&#x6709;&#x4E86;&#x3002;&#x4F46;&#x662F;&#x5E76;&#x4E0D;&#x8FC7;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x4ECA;&#x5929;&#x751F;&#x6210;&#x7F16;&#x8BD1;&#x7A0B;&#x5E8F;&#x4ECD;&#x7136;&#x80FD;&#x591F;&#x7528;&#x5F97;&#x4E0A;&#x3002;Lex &amp; Yacc &#x5982;&#x679C;&#x7B80;&#x5355;&#x7684;&#x6982;&#x62EC;&#x6765;&#x8BF4;&#xFF0C;Lex &#x8D1F;&#x8D23;&#x8BCD;&#x6CD5;&#x5206;&#x6790;&#xFF0C;&#x5C31;&#x662F;&#x628A;&#x8F93;&#x5165;&#x4E32;&#x7684;&#x7EAF;&#x5B57;&#x7B26;&#x8F6C;&#x5316;&#x4E3A; &#x8BCD;&#x6CD5;&#x8BB0;&#x53F7;&#x6D41;&#xFF0C; &#x800C; Yacc &#x8D1F;&#x8D23;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#xFF0C;&#x5C06;&#x8BCD;&#x6CD5;&#x8BB0;&#x53F7;&#x6D41;&#x5904;&#x7406;&#x6210;&#x4E00;&#x79CD;&#x6811;&#x5F62;&#x7ED3;&#x6784;&#xFF0C;&#x53EB;&#x505A;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x6811;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x4E2D;&#x3002;&#x81F3;&#x6B64;&#x7B80;&#x5355;&#x6765;&#x8BB2;&#x7684;&#x524D;&#x7AEF;&#x5DE5;&#x4F5C;&#x5C31;&#x57FA;&#x672C;&#x5B8C;&#x6210;&#x4E86;&#xFF0C;&#x4EE3;&#x7801;&#x5C31;&#x6709;&#x673A;&#x4F1A;&#x88AB;&#x8F6C;&#x6362;&#x6210;&#x4E00;&#x79CD;&#x4E09;&#x5730;&#x5740;&#x4EE3;&#x7801;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x7ECF;&#x8FC7;&#x4F18;&#x5316;&#x5668;&#x7684;&#x4F18;&#x5316;&#x751F;&#x6210;&#x673A;&#x5668;&#x6307;&#x4EE4;&#x5C31;&#x53EF;&#x4EE5;&#x8FD0;&#x884C;&#x5728;&#x673A;&#x5668;&#x4E2D;&#x4E86;&#x3002; &#x8BCD;&#x6CD5;&#x8BB0;&#x53F7;&#xFF1A;&#x4E00;&#x822C;&#x88AB;&#x79F0;&#x4F5C;Token&#xFF0C;&#x662F;&#x6307;&#x5BF9;&#x4E8E;&#x8F93;&#x5165;&#x4E32;&#x7684;&#x5185;&#x5BB9;&#x8FDB;&#x884C;&#x8BCD;&#x7D20;&#x5206;&#x7C7B;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#x6570;&#x5B57;&#x3001;&#x5B57;&#x7B26;&#x4E32;&#x3001;&#x4FDD;&#x7559;&#x5B57;&#xFF08;&#x5173;&#x952E;&#x5B57;&#xFF09;&#x3001;&#x4FDD;&#x7559;&#x5B57;&#x4E4B;&#x95F4;&#x8FD8;&#x6709;&#x4E0D;&#x540C;&#x7684; Token &#x4E09;&#x5730;&#x5740;&#x4EE3;&#x7801;&#xFF1A;&#x4E00;&#x4E9B;&#x8BED;&#x8A00;&#x8F6C;&#x6362;&#x673A;&#x5236;&#x7684;&#x4E2D;&#x95F4;&#x5F62;&#x5F0F;&#xFF0C;&#x6BCF;&#x884C;&#x4EE3;&#x7801;&#x53EA;&#x6709;&#x4E09;&#x4E2A;&#x5BF9;&#x8C61;&#xFF08;&#x4E24;&#x4E2A;&#x8FD0;&#x7B97;&#x5206;&#x91CF;&#x3001;&#x4E00;&#x4E2A;&#x64CD;&#x4F5C;&#x7B26;&#x7EC4;&#x6210;&#xFF09;&#xFF0C;&#x8F6C;&#x6362;&#x8FD9;&#x79CD;&#x5F62;&#x5F0F;&#x80FD;&#x591F;&#x4FBF;&#x4E8E;&#x673A;&#x5668;&#x6307;&#x4EE4;&#x7684;&#x751F;&#x6210;&#x3002; &#x521A;&#x624D;&#x8BF4;&#x4E86;&#x8FD9;&#x4E48;&#x591A;&#x90A3;Lex &amp; Yacc&#x5E2E;&#x6211;&#x4EEC;&#x505A;&#x4E86;&#x4EC0;&#x4E48;&#x5462;&#xFF1F;&#x7B54;&#x6848;&#x662F;&#x5728;&#x6211;&#x4EEC;&#x4EE3;&#x7801;&#x7684;&#x8F85;&#x52A9;&#x4E0B;&#x51E0;&#x4E4E;&#x90FD;&#x505A;&#x4E86;&#xFF0C;&#x9996;&#x5148;&#x5728;&#x524D;&#x7AEF;&#x65B9;&#x9762;&#xFF0C;&#x6839;&#x636E;Lex &amp; Yacc &#x8FDB;&#x884C;&#x4E86;&#x8BCD;&#x6CD5;&#x548C;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#xFF0C;&#x5728;&#x540E;&#x7AEF;&#x4EE3;&#x7801;&#x88AB;&#x76F4;&#x63A5;&#x751F;&#x6210;&#x4E86;C&#x8BED;&#x8A00;&#x4EE3;&#x7801;&#xFF0C;&#x501F;&#x52A9;C&#x8BED;&#x8A00;&#x4F18;&#x79C0;&#x7684;&#x7F16;&#x8BD1;&#x94FE;&#x53EF;&#x4EE5;&#x8F7B;&#x677E;&#x7684;&#x751F;&#x6210;&#x7684;&#x7A0B;&#x5E8F;&#x3002; &#x5177;&#x4F53;&#x4F7F;&#x7528;&#x4E0A;&#x9762;&#x6211;&#x4EEC;&#x4ECB;&#x7ECD;&#x4E86;Lex &amp; Yacc&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x6BEB;&#x65E0;&#x7591;&#x95EE;Lex &amp; Yacc&#x662F;&#x975E;&#x5E38;&#x5B8C;&#x7F8E;&#x7684;&#x7F16;&#x8BD1;&#x751F;&#x6210;&#x7A0B;&#x5E8F;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x6211;&#x4EEC;&#x6765;&#x4ECB;&#x7ECD;&#x4E00;&#x4E0B;Lex &amp; Yacc&#x7684;&#x7528;&#x6CD5;&#x3002; &#x63A8;&#x8350;&#x4E66;&#x7C4D;:O&#x2019;Relly&#x51FA;&#x7248;&#x7684; Lex &amp; Yacc &#x662F;&#x4E00;&#x672C;&#x4ECB;&#x7ECD; Lex &#x548C; Yacc&#x529F;&#x80FD;&#x975E;&#x5E38;&#x597D;&#x7684;&#x4E66;&#xFF0C;1994&#x5E74;&#x51FA;&#x7248;&#xFF0C;&#x6211;&#x5728;&#x56FE;&#x4E66;&#x9986;&#x6DD8;&#x5230;&#x4E86;2002&#x5E74;&#x7684;&#x7B2C;&#x4E8C;&#x7248;&#x3002; Lex: Lex&#x7684;&#x4F7F;&#x7528;&#x65B9;&#x6CD5;&#x5982;&#x56FE;&#x6240;&#x793A;&#xFF0C;&#x5206;&#x4E3A;&#x4E09;&#x4E2A;&#x533A;&#x57DF;&#xFF1A; &#x5B9A;&#x4E49;&#x90E8;&#x5206;&#xFF1A;&#x548C;&#x666E;&#x901A;&#x7684;C&#x8BED;&#x8A00;&#x7A0B;&#x5E8F;&#x533A;&#x522B;&#x4E0D;&#x5927;&#xFF0C;&#x5B58;&#x653E;&#x5B9A;&#x4E49;&#xFF0C;&#x548C;&#x5728;&#x63A5;&#x4E0B;&#x6765;Lex&#x751F;&#x6210;&#x7684;&#x7A0B;&#x5E8F;&#x4E2D;&#x4F7F;&#x7528;&#x7684;&#x53D8;&#x91CF;&#x548C;&#x65B9;&#x6CD5;&#x7684;&#x5BFC;&#x5165;&#x3002; &#x89C4;&#x5219;&#x90E8;&#x5206;&#xFF1A;&#x89C4;&#x5219;&#x90E8;&#x5206;&#x8D77;&#x59CB;&#x4E8E;&#x201D;%%&#x201D;&#x7B26;&#x53F7;&#xFF0C;&#x7EC8;&#x6B62;&#x4E8E;&#x201D;%%&#x201D;&#x7B26;&#x53F7;&#xFF0C;&#x901A;&#x8FC7;&#x4E66;&#x5199;&#x6B63;&#x89C4;&#x5F0F;&#x5339;&#x914D;&#x6587;&#x6CD5;&#x7B26;&#x53F7;&#xFF0C;&#x5176;&#x4E2D;&#x4F7F;&#x7528;C&#x7A0B;&#x5E8F;&#x5904;&#x7406;&#x5339;&#x914D;&#x5185;&#x5BB9;&#xFF0C;&#x63A5;&#x6536;&#x5230;&#x7684;&#x7B26;&#x53F7;&#x4FDD;&#x5B58;&#x5728;yytext[]&#x4E2D;&#x3002; &#x5B50;&#x7A0B;&#x5E8F;&#x90E8;&#x5206;&#xFF1A;&#x6700;&#x540E;&#x4E00;&#x4E2A;%%&#x540E;&#x9762;&#x7684;&#x5185;&#x5BB9;&#x662F;&#x7528;&#x6237;&#x5B50;&#x7A0B;&#x5E8F;&#x90E8;&#x5206;&#xFF0C;&#x53EF;&#x4EE5;&#x5305;&#x542B;&#x7528;C&#x8BED;&#x8A00;&#x7F16;&#x5199;&#x7684;&#x5B50;&#x7A0B;&#x5E8F;&#xFF0C;&#x800C;&#x8FD9;&#x4E9B;&#x5B50;&#x7A0B;&#x5E8F;&#x53EF;&#x4EE5;&#x7528;&#x5728;&#x524D;&#x9762;&#x7684;&#x52A8;&#x4F5C;&#x4E2D;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x53EF;&#x4EE5;&#x8FBE;&#x5230;&#x7B80;&#x5316;&#x7F16;&#x7A0B;&#x7684;&#x76EE;&#x7684;&#x3002;&#x8FD9;&#x91CC;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x5F53;&#x7F16;&#x8BD1;&#x65F6;&#x4E0D;&#x5E26;-ll&#x9009;&#x9879;&#x65F6;&#xFF0C;&#x662F;&#x5FC5;&#x987B;&#x52A0;&#x5165;main&#x51FD;&#x6570;&#x548C;yywrap&#xFF08;&#x89C1;&#x540E;&#x6587;&#xFF09;&#x3002; &#x53EA;&#x8BF4;&#x6982;&#x5FF5;&#x4E0D;&#x592A;&#x76F4;&#x89C2;&#xFF0C;&#x6211;&#x4EEC;&#x6765;&#x5199;&#x4E00;&#x6BB5;&#x7A0B;&#x5E8F;&#x6765;&#x8BD5;&#x9A8C;&#x4E00;&#x4E0B;&#xFF0C;&#x8FD9;&#x4E2A;&#x7A0B;&#x5E8F;&#x6211;&#x4EEC;&#x53EA;&#x7528;&#x5230;&#x4E86;Lex&#x3002; 1.&#x9996;&#x5148;&#x662F;&#x5B9A;&#x4E49;&#x533A;&#xFF1A; &#x200B; %{ 123456789#include &lt;stdio.h&gt;unsigned charCount = 0, wordCount = 0, lineCount = 0;%}/* &#x8FD9;&#x91CC;&#x662F;&#x4E00;&#x4E2A;&#x66FF;&#x6362;&#x7684;&#x89C4;&#x5219; *//* &#x4E0D;&#x662F; &#x7A7A;&#x683C;&#x3001;&#x5236;&#x8868;&#x7B26;&#x3001;&#x6362;&#x884C;&#x7B26;&#x7684;&#x975E;&#x7A7A;&#x5185;&#x5BB9; */word [^ \\t\\n]+eol \\n &#x8FD9;&#x90E8;&#x5206;&#x5F88;&#x7B80;&#x5355;&#x6211;&#x4EEC;&#x5BFC;&#x5165;&#x6765;C&#x7684;&#x57FA;&#x7840;&#x8F93;&#x5165;&#x8F93;&#x51FA;&#x5E93;&#xFF0C;&#x5B9A;&#x4E49;&#x4E86;&#x51E0;&#x4E2A;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#x5B57;&#x7B26;&#x6570;&#xFF0C;&#x5355;&#x8BCD;&#x6570;&#x3001;&#x884C;&#x6570;&#x3002;&#x5B9A;&#x4E49;&#x4E86;&#x4E24;&#x4E2A;&#x89C4;&#x5219;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x4EE3;&#x8868;&#x5355;&#x8BCD;&#xFF08;&#x6240;&#x6709;&#x7A7A;&#x683C;&#x3001;&#x5236;&#x8868;&#x7B26;&#x3001;&#x6362;&#x884C;&#x7B26;&#x53D6;&#x53CD;&#x7684;&#x975E;&#x7A7A;&#x96C6;&#xFF09;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;&#x8F93;&#x5165;&#x7ED3;&#x675F;&#x5339;&#x914D;&#x6362;&#x884C;&#x7B26;&#x3002;2.&#x89C4;&#x5219;&#x533A;&#xFF1A; 123456789101112131415 /* &#x89C4;&#x5219;&#x533A; &#x8FD9;&#x91CC;&#x9762;&#x7684;&#x6CE8;&#x91CA;&#x4E0D;&#x80FD;&#x9876;&#x683C;&#x5199; *//* yyleng &#x662F;&#x62FF;&#x5230;&#x7684;&#x8F93;&#x5165;&#x957F;&#x5EA6; */{word} { wordCount++; charCount += yyleng; }{eol} { charCount++; lineCount++; }/* &#x5339;&#x914D;&#x5176;&#x4ED6;&#x5B57;&#x7B26; */. { charCount++; } &#x89C4;&#x5219;&#x533A;&#x5BF9;&#x4E09;&#x79CD;&#x7C7B;&#x578B;&#x8FDB;&#x884C;&#x4E86;&#x5339;&#x914D;&#xFF0C;&#x5E76;&#x7528;&#x62EC;&#x53F7;&#x91CC;&#x7684;&#x65B9;&#x6CD5;&#x5BF9;&#x8BA1;&#x6570;&#x8FDB;&#x884C;&#x66F4;&#x65B0;&#x3002; 3.&#x7528;&#x6237;&#x7A0B;&#x5E8F;&#x533A;&#xFF1A; 12345int main(){ yylex(); printf(&quot;%d %d %d \\n&quot;, lineCount, wordCount, charCount); return 0;} &#x200B; &#x7528;&#x6237;&#x7A0B;&#x5E8F;&#x533A;&#x4E5F;&#x5F88;&#x7B80;&#x5355;yylex()&#x662F;Lex&#x7684;&#x5185;&#x7F6E;&#x51FD;&#x6570;&#xFF0C;&#x8C03;&#x7528;&#x5C31;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x5339;&#x914D;&#xFF0C;&#x6BCF;&#x4E00;&#x6B21;&#x5904;&#x7406;&#x7ED3;&#x675F;&#x540E;&#x5C31;&#x4F1A;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x6253;&#x5370;&#x3002; &#x5199;&#x5B8C;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x7528;&#x547D;&#x4EE4;&#x884C;&#x8C03;&#x7528;&#xFF1A; 1$ lex word_cound.l &#x5C31;&#x4F1A;&#x751F;&#x6210;yy.lex.c&#x7684;&#x6587;&#x4EF6;&#x3002; &#x8C03;&#x7528;&#xFF1A; 1$ cc -o wordcount lex.yy.c -ll &#x8FDB;&#x884C;&#x7F16;&#x8BD1;&#x5C31;&#x53EF;&#x4EE5;&#x751F;&#x6210; wordcount&#x53EF;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#x3002; 1$ ./wordcount &#x5C31;&#x53EF;&#x4EE5;&#x8FD0;&#x884C;&#x4E86;&#x3002; YACC:Yacc&#x7684;&#x6587;&#x4EF6;&#x683C;&#x5F0F;&#x7C7B;&#x4F3C;Lex(&#x6216;&#x8005;&#x8BF4;&#x662F; Lex &#x7C7B;&#x4F3C; Yacc ) &#xFF0C;&#x4E5F;&#x540C;&#x6837;&#x5305;&#x542B;&#x5B9A;&#x4E49;&#x6BB5;&#x3001;&#x89C4;&#x5219;&#x6BB5;&#x3001;&#x7528;&#x6237;&#x5B50;&#x4F8B;&#x7A0B;&#x6BB5;&#x843D;&#xFF0C;&#x4F46;&#x662F;&#x5185;&#x5BB9;&#x5374;&#x6709;&#x6240;&#x4E0D;&#x540C;&#x3002; &#x5B9A;&#x4E49;&#x6BB5;&#xFF1A; &#x9664;&#x4E86;&#x548C; Lex &#x76F8;&#x7C7B;&#x7684;C&#x7A0B;&#x5E8F;&#x690D;&#x5165;&#x4E4B;&#x5916;&#x8FD8;&#x5305;&#x62EC;&#xFF05;token&#x3001;&#xFF05;type&#x3001;&#xFF05;left&#x3001;&#xFF05;right &#x7B49;&#x7C7B;&#x578B;&#x7684;&#x58F0;&#x660E; &#x89C4;&#x5219;&#x6BB5;&#xFF1A; &#x4F7F;&#x7528;BNF&#x8303;&#x5F0F;&#xFF08;&#x5F62;&#x5982;lable&#xFF1A;expression &#x7684;&#x4EA7;&#x751F;&#x5F0F;&#xFF09;&#x548C;C&#x4EE3;&#x7801;&#x6784;&#x6210;&#xFF0C;C&#x4EE3;&#x7801;&#x4F1A;&#x88AB;&#x539F;&#x5C01;&#x4E0D;&#x52A8;&#x7684;&#x590D;&#x5236;&#x8FDB;&#x6E90;&#x7A0B;&#x5E8F;,BNF&#x8303;&#x5F0F;&#x7531;&#x4E00;&#x4E2A;&#x89C4;&#x5219;&#x548C;&#x5192;&#x53F7;&#x7EC4;&#x6210;&#xFF0C;&#x76F8;&#x540C;&#x5DE6;&#x7AEF;&#x7684;&#x53F3;&#x7AEF;&#x4F7F;&#x7528;&#x2018;&#xFF5C;&#x2019;&#x5206;&#x9694;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x4F7F;&#x7528;C&#x8BED;&#x8A00;&#x4EE3;&#x7801;&#x4F5C;&#x4E3A;&#x5904;&#x7406;&#x4EE3;&#x7801;&#x7F6E;&#x5165;&#x3002; &#x5B50;&#x4F8B;&#x7A0B;&#x6BB5;&#xFF1A; &#x7528;&#x6237;&#x690D;&#x5165;&#x7684;&#x5B50;&#x4F8B;&#x7A0B;&#x6BB5;&#xFF0C;&#x4E3B;&#x8981;&#x8D1F;&#x8D23;&#x7528;&#x6237;&#x52A8;&#x4F5C;&#x8C03;&#x7528;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x4F1A;&#x88AB;&#x590D;&#x5236;&#x5230;&#x6E90;&#x7A0B;&#x5E8F;&#x4E2D;&#x3002; &#x5199;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x8BA1;&#x7B97;&#x5668;&#xFF1A;&#x5728;&#x8FD9;&#x4E2A;&#x4F8B;&#x7A0B;&#x4E2D;&#x6211;&#x4EEC;&#x4F1A;&#x540C;&#x65F6;&#x7528;&#x5230; Lex &#x548C; Yacc ,&#x8FD9;&#x4E2A;Demo&#x7684;&#x5730;&#x5740;&#x5728;Calc&#x4E2D;&#x5927;&#x5BB6;&#x53EF;&#x4EE5;&#x4E0B;&#x8F7D;&#x4F7F;&#x7528;&#x3002; &#x9996;&#x5148;&#x662F; Lex &#x7684;&#x4EE3;&#x7801;&#xFF1A; 123456789101112131415161718192021222324252627282930313233343536373839404142%{#include &lt;stdio.h&gt; /* &#x8FD9;&#x91CC;&#x5F15;&#x5165;&#x7684;&#x5E93;&#x662F;Yacc&#x751F;&#x6210;&#x7684;&#x6240;&#x4EE5;&#x4E00;&#x4F1A;&#x8981;&#x5148;&#x8FD0;&#x884C;Yacc */#include &quot;y.tab.h&quot; /* Lex &#x7684;&#x8BFB;&#x53D6;&#x6A21;&#x5F0F;&#x662F;&#x53EF;&#x4EE5;&#x8BFB;&#x53D6;&#x6587;&#x4EF6;&#x7684;&#xFF0C;yywrap()&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x5C31;&#x662F;&#x5728;&#x8BFB;&#x53D6;&#x4E4B;&#x540E;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5B8C;&#x6BD5;&#x7684;&#x51FD;&#x6570; */ /* &#x8FD4;&#x56DE;&#x503C;&#x4E3A;1&#x4EE3;&#x8868;&#x8BFB;&#x53D6;&#x5B8C;&#x6BD5;&#x4E0D;&#x518D;&#x8FDB;&#x884C;&#x8BFB;&#x53D6; */ /* Lex &#x4E2D;&#x6709;&#x8FD9;&#x4E9B;&#x5185;&#x7F6E;&#x51FD;&#x6570; yylex()&#x8D1F;&#x8D23;&#x5904;&#x7406; yylex()&#x7684;&#x672B;&#x5C3E;&#x4F1A;&#x81EA;&#x52A8;&#x8C03;&#x7528;yywrap() */int yywrap(void){ return 1;}%}%% /* &#x8FD9;&#x91CC;&#x5339;&#x914D;&#x4E86;&#x51E0;&#x79CD;&#x7B26;&#x53F7;&#x7C7B;&#x578B; &#x8FD4;&#x56DE;&#x503C;&#x662F;&#x4E00;&#x4E2A;&#x8BCD;&#x7D20;Token Token&#x5B9A;&#x4E49;&#x5728;Yacc&#x4E2D; */&quot;+&quot; return ADD;&quot;-&quot; return SUB;&quot;*&quot; return MUL;&quot;/&quot; return DIV;&quot;\\n&quot; return CR; /* &#x4E0B;&#x9762;&#x5339;&#x914D;&#x7684;&#x662F;&#x4E00;&#x4E2A;&#x6574;&#x578B;&#x6570;&#x548C;&#x6D6E;&#x70B9;&#x578B;&#x6570; &#x5728;&#x8FD9;&#x79CD;&#x6A21;&#x5F0F;&#x4E0B;0&#x8981;&#x5355;&#x72EC;&#x5199;&#x5426;&#x5219;&#x4E24;&#x79CD;&#x6B63;&#x5219;&#x65E0;&#x6CD5;&#x5339;&#x914D;&#x5230;0 */([1-9][0-9]*)|0|([0-9]+\\.[0-9]*) { double temp; sscanf(yytext, &quot;%lf&quot;, &amp;temp); /* yylval&#x662F;&#x4E00;&#x4E2A;&#x5185;&#x7F6E;&#x7684;&#x8054;&#x5408;&#x4F53; &#x7531;&#x7A0B;&#x5E8F;&#x81EA;&#x52A8;&#x751F;&#x6210; double_value&#x662F;&#x7528;&#x6237;&#x5728;Yacc&#x4E2D;&#x5B9A;&#x4E49;&#x7684;&#x4E00;&#x4E2A;double&#x578B;&#x7684;&#x53D8;&#x91CF; */ yylval.double_value = temp; /* &#x8FD4;&#x56DE;&#x7684;Token */ return DOUBLE_LITERAL;}[ \\t] ;. { /* &#x5176;&#x4ED6;&#x7B26;&#x53F7;&#x4F5C;&#x4E3A;&#x9519;&#x8BEF;&#x5904;&#x7406; */ fprintf(stderr, &quot;lexical error.\\n&quot;); exit(1);}%% &#x4E0A;&#x9762; Lex &#x7684;&#x4EE3;&#x7801;&#x76F8;&#x5BF9;&#x4E8E;&#x4E0A;&#x4E00;&#x9053;&#x9898;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x96BE;&#x5EA6;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x7684;&#x6CE8;&#x91CA;&#x5DF2;&#x7ECF;&#x975E;&#x5E38;&#x8BE6;&#x7EC6;&#x4E86;&#xFF0C; Lex &#x7684;&#x4F5C;&#x7528;&#x5C31;&#x662F;&#x8BC6;&#x522B;&#x7279;&#x5B9A;&#x7684;&#x6B63;&#x89C4;&#x5F0F;&#x7136;&#x540E;&#x628A;&#x6570;&#x5B57;&#x548C;&#x5BF9;&#x5E94;&#x7684;token&#x8FD4;&#x56DE;&#x7ED9;Yacc&#x53BB;&#x5904;&#x7406;&#x3002;&#x6309;&#x5E38;&#x89C4;&#x8FD9;&#x4E9B;Token&#x662F;&#x5728;Yacc&#x4E2D;&#x88AB;&#x5904;&#x7406;&#x7684;&#x3002;&#x3001; &#x4E0B;&#x9762;&#x6211;&#x4EEC;&#x6765;&#x770B;Yacc&#x7684;&#x4EE3;&#x7801;&#xFF1A; 1.&#x9996;&#x5148;&#x662F;&#x89C4;&#x5219;&#x533A;&#xFF1A; 1234567891011121314%{#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define YYDEBUG 1%}%union { int int_value; double double_value;}%token &lt;double_value&gt; DOUBLE_LITERAL%token ADD SUB MUL DIV CR%type &lt;double_value&gt; expression term primary_expression%% %{ %}&#x4E2D;&#x7F6E;&#x5165;&#x7684;&#x5E93;&#x5C31;&#x4E0D;&#x7528;&#x591A;&#x8BF4;&#x4E86; YYDEBUG&#xFF1D;1 &#x662F;&#x5F00;&#x542F;DEBUG&#x6A21;&#x5F0F;&#xFF0C;&#x8FD9;&#x6837;&#x5728;yacc&#x751F;&#x6210;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F7F;&#x7528;debug&#x53C2;&#x6570;&#x5C31;&#x80FD;&#x770B;&#x5230;&#x8F93;&#x51FA;&#x7684;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x56FE;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x4F7F;&#x7528;%union &#x8BBE;&#x7F6E;&#x4E86;yylval&#x7684;&#x5185;&#x5BB9;&#x7C7B;&#x578B; &#x91CC;&#x9762;&#x5B58;&#x50A8;&#x4E86;int&#x3001;double&#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x63A5;&#x4E0B;&#x6765;&#x4F7F;&#x7528;%token &#x8BBE;&#x7F6E;&#x4E86;&#x591A;&#x4E2A;Token&#xFF0C;double&#x7C7B;&#x578B;&#x7684;DOUBLE_LITERAL&#xFF0C;&#x65E0;&#x7C7B;&#x578B;&#x7684;&#x52A0;&#x51CF;&#x4E58;&#x9664;&#xFF0C;&#x8FD8;&#x6709;double&#x7C7B;&#x578B;&#x7684;&#x5404;&#x79CD;&#x4EA7;&#x751F;&#x5F0F;&#x3002; 2.&#x89C4;&#x5219;&#x6BB5;&#x843D;&#xFF1A; 12345678910111213141516171819202122232425262728293031323334353637383940414243 /* &#x8BBE;&#x5B9A;&#x7684;&#x89C4;&#x5219;&#x662F;&#x9010;&#x884C;&#x5904;&#x7406; &#x8FD9;&#x91CC;&#x7684;line_list&#x80FD;&#x7531; line &#x6216;&#x8005;&#x662F;line_list line &#x6784;&#x6210;*/line_list : line | line_list line ; /* &#x4E00;&#x884C;&#x662F;&#x7531;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x548C;&#x56DE;&#x8F66;&#x7EC4;&#x6210;&#x7684; &#x8FD9;&#x4EE3;&#x8868;&#x6253;&#x5370;&#x8F93;&#x5165;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7ED3;&#x679C; */line : expression CR { printf(&quot;&gt;&gt;%lf\\n&quot;, $1); } ; /* &#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x7531; term &#xFF0B; term &#x6216;&#x8005; term - term &#x7EC4;&#x6210;&#x7684; */ /* $$ &#x8868;&#x793A;&#x5DE6;&#x5F0F;&#x7684;&#x503C; $num &#x8868;&#x660E;&#x53F3;&#x5F0F;&#x4E2D;&#x7684;&#x7B2C;num&#x4E2A;&#x9879; */expression : term | expression ADD term { $$ = $1 + $3; } | expression SUB term { $$ = $1 - $3; } ; /* &#x800C; term &#x7531; pri * pri &#x548C; pri / pri &#x7EC4;&#x6210; */term : primary_expression | term MUL primary_expression { $$ = $1 * $3; } | term DIV primary_expression { $$ = $1 / $3; } ; /* &#x8FD9;&#x662F;&#x6700;&#x539F;&#x5B50;&#x7684;&#x64CD;&#x4F5C; &#x628A;DOUBLE&#x7684;Token&#x7684;&#x5BF9;&#x8C61;&#x89C4;&#x7EA6;&#x6210;primary_expression */primary_expression : DOUBLE_LITERAL ;%% &#x89C4;&#x5219;&#x6BB5;&#x843D;&#x7684;&#x7F16;&#x5199;&#x548C;&#x4E4B;&#x524D;&#x7684;&#x4ECB;&#x7ECD;&#x662F;&#x4E00;&#x6837;&#x7684;BNF&#x8303;&#x5F0F;&#x6784;&#x6210;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x4EA7;&#x751F;&#x5F0F;&#x5BF9;&#x5E94;&#x4E8E;C&#x64CD;&#x4F5C;&#x4EE3;&#x7801;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x91CC;&#x8FD8;&#x6709;&#x4E00;&#x4E9B;&#x8981;&#x89E3;&#x91CA;&#x3002; &#x6BD4;&#x5982;&#x5C06;DOUBLE_LITERAL&#x89C4;&#x7EA6;&#x4E3A;primary_expression&#x7684;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x7684;&#x8BED;&#x4E49;&#x52A8;&#x4F5C;&#xFF0C;&#x5176;&#x5B9E;&#x8FD9;&#x91CC;&#x662F;&#x4F7F;&#x7528;&#x4E86;&#x4E00;&#x4E2A;&#x9690;&#x542B;&#x7684;&#x8BED;&#x4E49;&#x52A8;&#x4F5C;{ $$ = $1 }&#x5C31;&#x662F;&#x628A;&#x5BF9;&#x5E94;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x8D4B;&#x503C;&#x3002; &#x8FD8;&#x6709;&#x5C31;&#x662F;&#x8FD9;&#x91CC;&#x7684;&#x52A0;&#x51CF;&#x548C;&#x4E58;&#x9664;&#x5206;&#x5F00;&#x5B9A;&#x4E49;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x662F;&#x7528;&#x6765;&#x4FEE;&#x6539;&#x6587;&#x6CD5;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x8FDB;&#x884C;&#x5904;&#x7406;&#x8BED;&#x6CD5;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x95EE;&#x9898;&#x4E58;&#x9664;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x9AD8;&#x4E8E;&#x52A0;&#x51CF;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#xFF0C;&#x5728;&#x4E0B;&#x4E00;&#x4E2A;Demo&#x4E2D;&#x6211;&#x4EEC;&#x4F1A;&#x770B;&#x5230;&#x5229;&#x7528;yacc&#x7279;&#x6027;&#x8FDB;&#x884C;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x5904;&#x7406;&#x3002; 3.&#x4F8B;&#x7A0B;&#x533A;&#xFF1A; 12345678910111213141516171819int yyerror(char const *str){ extern char *yytext; fprintf(stderr, &quot;parser error near %s\\n&quot;, yytext); return 0;}int main(void){ extern int yyparse(void); extern FILE *yyin; yyin = stdin; if (yyparse()) { fprintf(stderr, &quot;Error ! Error ! Error !\\n&quot;); exit(1); }} &#x8FD9;&#x6BB5;&#x843D;&#x5C31;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#x4E86;&#xFF0C;yyerror()&#x662F;&#x590D;&#x5199;&#x4E86;yacc&#x7684;&#x5185;&#x7F6E;&#x51FD;&#x6570;&#x5904;&#x7406;&#x4E86;&#x6253;&#x5370;&#x9519;&#x8BEF;&#x7684;&#x5DE5;&#x4F5C;&#x3002;main&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x8C03;&#x7528;&#x7684;&#x4E3B;&#x51FD;&#x6570; &#x628A;yacc&#x7684;&#x8F93;&#x5165;&#x6D41;&#x4ECE;&#x6587;&#x4EF6;&#x6539;&#x4E3A;&#x6807;&#x51C6;&#x8F93;&#x5165;&#x7136;&#x540E;&#x8FD0;&#x884C;yyparse()&#x8FDB;&#x884C;yacc&#x7684;&#x5206;&#x6790;&#x3002; &#x5199;&#x5B8C;&#x8FD9;&#x4E24;&#x4E2A;&#x6587;&#x4EF6;&#x4E4B;&#x540E;&#x6211;&#x4EEC;&#x8C03;&#x7528;&#x5982;&#x4E0B;&#x547D;&#x4EE4;&#x8FDB;&#x884C;&#x7F16;&#x8BD1;&#xFF1A; 1234$ yacc -d mycalc.y$ lex mycalc.l$ cc -o mycalc y.tab.c lex.yy.c -ly -ll &#x7F16;&#x8BD1;&#x8FD0;&#x884C;&#x4E4B;&#x540E;&#x7684;&#x7ED3;&#x679C;&#xFF1A; &#x81F3;&#x6B64;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x5B66;&#x4E60;&#x4E86;Lex &amp; Yacc &#x7684;&#x4E00;&#x4E9B;&#x57FA;&#x7840;&#x5E94;&#x7528;&#xFF0C;Lex &amp; Yacc &#x6709;&#x5F88;&#x591A;&#x7528;&#x9014;&#x9664;&#x4E86;&#x8FDB;&#x884C;&#x7F16;&#x8BD1;&#x76F8;&#x5173;&#x5DE5;&#x4F5C;&#x4E4B;&#x5916;&#xFF0C;&#x5BF9;&#x4E8E;&#x57FA;&#x7840;&#x7684;&#x6587;&#x672C;&#x5904;&#x7406;&#x4E5F;&#x6709;&#x4F18;&#x52BF;&#x3002;&#x4F46;&#x662F;&#x6211;&#x8BA4;&#x4E3A;&#x8FD9;&#x4E2A;&#x5DE5;&#x5177;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x8FDB;&#x884C;&#x8FC7;&#x5206;&#x7684;&#x6DF1;&#x7A76;&#x7279;&#x6027;&#xFF0C;&#x56E0;&#x4E3A;&#x7279;&#x6027;&#x5E76;&#x4E0D;&#x590D;&#x6742;&#xFF0C;&#x800C;&#x4E14;&#x5BF9;&#x4E8E;&#x5F00;&#x53D1;&#x4E00;&#x95E8;&#x8BED;&#x8A00;&#x6765;&#x8BF4;Lex &amp; Yacc &#x4E3A;&#x4F60;&#x5904;&#x7406;&#x4E86;&#x8FC7;&#x591A;&#x7684;&#x524D;&#x7AEF;&#x5DE5;&#x4F5C;&#xFF0C;&#x8FD9;&#x8BA9;&#x51FA;&#x4E8E;&#x5174;&#x8DA3;&#x7684;&#x5F00;&#x53D1;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x6709;&#x8DA3;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x867D;&#x7136;&#x63A5;&#x4E0B;&#x6765;&#x4F1A;&#x505A;&#x4E00;&#x4E9B;lex &amp; Yacc&#x7684;&#x7EC3;&#x4E60;&#xFF0C;&#x4F46;&#x662F;&#x5E76;&#x4E0D;&#x4F1A;&#x4EE5;&#x8FD9;&#x4E2A;&#x4E3A;&#x4E3B;&#x3002;","categories":[],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://lfkdsk.github.io/tags/编程语言/"}]},{"title":"学习制作一门有趣的编程语言 － 序","slug":"make-new-language-0","date":"2016-05-26T12:29:00.000Z","updated":"2016-06-06T09:18:44.000Z","comments":true,"path":"2016/05/26/make-new-language-0/","link":"","permalink":"https://lfkdsk.github.io/2016/05/26/make-new-language-0/","excerpt":"","text":"&#x4F60;&#x7684;&#x95EE;&#x9898;&#x5728;&#x4E8E;&#x8BFB;&#x4E66;&#x592A;&#x5C11;&#xFF0C;&#x60F3;&#x7684;&#x592A;&#x591A; &#x2014;&#x2014; &#x6768;&#x7EDB; &#x6628;&#x5929;&#x60CA;&#x95FB;&#x6768;&#x7EDB;&#x5148;&#x751F;&#x53BB;&#x4E16;&#xFF0C;&#x7A81;&#x7136;&#x60F3;&#x5230;&#x4E86;&#x51E0;&#x5E74;&#x524D;&#x770B;&#x5230;&#x7684;&#x6768;&#x7EDB;&#x5148;&#x751F;&#x7684;&#x8FD9;&#x53E5;&#x8BDD;&#x3002;&#x6211;&#x89C9;&#x5F97;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x9886;&#x57DF;&#x7406;&#x8BBA;&#x77E5;&#x8BC6;&#x66F4;&#x662F;&#x5C24;&#x4E3A;&#x91CD;&#x8981;&#xFF0C;&#x73B0;&#x5728;&#x67D0;&#x4E4E;&#x4E0A;&#x76DB;&#x884C;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x7406;&#x8BBA;&#x77E5;&#x8BC6;&#xFF08;&#x5C24;&#x6307;&#x7B97;&#x6CD5;&#xFF09;&#x65E0;&#x7528;&#x8BBA;&#x5F53;&#x771F;&#x7279;&#x522B;&#x53EF;&#x60B2;&#x3002;&#x5728;&#x8FD9;&#x91CC;&#x6211;&#x89C9;&#x5F97;&#x8BA8;&#x8BBA;&#x79D1;&#x73ED;&#x975E;&#x79D1;&#x73ED;&#x7684;&#x4EBA;&#x90FD;&#x662F;&#x522B;&#x6709;&#x7528;&#x5FC3;&#x7684;&#xFF0C;&#x91CD;&#x8981;&#x7684;&#x95EE;&#x9898;&#x5728;&#x4E8E;&#x8FD9;&#x4E9B;&#x57FA;&#x7840;&#x7684;&#x8BAD;&#x7EC3;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x79D1;&#x73ED;&#x975E;&#x79D1;&#x73ED;&#xFF0C;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x5F88;&#x591A;&#x5927;&#x795E;&#x90FD;&#x4E0D;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x76F8;&#x5173;&#x4E13;&#x4E1A;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x4ED6;&#x4EEC;&#x7684;&#x57FA;&#x7840;&#x7684;&#x6DF1;&#x539A;&#x7A0B;&#x5EA6;&#xFF0C;&#x786E;&#x662F;&#x5F88;&#x591A;&#x79D1;&#x73ED;&#x51FA;&#x8EAB;&#x7684;&#x4EBA;&#x65E0;&#x6CD5;&#x80FD;&#x53CA;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x8BF4;&#x4E00;&#x5207;&#x7684;&#x95EE;&#x9898;&#x8FD8;&#x662F;&#x8981;&#x79EF;&#x7D2F;&#x77E5;&#x8BC6;&#x3002; &#x8FD9;&#x5B66;&#x671F;&#x4E00;&#x76F4;&#x5728;&#x5B66;&#x7F16;&#x8BD1;&#x539F;&#x7406;&#x7684;&#x8BFE;&#x7A0B;&#xFF0C;&#x6211;&#x5B9E;&#x5B9E;&#x5728;&#x5728;&#x7684;&#x611F;&#x89C9;&#x5230;&#x4E86;&#x8FD9;&#x4E2A;&#x8BFE;&#x7A0B;&#x548C;&#x76F8;&#x5173;&#x5185;&#x5BB9;&#x7684;&#x6709;&#x8DA3;&#x3002;&#x5C24;&#x5176;&#x662F;&#x6211;&#x5728;&#x5B66;&#x4E60;&#x4E4B;&#x524D;&#x8BD5;&#x7740;&#x81EA;&#x5DF1;&#x4E0D;&#x501F;&#x52A9;&#x4EFB;&#x4F55;&#x7684;&#x7406;&#x8BBA;&#x53BB;&#x5199;&#x4E00;&#x4E2A;&#x89E3;&#x91CA;&#x5668;&#xFF0C;&#x7ADF;&#x7136;&#x4E5F;&#x547D;&#x4E2D;&#x4E86;&#x4E0D;&#x5C11;&#x7684;&#x77E5;&#x8BC6;&#xFF0C;&#x8FD9;&#x8BA9;&#x6211;&#x611F;&#x5230;&#x5F88;&#x6B23;&#x559C;&#x3002;&#x6240;&#x4EE5;&#x5462;&#x5C31;&#x6597;&#x80C6;&#x5F00;&#x4E86;&#x8FD9;&#x4E2A;&#x9898;&#x76EE;&#x6765;&#x8BD5;&#x56FE;&#x9010;&#x6B65;&#x7684;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x81EA;&#x5DF1;&#x7684;&#x5B9E;&#x9A8C;&#x6027;&#x8BED;&#x8A00;&#xFF0C;&#x8BF4;&#x4E86;&#x662F;&#x5B9E;&#x9A8C;&#x6027;&#x8BED;&#x8A00;&#x5C31;&#x662F;&#x8BF4;&#x5E76;&#x4E0D;&#x80FD;&#x5B8C;&#x6210;&#x76EE;&#x524D;&#x8BED;&#x8A00;&#x7684;&#x5DE5;&#x7A0B;&#x6027;&#x5DE5;&#x4F5C;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x81EA;&#x5DF1;&#x8FD9;&#x4E2A;&#x8BED;&#x8A00;&#x65B9;&#x9762;&#x80FD;&#x591F;&#x5F62;&#x6210;&#x95ED;&#x73AF;&#x3002;&#x8FD9;&#x95E8;&#x8BED;&#x8A00;&#x6216;&#x8BB8;&#x6B8B;&#x7F3A;&#xFF0C;&#x6216;&#x8BB8;&#x4F1A;&#x9047;&#x5230;&#x5F88;&#x591A;&#x95EE;&#x9898;&#xFF0C;&#x800C;&#x4E14;&#x5F88;&#x957F;&#x65F6;&#x95F4;&#x90FD;&#x4F1A;&#x4F9D;&#x8D56;C&#x8BED;&#x8A00;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5B8C;&#x6574;&#x7684;&#x3001;&#x6210;&#x578B;&#x7684;&#x3001;&#x548C;&#x670B;&#x53CB;&#x5546;&#x8BAE;&#x597D;&#x7684;&#x8BA1;&#x5212;&#xFF0C;&#x4E00;&#x5B9A;&#x4F1A;&#x9010;&#x6B65;&#x7684;&#x5B9E;&#x73B0;&#x7684;&#x3002; &#x76EE;&#x524D;&#x7684;&#x8BA1;&#x5212;: &#x4F7F;&#x7528;Lex&#x548C;Yacc&#x53BB;&#x5B9E;&#x73B0;&#x9010;&#x6B65;&#x5B9E;&#x73B0;&#x8BED;&#x8A00;&#x7684;&#x96CF;&#x5F62;Lex&#x548C;Yacc&#x662F;&#x4E45;&#x7ECF;&#x5E02;&#x573A;&#x8003;&#x9A8C;&#x7684;&#x5DE5;&#x5177;&#xFF0C;&#x867D;&#x7136;&#x6709;&#x70B9;&#x9648;&#x65E7;&#x4F46;&#x662F;&#x8D44;&#x6599;&#x4E30;&#x5BCC;&#xFF0C;&#x7B80;&#x6D01;&#x6613;&#x61C2;&#xFF0C;&#x5728;&#x7F16;&#x8BD1;&#x5668;&#x524D;&#x7AEF;&#x7684;&#x5B9E;&#x73B0;&#x4E0A;&#x6709;&#x5F88;&#x5927;&#x4F18;&#x52BF;&#x3002;&#x4E0E;&#x6B64;&#x540C;&#x65F6;&#x5728;&#x7F16;&#x8BD1;&#x5668;&#x7684;&#x540E;&#x7AEF;&#x6BD4;&#x8F83;&#x590D;&#x6742;&#xFF0C;&#x6211;&#x4F1A;&#x5148;&#x628A;&#x4EE3;&#x7801;&#x8F6C;&#x6362;&#x6210;C&#xFF0C;&#x7136;&#x540E;&#x4F7F;&#x7528;C&#x7684;&#x6210;&#x578B;&#x7684;&#x7F16;&#x8BD1;&#x94FE;&#x8FDB;&#x884C;&#x3002; &#x66F4;&#x6362;&#x524D;&#x7AEF;&#xFF0C;&#x91C7;&#x53D6;&#x624B;&#x52A8;&#x6784;&#x5EFA;&#x7684;&#x65B9;&#x5F0F;&#x6709;&#x4E00;&#x4E9B;&#x6211;&#x60F3;&#x5B9E;&#x73B0;&#x7684;&#x529F;&#x80FD;&#x5982;&#x679C;&#x4F7F;&#x7528;Lex&#x548C;Yacc&#x53EF;&#x80FD;&#x4E0D;&#x662F;&#x90A3;&#x4E48;&#x65B9;&#x4FBF;&#xFF0C;&#x800C;&#x4E14;&#x5728;&#x77E5;&#x8BC6;&#x6027;&#x8FD8;&#x6709;&#x6548;&#x7387;&#x4E0A;&#xFF0C;&#x624B;&#x52A8;&#x5B9E;&#x73B0;&#x90FD;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x6709;&#x8DA3;&#x7684;&#x5DE5;&#x7A0B;&#x3002; &#x5E0C;&#x671B;&#x80FD;&#x591F;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x5668;&#x540E;&#x7AEF;&#xFF0C;&#x53EF;&#x80FD;&#x662F;&#x8F6C;&#x673A;&#x5668;&#x7801;&#xFF0C;&#x53EF;&#x80FD;&#x5199;&#x6808;&#x5F0F;&#x865A;&#x62DF;&#x673A;&#x8FD9;&#x4E2A;&#x76EE;&#x524D;&#x8FD8;&#x6CA1;&#x6709;&#x60F3;&#x597D;&#xFF0C;&#x4E5F;&#x53EA;&#x662F;&#x5E0C;&#x671B;&#x53BB;&#x505A;&#x7684;&#x3002; &#x613F;&#x6768;&#x7EDB;&#x5148;&#x751F;&#x4E00;&#x8DEF;&#x8D70;&#x597D;&#x3002;","categories":[],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://lfkdsk.github.io/tags/编程语言/"}]},{"title":"情怀向：仙剑Dos版攻略","slug":"xianjian10","date":"2007-02-10T14:36:42.000Z","updated":"2017-03-10T02:29:53.000Z","comments":true,"path":"2007/02/10/xianjian10/","link":"","permalink":"https://lfkdsk.github.io/2007/02/10/xianjian10/","excerpt":"","text":"&#x521D;&#x4E2D;&#x65F6;&#x5019;&#x7684;&#x4E2D;&#x4E8C;&#x4E4B;&#x4F5C;&#x3002;","categories":[],"tags":[{"name":"情怀向","slug":"情怀向","permalink":"https://lfkdsk.github.io/tags/情怀向/"}]}]}